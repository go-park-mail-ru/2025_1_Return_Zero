// Code generated by MockGen. DO NOT EDIT.
// Source: domain/usecase.go
//
// Generated by this command:
//
//	mockgen -source=domain/usecase.go -destination=mocks/mock_usecase.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/microservices/album/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockUsecase) CreateStream(ctx context.Context, albumID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, albumID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockUsecaseMockRecorder) CreateStream(ctx, albumID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockUsecase)(nil).CreateStream), ctx, albumID, userID)
}

// GetAlbumByID mocks base method.
func (m *MockUsecase) GetAlbumByID(ctx context.Context, id, userID int64) (*usecase.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByID", ctx, id, userID)
	ret0, _ := ret[0].(*usecase.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByID indicates an expected call of GetAlbumByID.
func (mr *MockUsecaseMockRecorder) GetAlbumByID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByID", reflect.TypeOf((*MockUsecase)(nil).GetAlbumByID), ctx, id, userID)
}

// GetAlbumTitleByID mocks base method.
func (m *MockUsecase) GetAlbumTitleByID(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumTitleByID", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByID indicates an expected call of GetAlbumTitleByID.
func (mr *MockUsecaseMockRecorder) GetAlbumTitleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByID", reflect.TypeOf((*MockUsecase)(nil).GetAlbumTitleByID), ctx, id)
}

// GetAlbumTitleByIDs mocks base method.
func (m *MockUsecase) GetAlbumTitleByIDs(ctx context.Context, ids []int64) (*usecase.AlbumTitleMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumTitleByIDs", ctx, ids)
	ret0, _ := ret[0].(*usecase.AlbumTitleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByIDs indicates an expected call of GetAlbumTitleByIDs.
func (mr *MockUsecaseMockRecorder) GetAlbumTitleByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByIDs", reflect.TypeOf((*MockUsecase)(nil).GetAlbumTitleByIDs), ctx, ids)
}

// GetAlbumsByIDs mocks base method.
func (m *MockUsecase) GetAlbumsByIDs(ctx context.Context, ids []int64, userID int64) ([]*usecase.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByIDs", ctx, ids, userID)
	ret0, _ := ret[0].([]*usecase.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByIDs indicates an expected call of GetAlbumsByIDs.
func (mr *MockUsecaseMockRecorder) GetAlbumsByIDs(ctx, ids, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByIDs", reflect.TypeOf((*MockUsecase)(nil).GetAlbumsByIDs), ctx, ids, userID)
}

// GetAllAlbums mocks base method.
func (m *MockUsecase) GetAllAlbums(ctx context.Context, filters *usecase.AlbumFilters, userID int64) ([]*usecase.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbums", ctx, filters, userID)
	ret0, _ := ret[0].([]*usecase.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbums indicates an expected call of GetAllAlbums.
func (mr *MockUsecaseMockRecorder) GetAllAlbums(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbums", reflect.TypeOf((*MockUsecase)(nil).GetAllAlbums), ctx, filters, userID)
}

// GetFavoriteAlbums mocks base method.
func (m *MockUsecase) GetFavoriteAlbums(ctx context.Context, filters *usecase.AlbumFilters, userID int64) ([]*usecase.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteAlbums", ctx, filters, userID)
	ret0, _ := ret[0].([]*usecase.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteAlbums indicates an expected call of GetFavoriteAlbums.
func (mr *MockUsecaseMockRecorder) GetFavoriteAlbums(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteAlbums", reflect.TypeOf((*MockUsecase)(nil).GetFavoriteAlbums), ctx, filters, userID)
}

// LikeAlbum mocks base method.
func (m *MockUsecase) LikeAlbum(ctx context.Context, request *usecase.LikeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeAlbum", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeAlbum indicates an expected call of LikeAlbum.
func (mr *MockUsecaseMockRecorder) LikeAlbum(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeAlbum", reflect.TypeOf((*MockUsecase)(nil).LikeAlbum), ctx, request)
}

// SearchAlbums mocks base method.
func (m *MockUsecase) SearchAlbums(ctx context.Context, query string, userID int64) ([]*usecase.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAlbums", ctx, query, userID)
	ret0, _ := ret[0].([]*usecase.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAlbums indicates an expected call of SearchAlbums.
func (mr *MockUsecaseMockRecorder) SearchAlbums(ctx, query, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAlbums", reflect.TypeOf((*MockUsecase)(nil).SearchAlbums), ctx, query, userID)
}
