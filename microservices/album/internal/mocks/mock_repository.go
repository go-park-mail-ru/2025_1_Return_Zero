// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/album/internal/domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=microservices/album/internal/domain/repository.go -destination=microservices/album/internal/mocks/mock_repository.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	repository "github.com/go-park-mail-ru/2025_1_Return_Zero/microservices/album/model/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckAlbumExists mocks base method.
func (m *MockRepository) CheckAlbumExists(ctx context.Context, albumID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAlbumExists", ctx, albumID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAlbumExists indicates an expected call of CheckAlbumExists.
func (mr *MockRepositoryMockRecorder) CheckAlbumExists(ctx, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAlbumExists", reflect.TypeOf((*MockRepository)(nil).CheckAlbumExists), ctx, albumID)
}

// CreateAlbum mocks base method.
func (m *MockRepository) CreateAlbum(ctx context.Context, album *repository.CreateAlbumRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlbum", ctx, album)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAlbum indicates an expected call of CreateAlbum.
func (mr *MockRepositoryMockRecorder) CreateAlbum(ctx, album any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlbum", reflect.TypeOf((*MockRepository)(nil).CreateAlbum), ctx, album)
}

// CreateStream mocks base method.
func (m *MockRepository) CreateStream(ctx context.Context, albumID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, albumID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockRepositoryMockRecorder) CreateStream(ctx, albumID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockRepository)(nil).CreateStream), ctx, albumID, userID)
}

// DeleteAlbum mocks base method.
func (m *MockRepository) DeleteAlbum(ctx context.Context, albumID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlbum", ctx, albumID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlbum indicates an expected call of DeleteAlbum.
func (mr *MockRepositoryMockRecorder) DeleteAlbum(ctx, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbum", reflect.TypeOf((*MockRepository)(nil).DeleteAlbum), ctx, albumID)
}

// GetAlbumByID mocks base method.
func (m *MockRepository) GetAlbumByID(ctx context.Context, id, userID int64) (*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByID", ctx, id, userID)
	ret0, _ := ret[0].(*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByID indicates an expected call of GetAlbumByID.
func (mr *MockRepositoryMockRecorder) GetAlbumByID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByID", reflect.TypeOf((*MockRepository)(nil).GetAlbumByID), ctx, id, userID)
}

// GetAlbumTitleByID mocks base method.
func (m *MockRepository) GetAlbumTitleByID(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumTitleByID", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByID indicates an expected call of GetAlbumTitleByID.
func (mr *MockRepositoryMockRecorder) GetAlbumTitleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByID", reflect.TypeOf((*MockRepository)(nil).GetAlbumTitleByID), ctx, id)
}

// GetAlbumTitleByIDs mocks base method.
func (m *MockRepository) GetAlbumTitleByIDs(ctx context.Context, ids []int64) (map[int64]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumTitleByIDs", ctx, ids)
	ret0, _ := ret[0].(map[int64]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByIDs indicates an expected call of GetAlbumTitleByIDs.
func (mr *MockRepositoryMockRecorder) GetAlbumTitleByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByIDs", reflect.TypeOf((*MockRepository)(nil).GetAlbumTitleByIDs), ctx, ids)
}

// GetAlbumsByIDs mocks base method.
func (m *MockRepository) GetAlbumsByIDs(ctx context.Context, ids []int64, userID int64) ([]*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByIDs", ctx, ids, userID)
	ret0, _ := ret[0].([]*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByIDs indicates an expected call of GetAlbumsByIDs.
func (mr *MockRepositoryMockRecorder) GetAlbumsByIDs(ctx, ids, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByIDs", reflect.TypeOf((*MockRepository)(nil).GetAlbumsByIDs), ctx, ids, userID)
}

// GetAlbumsLabelID mocks base method.
func (m *MockRepository) GetAlbumsLabelID(ctx context.Context, filters *repository.AlbumFilters, labelID int64) ([]*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsLabelID", ctx, filters, labelID)
	ret0, _ := ret[0].([]*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsLabelID indicates an expected call of GetAlbumsLabelID.
func (mr *MockRepositoryMockRecorder) GetAlbumsLabelID(ctx, filters, labelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsLabelID", reflect.TypeOf((*MockRepository)(nil).GetAlbumsLabelID), ctx, filters, labelID)
}

// GetAllAlbums mocks base method.
func (m *MockRepository) GetAllAlbums(ctx context.Context, filters *repository.AlbumFilters, userID int64) ([]*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbums", ctx, filters, userID)
	ret0, _ := ret[0].([]*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbums indicates an expected call of GetAllAlbums.
func (mr *MockRepositoryMockRecorder) GetAllAlbums(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbums", reflect.TypeOf((*MockRepository)(nil).GetAllAlbums), ctx, filters, userID)
}

// GetFavoriteAlbums mocks base method.
func (m *MockRepository) GetFavoriteAlbums(ctx context.Context, filters *repository.AlbumFilters, userID int64) ([]*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteAlbums", ctx, filters, userID)
	ret0, _ := ret[0].([]*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteAlbums indicates an expected call of GetFavoriteAlbums.
func (mr *MockRepositoryMockRecorder) GetFavoriteAlbums(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteAlbums", reflect.TypeOf((*MockRepository)(nil).GetFavoriteAlbums), ctx, filters, userID)
}

// LikeAlbum mocks base method.
func (m *MockRepository) LikeAlbum(ctx context.Context, request *repository.LikeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeAlbum", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeAlbum indicates an expected call of LikeAlbum.
func (mr *MockRepositoryMockRecorder) LikeAlbum(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeAlbum", reflect.TypeOf((*MockRepository)(nil).LikeAlbum), ctx, request)
}

// SearchAlbums mocks base method.
func (m *MockRepository) SearchAlbums(ctx context.Context, query string, userID int64) ([]*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAlbums", ctx, query, userID)
	ret0, _ := ret[0].([]*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAlbums indicates an expected call of SearchAlbums.
func (mr *MockRepositoryMockRecorder) SearchAlbums(ctx, query, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAlbums", reflect.TypeOf((*MockRepository)(nil).SearchAlbums), ctx, query, userID)
}

// UnlikeAlbum mocks base method.
func (m *MockRepository) UnlikeAlbum(ctx context.Context, request *repository.LikeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeAlbum", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeAlbum indicates an expected call of UnlikeAlbum.
func (mr *MockRepositoryMockRecorder) UnlikeAlbum(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeAlbum", reflect.TypeOf((*MockRepository)(nil).UnlikeAlbum), ctx, request)
}

// MockS3Repository is a mock of S3Repository interface.
type MockS3Repository struct {
	ctrl     *gomock.Controller
	recorder *MockS3RepositoryMockRecorder
	isgomock struct{}
}

// MockS3RepositoryMockRecorder is the mock recorder for MockS3Repository.
type MockS3RepositoryMockRecorder struct {
	mock *MockS3Repository
}

// NewMockS3Repository creates a new mock instance.
func NewMockS3Repository(ctrl *gomock.Controller) *MockS3Repository {
	mock := &MockS3Repository{ctrl: ctrl}
	mock.recorder = &MockS3RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Repository) EXPECT() *MockS3RepositoryMockRecorder {
	return m.recorder
}

// UploadAlbumAvatar mocks base method.
func (m *MockS3Repository) UploadAlbumAvatar(ctx context.Context, albumTitle string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAlbumAvatar", ctx, albumTitle, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAlbumAvatar indicates an expected call of UploadAlbumAvatar.
func (mr *MockS3RepositoryMockRecorder) UploadAlbumAvatar(ctx, albumTitle, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAlbumAvatar", reflect.TypeOf((*MockS3Repository)(nil).UploadAlbumAvatar), ctx, albumTitle, file)
}
