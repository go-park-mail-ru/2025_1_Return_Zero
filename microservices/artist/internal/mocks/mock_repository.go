// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/repository.go -destination=mocks/mock_repository.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	repository "github.com/go-park-mail-ru/2025_1_Return_Zero/microservices/artist/model/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddArtistsToAlbum mocks base method.
func (m *MockRepository) AddArtistsToAlbum(ctx context.Context, artistsIDs []int64, albumID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArtistsToAlbum", ctx, artistsIDs, albumID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArtistsToAlbum indicates an expected call of AddArtistsToAlbum.
func (mr *MockRepositoryMockRecorder) AddArtistsToAlbum(ctx, artistsIDs, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArtistsToAlbum", reflect.TypeOf((*MockRepository)(nil).AddArtistsToAlbum), ctx, artistsIDs, albumID)
}

// AddArtistsToTracks mocks base method.
func (m *MockRepository) AddArtistsToTracks(ctx context.Context, artistsIDs, trackIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddArtistsToTracks", ctx, artistsIDs, trackIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddArtistsToTracks indicates an expected call of AddArtistsToTracks.
func (mr *MockRepositoryMockRecorder) AddArtistsToTracks(ctx, artistsIDs, trackIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddArtistsToTracks", reflect.TypeOf((*MockRepository)(nil).AddArtistsToTracks), ctx, artistsIDs, trackIDs)
}

// ChangeArtistTitle mocks base method.
func (m *MockRepository) ChangeArtistTitle(ctx context.Context, newTitle string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeArtistTitle", ctx, newTitle, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeArtistTitle indicates an expected call of ChangeArtistTitle.
func (mr *MockRepositoryMockRecorder) ChangeArtistTitle(ctx, newTitle, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeArtistTitle", reflect.TypeOf((*MockRepository)(nil).ChangeArtistTitle), ctx, newTitle, id)
}

// CheckArtistExists mocks base method.
func (m *MockRepository) CheckArtistExists(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckArtistExists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckArtistExists indicates an expected call of CheckArtistExists.
func (mr *MockRepositoryMockRecorder) CheckArtistExists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckArtistExists", reflect.TypeOf((*MockRepository)(nil).CheckArtistExists), ctx, id)
}

// CheckArtistNameExist mocks base method.
func (m *MockRepository) CheckArtistNameExist(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckArtistNameExist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckArtistNameExist indicates an expected call of CheckArtistNameExist.
func (mr *MockRepositoryMockRecorder) CheckArtistNameExist(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckArtistNameExist", reflect.TypeOf((*MockRepository)(nil).CheckArtistNameExist), ctx, id)
}

// CreateArtist mocks base method.
func (m *MockRepository) CreateArtist(ctx context.Context, artist *repository.Artist) (*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtist", ctx, artist)
	ret0, _ := ret[0].(*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArtist indicates an expected call of CreateArtist.
func (mr *MockRepositoryMockRecorder) CreateArtist(ctx, artist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockRepository)(nil).CreateArtist), ctx, artist)
}

// CreateStreamsByArtistIDs mocks base method.
func (m *MockRepository) CreateStreamsByArtistIDs(ctx context.Context, data *repository.ArtistStreamCreateDataList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamsByArtistIDs", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStreamsByArtistIDs indicates an expected call of CreateStreamsByArtistIDs.
func (mr *MockRepositoryMockRecorder) CreateStreamsByArtistIDs(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamsByArtistIDs", reflect.TypeOf((*MockRepository)(nil).CreateStreamsByArtistIDs), ctx, data)
}

// DeleteArtist mocks base method.
func (m *MockRepository) DeleteArtist(ctx context.Context, artistID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtist", ctx, artistID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtist indicates an expected call of DeleteArtist.
func (mr *MockRepositoryMockRecorder) DeleteArtist(ctx, artistID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtist", reflect.TypeOf((*MockRepository)(nil).DeleteArtist), ctx, artistID)
}

// GetAlbumIDsByArtistID mocks base method.
func (m *MockRepository) GetAlbumIDsByArtistID(ctx context.Context, id int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumIDsByArtistID", ctx, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumIDsByArtistID indicates an expected call of GetAlbumIDsByArtistID.
func (mr *MockRepositoryMockRecorder) GetAlbumIDsByArtistID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumIDsByArtistID", reflect.TypeOf((*MockRepository)(nil).GetAlbumIDsByArtistID), ctx, id)
}

// GetAllArtists mocks base method.
func (m *MockRepository) GetAllArtists(ctx context.Context, filters *repository.Filters, userID int64) ([]*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArtists", ctx, filters, userID)
	ret0, _ := ret[0].([]*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArtists indicates an expected call of GetAllArtists.
func (mr *MockRepositoryMockRecorder) GetAllArtists(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArtists", reflect.TypeOf((*MockRepository)(nil).GetAllArtists), ctx, filters, userID)
}

// GetArtistByID mocks base method.
func (m *MockRepository) GetArtistByID(ctx context.Context, id, userID int64) (*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", ctx, id, userID)
	ret0, _ := ret[0].(*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockRepositoryMockRecorder) GetArtistByID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockRepository)(nil).GetArtistByID), ctx, id, userID)
}

// GetArtistByIDWithoutUser mocks base method.
func (m *MockRepository) GetArtistByIDWithoutUser(ctx context.Context, id int64) (*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByIDWithoutUser", ctx, id)
	ret0, _ := ret[0].(*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByIDWithoutUser indicates an expected call of GetArtistByIDWithoutUser.
func (mr *MockRepositoryMockRecorder) GetArtistByIDWithoutUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByIDWithoutUser", reflect.TypeOf((*MockRepository)(nil).GetArtistByIDWithoutUser), ctx, id)
}

// GetArtistLabelID mocks base method.
func (m *MockRepository) GetArtistLabelID(ctx context.Context, artistID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistLabelID", ctx, artistID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistLabelID indicates an expected call of GetArtistLabelID.
func (mr *MockRepositoryMockRecorder) GetArtistLabelID(ctx, artistID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistLabelID", reflect.TypeOf((*MockRepository)(nil).GetArtistLabelID), ctx, artistID)
}

// GetArtistStats mocks base method.
func (m *MockRepository) GetArtistStats(ctx context.Context, id int64) (*repository.ArtistStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistStats", ctx, id)
	ret0, _ := ret[0].(*repository.ArtistStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistStats indicates an expected call of GetArtistStats.
func (mr *MockRepositoryMockRecorder) GetArtistStats(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistStats", reflect.TypeOf((*MockRepository)(nil).GetArtistStats), ctx, id)
}

// GetArtistTitleByID mocks base method.
func (m *MockRepository) GetArtistTitleByID(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistTitleByID", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistTitleByID indicates an expected call of GetArtistTitleByID.
func (mr *MockRepositoryMockRecorder) GetArtistTitleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistTitleByID", reflect.TypeOf((*MockRepository)(nil).GetArtistTitleByID), ctx, id)
}

// GetArtistsByAlbumID mocks base method.
func (m *MockRepository) GetArtistsByAlbumID(ctx context.Context, albumID int64) ([]*repository.ArtistWithTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByAlbumID", ctx, albumID)
	ret0, _ := ret[0].([]*repository.ArtistWithTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumID indicates an expected call of GetArtistsByAlbumID.
func (mr *MockRepositoryMockRecorder) GetArtistsByAlbumID(ctx, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumID", reflect.TypeOf((*MockRepository)(nil).GetArtistsByAlbumID), ctx, albumID)
}

// GetArtistsByAlbumIDs mocks base method.
func (m *MockRepository) GetArtistsByAlbumIDs(ctx context.Context, albumIDs []int64) (map[int64][]*repository.ArtistWithTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByAlbumIDs", ctx, albumIDs)
	ret0, _ := ret[0].(map[int64][]*repository.ArtistWithTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumIDs indicates an expected call of GetArtistsByAlbumIDs.
func (mr *MockRepositoryMockRecorder) GetArtistsByAlbumIDs(ctx, albumIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumIDs", reflect.TypeOf((*MockRepository)(nil).GetArtistsByAlbumIDs), ctx, albumIDs)
}

// GetArtistsByTrackID mocks base method.
func (m *MockRepository) GetArtistsByTrackID(ctx context.Context, id int64) ([]*repository.ArtistWithRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByTrackID", ctx, id)
	ret0, _ := ret[0].([]*repository.ArtistWithRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackID indicates an expected call of GetArtistsByTrackID.
func (mr *MockRepositoryMockRecorder) GetArtistsByTrackID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackID", reflect.TypeOf((*MockRepository)(nil).GetArtistsByTrackID), ctx, id)
}

// GetArtistsByTrackIDs mocks base method.
func (m *MockRepository) GetArtistsByTrackIDs(ctx context.Context, trackIDs []int64) (map[int64][]*repository.ArtistWithRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByTrackIDs", ctx, trackIDs)
	ret0, _ := ret[0].(map[int64][]*repository.ArtistWithRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackIDs indicates an expected call of GetArtistsByTrackIDs.
func (mr *MockRepositoryMockRecorder) GetArtistsByTrackIDs(ctx, trackIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackIDs", reflect.TypeOf((*MockRepository)(nil).GetArtistsByTrackIDs), ctx, trackIDs)
}

// GetArtistsLabelID mocks base method.
func (m *MockRepository) GetArtistsLabelID(ctx context.Context, filters *repository.Filters, labelID int64) ([]*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsLabelID", ctx, filters, labelID)
	ret0, _ := ret[0].([]*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsLabelID indicates an expected call of GetArtistsLabelID.
func (mr *MockRepositoryMockRecorder) GetArtistsLabelID(ctx, filters, labelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsLabelID", reflect.TypeOf((*MockRepository)(nil).GetArtistsLabelID), ctx, filters, labelID)
}

// GetArtistsListenedByUserID mocks base method.
func (m *MockRepository) GetArtistsListenedByUserID(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsListenedByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsListenedByUserID indicates an expected call of GetArtistsListenedByUserID.
func (mr *MockRepositoryMockRecorder) GetArtistsListenedByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsListenedByUserID", reflect.TypeOf((*MockRepository)(nil).GetArtistsListenedByUserID), ctx, userID)
}

// GetFavoriteArtists mocks base method.
func (m *MockRepository) GetFavoriteArtists(ctx context.Context, filters *repository.Filters, userID int64) ([]*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteArtists", ctx, filters, userID)
	ret0, _ := ret[0].([]*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteArtists indicates an expected call of GetFavoriteArtists.
func (mr *MockRepositoryMockRecorder) GetFavoriteArtists(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteArtists", reflect.TypeOf((*MockRepository)(nil).GetFavoriteArtists), ctx, filters, userID)
}

// GetTrackIDsByArtistID mocks base method.
func (m *MockRepository) GetTrackIDsByArtistID(ctx context.Context, id int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackIDsByArtistID", ctx, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackIDsByArtistID indicates an expected call of GetTrackIDsByArtistID.
func (mr *MockRepositoryMockRecorder) GetTrackIDsByArtistID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackIDsByArtistID", reflect.TypeOf((*MockRepository)(nil).GetTrackIDsByArtistID), ctx, id)
}

// LikeArtist mocks base method.
func (m *MockRepository) LikeArtist(ctx context.Context, request *repository.LikeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeArtist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeArtist indicates an expected call of LikeArtist.
func (mr *MockRepositoryMockRecorder) LikeArtist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeArtist", reflect.TypeOf((*MockRepository)(nil).LikeArtist), ctx, request)
}

// SearchArtists mocks base method.
func (m *MockRepository) SearchArtists(ctx context.Context, query string, userID int64) ([]*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArtists", ctx, query, userID)
	ret0, _ := ret[0].([]*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArtists indicates an expected call of SearchArtists.
func (mr *MockRepositoryMockRecorder) SearchArtists(ctx, query, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArtists", reflect.TypeOf((*MockRepository)(nil).SearchArtists), ctx, query, userID)
}

// UnlikeArtist mocks base method.
func (m *MockRepository) UnlikeArtist(ctx context.Context, request *repository.LikeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikeArtist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikeArtist indicates an expected call of UnlikeArtist.
func (mr *MockRepositoryMockRecorder) UnlikeArtist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikeArtist", reflect.TypeOf((*MockRepository)(nil).UnlikeArtist), ctx, request)
}

// UploadAvatar mocks base method.
func (m *MockRepository) UploadAvatar(ctx context.Context, artistID int64, avatarURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", ctx, artistID, avatarURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockRepositoryMockRecorder) UploadAvatar(ctx, artistID, avatarURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockRepository)(nil).UploadAvatar), ctx, artistID, avatarURL)
}

// MockS3Repository is a mock of S3Repository interface.
type MockS3Repository struct {
	ctrl     *gomock.Controller
	recorder *MockS3RepositoryMockRecorder
	isgomock struct{}
}

// MockS3RepositoryMockRecorder is the mock recorder for MockS3Repository.
type MockS3RepositoryMockRecorder struct {
	mock *MockS3Repository
}

// NewMockS3Repository creates a new mock instance.
func NewMockS3Repository(ctrl *gomock.Controller) *MockS3Repository {
	mock := &MockS3Repository{ctrl: ctrl}
	mock.recorder = &MockS3RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Repository) EXPECT() *MockS3RepositoryMockRecorder {
	return m.recorder
}

// GetAvatarURL mocks base method.
func (m *MockS3Repository) GetAvatarURL(ctx context.Context, fileKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarURL", ctx, fileKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarURL indicates an expected call of GetAvatarURL.
func (mr *MockS3RepositoryMockRecorder) GetAvatarURL(ctx, fileKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarURL", reflect.TypeOf((*MockS3Repository)(nil).GetAvatarURL), ctx, fileKey)
}

// UploadArtistAvatar mocks base method.
func (m *MockS3Repository) UploadArtistAvatar(ctx context.Context, artistTitle string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadArtistAvatar", ctx, artistTitle, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadArtistAvatar indicates an expected call of UploadArtistAvatar.
func (mr *MockS3RepositoryMockRecorder) UploadArtistAvatar(ctx, artistTitle, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadArtistAvatar", reflect.TypeOf((*MockS3Repository)(nil).UploadArtistAvatar), ctx, artistTitle, file)
}
