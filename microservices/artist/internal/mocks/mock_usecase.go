// Code generated by MockGen. DO NOT EDIT.
// Source: domain/usecase.go
//
// Generated by this command:
//
//	mockgen -source=domain/usecase.go -destination=mocks/mock_usecase.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/microservices/artist/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateStreamsByArtistIDs mocks base method.
func (m *MockUsecase) CreateStreamsByArtistIDs(ctx context.Context, data *usecase.ArtistStreamCreateDataList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamsByArtistIDs", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStreamsByArtistIDs indicates an expected call of CreateStreamsByArtistIDs.
func (mr *MockUsecaseMockRecorder) CreateStreamsByArtistIDs(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamsByArtistIDs", reflect.TypeOf((*MockUsecase)(nil).CreateStreamsByArtistIDs), ctx, data)
}

// GetAlbumIDsByArtistID mocks base method.
func (m *MockUsecase) GetAlbumIDsByArtistID(ctx context.Context, id int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumIDsByArtistID", ctx, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumIDsByArtistID indicates an expected call of GetAlbumIDsByArtistID.
func (mr *MockUsecaseMockRecorder) GetAlbumIDsByArtistID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumIDsByArtistID", reflect.TypeOf((*MockUsecase)(nil).GetAlbumIDsByArtistID), ctx, id)
}

// GetAllArtists mocks base method.
func (m *MockUsecase) GetAllArtists(ctx context.Context, filters *usecase.Filters, userID int64) (*usecase.ArtistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArtists", ctx, filters, userID)
	ret0, _ := ret[0].(*usecase.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArtists indicates an expected call of GetAllArtists.
func (mr *MockUsecaseMockRecorder) GetAllArtists(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArtists", reflect.TypeOf((*MockUsecase)(nil).GetAllArtists), ctx, filters, userID)
}

// GetArtistByID mocks base method.
func (m *MockUsecase) GetArtistByID(ctx context.Context, id, userID int64) (*usecase.ArtistDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", ctx, id, userID)
	ret0, _ := ret[0].(*usecase.ArtistDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockUsecaseMockRecorder) GetArtistByID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockUsecase)(nil).GetArtistByID), ctx, id, userID)
}

// GetArtistTitleByID mocks base method.
func (m *MockUsecase) GetArtistTitleByID(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistTitleByID", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistTitleByID indicates an expected call of GetArtistTitleByID.
func (mr *MockUsecaseMockRecorder) GetArtistTitleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistTitleByID", reflect.TypeOf((*MockUsecase)(nil).GetArtistTitleByID), ctx, id)
}

// GetArtistsByAlbumID mocks base method.
func (m *MockUsecase) GetArtistsByAlbumID(ctx context.Context, albumID int64) (*usecase.ArtistWithTitleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByAlbumID", ctx, albumID)
	ret0, _ := ret[0].(*usecase.ArtistWithTitleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumID indicates an expected call of GetArtistsByAlbumID.
func (mr *MockUsecaseMockRecorder) GetArtistsByAlbumID(ctx, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumID", reflect.TypeOf((*MockUsecase)(nil).GetArtistsByAlbumID), ctx, albumID)
}

// GetArtistsByAlbumIDs mocks base method.
func (m *MockUsecase) GetArtistsByAlbumIDs(ctx context.Context, albumIDs []int64) (*usecase.ArtistWithTitleMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByAlbumIDs", ctx, albumIDs)
	ret0, _ := ret[0].(*usecase.ArtistWithTitleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumIDs indicates an expected call of GetArtistsByAlbumIDs.
func (mr *MockUsecaseMockRecorder) GetArtistsByAlbumIDs(ctx, albumIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumIDs", reflect.TypeOf((*MockUsecase)(nil).GetArtistsByAlbumIDs), ctx, albumIDs)
}

// GetArtistsByTrackID mocks base method.
func (m *MockUsecase) GetArtistsByTrackID(ctx context.Context, id int64) (*usecase.ArtistWithRoleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByTrackID", ctx, id)
	ret0, _ := ret[0].(*usecase.ArtistWithRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackID indicates an expected call of GetArtistsByTrackID.
func (mr *MockUsecaseMockRecorder) GetArtistsByTrackID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackID", reflect.TypeOf((*MockUsecase)(nil).GetArtistsByTrackID), ctx, id)
}

// GetArtistsByTrackIDs mocks base method.
func (m *MockUsecase) GetArtistsByTrackIDs(ctx context.Context, trackIDs []int64) (*usecase.ArtistWithRoleMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByTrackIDs", ctx, trackIDs)
	ret0, _ := ret[0].(*usecase.ArtistWithRoleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackIDs indicates an expected call of GetArtistsByTrackIDs.
func (mr *MockUsecaseMockRecorder) GetArtistsByTrackIDs(ctx, trackIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackIDs", reflect.TypeOf((*MockUsecase)(nil).GetArtistsByTrackIDs), ctx, trackIDs)
}

// GetArtistsListenedByUserID mocks base method.
func (m *MockUsecase) GetArtistsListenedByUserID(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsListenedByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsListenedByUserID indicates an expected call of GetArtistsListenedByUserID.
func (mr *MockUsecaseMockRecorder) GetArtistsListenedByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsListenedByUserID", reflect.TypeOf((*MockUsecase)(nil).GetArtistsListenedByUserID), ctx, userID)
}

// GetFavoriteArtists mocks base method.
func (m *MockUsecase) GetFavoriteArtists(ctx context.Context, filters *usecase.Filters, userID int64) (*usecase.ArtistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteArtists", ctx, filters, userID)
	ret0, _ := ret[0].(*usecase.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteArtists indicates an expected call of GetFavoriteArtists.
func (mr *MockUsecaseMockRecorder) GetFavoriteArtists(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteArtists", reflect.TypeOf((*MockUsecase)(nil).GetFavoriteArtists), ctx, filters, userID)
}

// GetTrackIDsByArtistID mocks base method.
func (m *MockUsecase) GetTrackIDsByArtistID(ctx context.Context, id int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackIDsByArtistID", ctx, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackIDsByArtistID indicates an expected call of GetTrackIDsByArtistID.
func (mr *MockUsecaseMockRecorder) GetTrackIDsByArtistID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackIDsByArtistID", reflect.TypeOf((*MockUsecase)(nil).GetTrackIDsByArtistID), ctx, id)
}

// LikeArtist mocks base method.
func (m *MockUsecase) LikeArtist(ctx context.Context, request *usecase.LikeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeArtist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeArtist indicates an expected call of LikeArtist.
func (mr *MockUsecaseMockRecorder) LikeArtist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeArtist", reflect.TypeOf((*MockUsecase)(nil).LikeArtist), ctx, request)
}

// SearchArtists mocks base method.
func (m *MockUsecase) SearchArtists(ctx context.Context, query string, userID int64) (*usecase.ArtistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArtists", ctx, query, userID)
	ret0, _ := ret[0].(*usecase.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArtists indicates an expected call of SearchArtists.
func (mr *MockUsecaseMockRecorder) SearchArtists(ctx, query, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArtists", reflect.TypeOf((*MockUsecase)(nil).SearchArtists), ctx, query, userID)
}
