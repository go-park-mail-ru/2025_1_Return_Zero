// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/track/internal/domain/usecase.go
//
// Generated by this command:
//
//	mockgen -source=microservices/track/internal/domain/usecase.go -destination=microservices/track/internal/mocks/mock_usecase.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/microservices/track/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddTracksToAlbum mocks base method.
func (m *MockUsecase) AddTracksToAlbum(ctx context.Context, tracksList *usecase.TracksListWithAlbumID) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTracksToAlbum", ctx, tracksList)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTracksToAlbum indicates an expected call of AddTracksToAlbum.
func (mr *MockUsecaseMockRecorder) AddTracksToAlbum(ctx, tracksList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTracksToAlbum", reflect.TypeOf((*MockUsecase)(nil).AddTracksToAlbum), ctx, tracksList)
}

// CreateStream mocks base method.
func (m *MockUsecase) CreateStream(ctx context.Context, stream *usecase.TrackStreamCreateData) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, stream)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockUsecaseMockRecorder) CreateStream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockUsecase)(nil).CreateStream), ctx, stream)
}

// DeleteTracksByAlbumID mocks base method.
func (m *MockUsecase) DeleteTracksByAlbumID(ctx context.Context, albumID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTracksByAlbumID", ctx, albumID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTracksByAlbumID indicates an expected call of DeleteTracksByAlbumID.
func (mr *MockUsecaseMockRecorder) DeleteTracksByAlbumID(ctx, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracksByAlbumID", reflect.TypeOf((*MockUsecase)(nil).DeleteTracksByAlbumID), ctx, albumID)
}

// GetAlbumIDByTrackID mocks base method.
func (m *MockUsecase) GetAlbumIDByTrackID(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumIDByTrackID", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumIDByTrackID indicates an expected call of GetAlbumIDByTrackID.
func (mr *MockUsecaseMockRecorder) GetAlbumIDByTrackID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumIDByTrackID", reflect.TypeOf((*MockUsecase)(nil).GetAlbumIDByTrackID), ctx, id)
}

// GetAllTracks mocks base method.
func (m *MockUsecase) GetAllTracks(ctx context.Context, filters *usecase.TrackFilters, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTracks", ctx, filters, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTracks indicates an expected call of GetAllTracks.
func (mr *MockUsecaseMockRecorder) GetAllTracks(ctx, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTracks", reflect.TypeOf((*MockUsecase)(nil).GetAllTracks), ctx, filters, userID)
}

// GetFavoriteTracks mocks base method.
func (m *MockUsecase) GetFavoriteTracks(ctx context.Context, favoriteRequest *usecase.FavoriteRequest) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteTracks", ctx, favoriteRequest)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteTracks indicates an expected call of GetFavoriteTracks.
func (mr *MockUsecaseMockRecorder) GetFavoriteTracks(ctx, favoriteRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteTracks", reflect.TypeOf((*MockUsecase)(nil).GetFavoriteTracks), ctx, favoriteRequest)
}

// GetLastListenedTracks mocks base method.
func (m *MockUsecase) GetLastListenedTracks(ctx context.Context, userID int64, filters *usecase.TrackFilters) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastListenedTracks", ctx, userID, filters)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastListenedTracks indicates an expected call of GetLastListenedTracks.
func (mr *MockUsecaseMockRecorder) GetLastListenedTracks(ctx, userID, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastListenedTracks", reflect.TypeOf((*MockUsecase)(nil).GetLastListenedTracks), ctx, userID, filters)
}

// GetMinutesListenedByUserID mocks base method.
func (m *MockUsecase) GetMinutesListenedByUserID(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinutesListenedByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinutesListenedByUserID indicates an expected call of GetMinutesListenedByUserID.
func (mr *MockUsecaseMockRecorder) GetMinutesListenedByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinutesListenedByUserID", reflect.TypeOf((*MockUsecase)(nil).GetMinutesListenedByUserID), ctx, userID)
}

// GetMostLikedLastWeekTracks mocks base method.
func (m *MockUsecase) GetMostLikedLastWeekTracks(ctx context.Context, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostLikedLastWeekTracks", ctx, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostLikedLastWeekTracks indicates an expected call of GetMostLikedLastWeekTracks.
func (mr *MockUsecaseMockRecorder) GetMostLikedLastWeekTracks(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostLikedLastWeekTracks", reflect.TypeOf((*MockUsecase)(nil).GetMostLikedLastWeekTracks), ctx, userID)
}

// GetMostLikedTracks mocks base method.
func (m *MockUsecase) GetMostLikedTracks(ctx context.Context, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostLikedTracks", ctx, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostLikedTracks indicates an expected call of GetMostLikedTracks.
func (mr *MockUsecaseMockRecorder) GetMostLikedTracks(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostLikedTracks", reflect.TypeOf((*MockUsecase)(nil).GetMostLikedTracks), ctx, userID)
}

// GetMostListenedLastMonthTracks mocks base method.
func (m *MockUsecase) GetMostListenedLastMonthTracks(ctx context.Context, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostListenedLastMonthTracks", ctx, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostListenedLastMonthTracks indicates an expected call of GetMostListenedLastMonthTracks.
func (mr *MockUsecaseMockRecorder) GetMostListenedLastMonthTracks(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostListenedLastMonthTracks", reflect.TypeOf((*MockUsecase)(nil).GetMostListenedLastMonthTracks), ctx, userID)
}

// GetMostRecentTracks mocks base method.
func (m *MockUsecase) GetMostRecentTracks(ctx context.Context, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRecentTracks", ctx, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRecentTracks indicates an expected call of GetMostRecentTracks.
func (mr *MockUsecaseMockRecorder) GetMostRecentTracks(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentTracks", reflect.TypeOf((*MockUsecase)(nil).GetMostRecentTracks), ctx, userID)
}

// GetTrackByID mocks base method.
func (m *MockUsecase) GetTrackByID(ctx context.Context, id, userID int64) (*usecase.TrackDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackByID", ctx, id, userID)
	ret0, _ := ret[0].(*usecase.TrackDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackByID indicates an expected call of GetTrackByID.
func (mr *MockUsecaseMockRecorder) GetTrackByID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackByID", reflect.TypeOf((*MockUsecase)(nil).GetTrackByID), ctx, id, userID)
}

// GetTracksByAlbumID mocks base method.
func (m *MockUsecase) GetTracksByAlbumID(ctx context.Context, id, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByAlbumID", ctx, id, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByAlbumID indicates an expected call of GetTracksByAlbumID.
func (mr *MockUsecaseMockRecorder) GetTracksByAlbumID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByAlbumID", reflect.TypeOf((*MockUsecase)(nil).GetTracksByAlbumID), ctx, id, userID)
}

// GetTracksByIDs mocks base method.
func (m *MockUsecase) GetTracksByIDs(ctx context.Context, ids []int64, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByIDs", ctx, ids, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByIDs indicates an expected call of GetTracksByIDs.
func (mr *MockUsecaseMockRecorder) GetTracksByIDs(ctx, ids, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByIDs", reflect.TypeOf((*MockUsecase)(nil).GetTracksByIDs), ctx, ids, userID)
}

// GetTracksByIDsFiltered mocks base method.
func (m *MockUsecase) GetTracksByIDsFiltered(ctx context.Context, ids []int64, filters *usecase.TrackFilters, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByIDsFiltered", ctx, ids, filters, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByIDsFiltered indicates an expected call of GetTracksByIDsFiltered.
func (mr *MockUsecaseMockRecorder) GetTracksByIDsFiltered(ctx, ids, filters, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByIDsFiltered", reflect.TypeOf((*MockUsecase)(nil).GetTracksByIDsFiltered), ctx, ids, filters, userID)
}

// GetTracksListenedByUserID mocks base method.
func (m *MockUsecase) GetTracksListenedByUserID(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksListenedByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksListenedByUserID indicates an expected call of GetTracksListenedByUserID.
func (mr *MockUsecaseMockRecorder) GetTracksListenedByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksListenedByUserID", reflect.TypeOf((*MockUsecase)(nil).GetTracksListenedByUserID), ctx, userID)
}

// LikeTrack mocks base method.
func (m *MockUsecase) LikeTrack(ctx context.Context, likeRequest *usecase.LikeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeTrack", ctx, likeRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeTrack indicates an expected call of LikeTrack.
func (mr *MockUsecaseMockRecorder) LikeTrack(ctx, likeRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeTrack", reflect.TypeOf((*MockUsecase)(nil).LikeTrack), ctx, likeRequest)
}

// SearchTracks mocks base method.
func (m *MockUsecase) SearchTracks(ctx context.Context, query string, userID int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTracks", ctx, query, userID)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTracks indicates an expected call of SearchTracks.
func (mr *MockUsecaseMockRecorder) SearchTracks(ctx, query, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTracks", reflect.TypeOf((*MockUsecase)(nil).SearchTracks), ctx, query, userID)
}

// UpdateStreamDuration mocks base method.
func (m *MockUsecase) UpdateStreamDuration(ctx context.Context, endedStream *usecase.TrackStreamUpdateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamDuration", ctx, endedStream)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStreamDuration indicates an expected call of UpdateStreamDuration.
func (mr *MockUsecaseMockRecorder) UpdateStreamDuration(ctx, endedStream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamDuration", reflect.TypeOf((*MockUsecase)(nil).UpdateStreamDuration), ctx, endedStream)
}
