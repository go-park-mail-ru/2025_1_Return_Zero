// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/user/internal/domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=microservices/user/internal/domain/repository.go -destination=microservices/user/internal/mocks/mock_repository.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	repository "github.com/go-park-mail-ru/2025_1_Return_Zero/microservices/user/model/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ChangeUserData mocks base method.
func (m *MockRepository) ChangeUserData(ctx context.Context, username string, changeData *repository.ChangeUserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserData", ctx, username, changeData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserData indicates an expected call of ChangeUserData.
func (mr *MockRepositoryMockRecorder) ChangeUserData(ctx, username, changeData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserData", reflect.TypeOf((*MockRepository)(nil).ChangeUserData), ctx, username, changeData)
}

// ChangeUserPrivacySettings mocks base method.
func (m *MockRepository) ChangeUserPrivacySettings(ctx context.Context, username string, privacySettings *repository.PrivacySettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPrivacySettings", ctx, username, privacySettings)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserPrivacySettings indicates an expected call of ChangeUserPrivacySettings.
func (mr *MockRepositoryMockRecorder) ChangeUserPrivacySettings(ctx, username, privacySettings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPrivacySettings", reflect.TypeOf((*MockRepository)(nil).ChangeUserPrivacySettings), ctx, username, privacySettings)
}

// CheckLabelNameUnique mocks base method.
func (m *MockRepository) CheckLabelNameUnique(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLabelNameUnique", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLabelNameUnique indicates an expected call of CheckLabelNameUnique.
func (mr *MockRepositoryMockRecorder) CheckLabelNameUnique(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLabelNameUnique", reflect.TypeOf((*MockRepository)(nil).CheckLabelNameUnique), ctx, name)
}

// CheckUsersByUsernames mocks base method.
func (m *MockRepository) CheckUsersByUsernames(ctx context.Context, usernames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsersByUsernames", ctx, usernames)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUsersByUsernames indicates an expected call of CheckUsersByUsernames.
func (mr *MockRepositoryMockRecorder) CheckUsersByUsernames(ctx, usernames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsersByUsernames", reflect.TypeOf((*MockRepository)(nil).CheckUsersByUsernames), ctx, usernames)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, regData *repository.RegisterData) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, regData)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, regData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, regData)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(ctx context.Context, userRepo *repository.UserDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userRepo)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(ctx, userRepo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), ctx, userRepo)
}

// GetFullUserData mocks base method.
func (m *MockRepository) GetFullUserData(ctx context.Context, username string) (*repository.UserFullData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullUserData", ctx, username)
	ret0, _ := ret[0].(*repository.UserFullData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullUserData indicates an expected call of GetFullUserData.
func (mr *MockRepositoryMockRecorder) GetFullUserData(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullUserData", reflect.TypeOf((*MockRepository)(nil).GetFullUserData), ctx, username)
}

// GetIDByUsername mocks base method.
func (m *MockRepository) GetIDByUsername(ctx context.Context, username string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByUsername", ctx, username)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUsername indicates an expected call of GetIDByUsername.
func (mr *MockRepositoryMockRecorder) GetIDByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUsername", reflect.TypeOf((*MockRepository)(nil).GetIDByUsername), ctx, username)
}

// GetLabelById mocks base method.
func (m *MockRepository) GetLabelById(ctx context.Context, labelID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelById", ctx, labelID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelById indicates an expected call of GetLabelById.
func (mr *MockRepositoryMockRecorder) GetLabelById(ctx, labelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelById", reflect.TypeOf((*MockRepository)(nil).GetLabelById), ctx, labelID)
}

// GetLabelIDByUserID mocks base method.
func (m *MockRepository) GetLabelIDByUserID(ctx context.Context, userID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelIDByUserID", ctx, userID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelIDByUserID indicates an expected call of GetLabelIDByUserID.
func (mr *MockRepositoryMockRecorder) GetLabelIDByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelIDByUserID", reflect.TypeOf((*MockRepository)(nil).GetLabelIDByUserID), ctx, userID)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(ctx context.Context, ID int64) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, ID)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), ctx, ID)
}

// GetUserPrivacy mocks base method.
func (m *MockRepository) GetUserPrivacy(ctx context.Context, id int64) (*repository.PrivacySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivacy", ctx, id)
	ret0, _ := ret[0].(*repository.PrivacySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivacy indicates an expected call of GetUserPrivacy.
func (mr *MockRepositoryMockRecorder) GetUserPrivacy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivacy", reflect.TypeOf((*MockRepository)(nil).GetUserPrivacy), ctx, id)
}

// GetUsersByLabelID mocks base method.
func (m *MockRepository) GetUsersByLabelID(ctx context.Context, labelID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByLabelID", ctx, labelID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByLabelID indicates an expected call of GetUsersByLabelID.
func (mr *MockRepositoryMockRecorder) GetUsersByLabelID(ctx, labelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByLabelID", reflect.TypeOf((*MockRepository)(nil).GetUsersByLabelID), ctx, labelID)
}

// LoginUser mocks base method.
func (m *MockRepository) LoginUser(ctx context.Context, logData *repository.LoginData) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, logData)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockRepositoryMockRecorder) LoginUser(ctx, logData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockRepository)(nil).LoginUser), ctx, logData)
}

// RemoveUsersFromLabel mocks base method.
func (m *MockRepository) RemoveUsersFromLabel(ctx context.Context, labelID int64, usernames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUsersFromLabel", ctx, labelID, usernames)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUsersFromLabel indicates an expected call of RemoveUsersFromLabel.
func (mr *MockRepositoryMockRecorder) RemoveUsersFromLabel(ctx, labelID, usernames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUsersFromLabel", reflect.TypeOf((*MockRepository)(nil).RemoveUsersFromLabel), ctx, labelID, usernames)
}

// UpdateLabel mocks base method.
func (m *MockRepository) UpdateLabel(ctx context.Context, newName string, labelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabel", ctx, newName, labelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabel indicates an expected call of UpdateLabel.
func (mr *MockRepositoryMockRecorder) UpdateLabel(ctx, newName, labelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabel", reflect.TypeOf((*MockRepository)(nil).UpdateLabel), ctx, newName, labelID)
}

// UpdateUsersLabel mocks base method.
func (m *MockRepository) UpdateUsersLabel(ctx context.Context, labelID int64, usernames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsersLabel", ctx, labelID, usernames)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsersLabel indicates an expected call of UpdateUsersLabel.
func (mr *MockRepositoryMockRecorder) UpdateUsersLabel(ctx, labelID, usernames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersLabel", reflect.TypeOf((*MockRepository)(nil).UpdateUsersLabel), ctx, labelID, usernames)
}

// UploadAvatar mocks base method.
func (m *MockRepository) UploadAvatar(ctx context.Context, avatarUrl string, ID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", ctx, avatarUrl, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockRepositoryMockRecorder) UploadAvatar(ctx, avatarUrl, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockRepository)(nil).UploadAvatar), ctx, avatarUrl, ID)
}

// MockS3Repository is a mock of S3Repository interface.
type MockS3Repository struct {
	ctrl     *gomock.Controller
	recorder *MockS3RepositoryMockRecorder
	isgomock struct{}
}

// MockS3RepositoryMockRecorder is the mock recorder for MockS3Repository.
type MockS3RepositoryMockRecorder struct {
	mock *MockS3Repository
}

// NewMockS3Repository creates a new mock instance.
func NewMockS3Repository(ctrl *gomock.Controller) *MockS3Repository {
	mock := &MockS3Repository{ctrl: ctrl}
	mock.recorder = &MockS3RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Repository) EXPECT() *MockS3RepositoryMockRecorder {
	return m.recorder
}

// GetAvatarURL mocks base method.
func (m *MockS3Repository) GetAvatarURL(ctx context.Context, fileKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarURL", ctx, fileKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarURL indicates an expected call of GetAvatarURL.
func (mr *MockS3RepositoryMockRecorder) GetAvatarURL(ctx, fileKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarURL", reflect.TypeOf((*MockS3Repository)(nil).GetAvatarURL), ctx, fileKey)
}

// UploadUserAvatar mocks base method.
func (m *MockS3Repository) UploadUserAvatar(ctx context.Context, fileKey string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserAvatar", ctx, fileKey, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockS3RepositoryMockRecorder) UploadUserAvatar(ctx, fileKey, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockS3Repository)(nil).UploadUserAvatar), ctx, fileKey, file)
}
