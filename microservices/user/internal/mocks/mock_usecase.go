// Code generated by MockGen. DO NOT EDIT.
// Source: microservices/user/internal/domain/usecase.go
//
// Generated by this command:
//
//	mockgen -source=microservices/user/internal/domain/usecase.go -destination=microservices/user/internal/mocks/mock_usecase.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/microservices/user/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// ChangeUserData mocks base method.
func (m *MockUsecase) ChangeUserData(ctx context.Context, username string, changeData *usecase.ChangeUserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserData", ctx, username, changeData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserData indicates an expected call of ChangeUserData.
func (mr *MockUsecaseMockRecorder) ChangeUserData(ctx, username, changeData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserData", reflect.TypeOf((*MockUsecase)(nil).ChangeUserData), ctx, username, changeData)
}

// ChangeUserPrivacySettings mocks base method.
func (m *MockUsecase) ChangeUserPrivacySettings(ctx context.Context, username string, privacySettings *usecase.PrivacySettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPrivacySettings", ctx, username, privacySettings)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserPrivacySettings indicates an expected call of ChangeUserPrivacySettings.
func (mr *MockUsecaseMockRecorder) ChangeUserPrivacySettings(ctx, username, privacySettings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPrivacySettings", reflect.TypeOf((*MockUsecase)(nil).ChangeUserPrivacySettings), ctx, username, privacySettings)
}

// CreateUser mocks base method.
func (m *MockUsecase) CreateUser(ctx context.Context, registerData *usecase.RegisterData) (*usecase.UserFront, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, registerData)
	ret0, _ := ret[0].(*usecase.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsecaseMockRecorder) CreateUser(ctx, registerData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsecase)(nil).CreateUser), ctx, registerData)
}

// DeleteUser mocks base method.
func (m *MockUsecase) DeleteUser(ctx context.Context, deleteData *usecase.UserDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, deleteData)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsecaseMockRecorder) DeleteUser(ctx, deleteData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsecase)(nil).DeleteUser), ctx, deleteData)
}

// GetAvatarURL mocks base method.
func (m *MockUsecase) GetAvatarURL(ctx context.Context, fileKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarURL", ctx, fileKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarURL indicates an expected call of GetAvatarURL.
func (mr *MockUsecaseMockRecorder) GetAvatarURL(ctx, fileKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarURL", reflect.TypeOf((*MockUsecase)(nil).GetAvatarURL), ctx, fileKey)
}

// GetFullUserData mocks base method.
func (m *MockUsecase) GetFullUserData(ctx context.Context, username string) (*usecase.UserFullData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullUserData", ctx, username)
	ret0, _ := ret[0].(*usecase.UserFullData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullUserData indicates an expected call of GetFullUserData.
func (mr *MockUsecaseMockRecorder) GetFullUserData(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullUserData", reflect.TypeOf((*MockUsecase)(nil).GetFullUserData), ctx, username)
}

// GetIDByUsername mocks base method.
func (m *MockUsecase) GetIDByUsername(ctx context.Context, username string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByUsername", ctx, username)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUsername indicates an expected call of GetIDByUsername.
func (mr *MockUsecaseMockRecorder) GetIDByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUsername", reflect.TypeOf((*MockUsecase)(nil).GetIDByUsername), ctx, username)
}

// GetUserByID mocks base method.
func (m *MockUsecase) GetUserByID(ctx context.Context, id int64) (*usecase.UserFront, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*usecase.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUsecaseMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUsecase)(nil).GetUserByID), ctx, id)
}

// GetUserPrivacySettings mocks base method.
func (m *MockUsecase) GetUserPrivacySettings(ctx context.Context, id int64) (*usecase.PrivacySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivacySettings", ctx, id)
	ret0, _ := ret[0].(*usecase.PrivacySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivacySettings indicates an expected call of GetUserPrivacySettings.
func (mr *MockUsecaseMockRecorder) GetUserPrivacySettings(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivacySettings", reflect.TypeOf((*MockUsecase)(nil).GetUserPrivacySettings), ctx, id)
}

// LoginUser mocks base method.
func (m *MockUsecase) LoginUser(ctx context.Context, loginData *usecase.LoginData) (*usecase.UserFront, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, loginData)
	ret0, _ := ret[0].(*usecase.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUsecaseMockRecorder) LoginUser(ctx, loginData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUsecase)(nil).LoginUser), ctx, loginData)
}

// UploadAvatar mocks base method.
func (m *MockUsecase) UploadAvatar(ctx context.Context, avatarUrl string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", ctx, avatarUrl, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockUsecaseMockRecorder) UploadAvatar(ctx, avatarUrl, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUsecase)(nil).UploadAvatar), ctx, avatarUrl, id)
}

// UploadUserAvatar mocks base method.
func (m *MockUsecase) UploadUserAvatar(ctx context.Context, username string, file []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserAvatar", ctx, username, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockUsecaseMockRecorder) UploadUserAvatar(ctx, username, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockUsecase)(nil).UploadUserAvatar), ctx, username, file)
}
