// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/repository.go -destination=mocks/mock_repository.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	io "io"
	reflect "reflect"

	repository "github.com/go-park-mail-ru/2025_1_Return_Zero/microservices/playlist/model/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddTrackToPlaylist mocks base method.
func (m *MockRepository) AddTrackToPlaylist(ctx context.Context, request *repository.AddTrackToPlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrackToPlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrackToPlaylist indicates an expected call of AddTrackToPlaylist.
func (mr *MockRepositoryMockRecorder) AddTrackToPlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrackToPlaylist", reflect.TypeOf((*MockRepository)(nil).AddTrackToPlaylist), ctx, request)
}

// CheckExistsPlaylistAndNotDifferentUser mocks base method.
func (m *MockRepository) CheckExistsPlaylistAndNotDifferentUser(ctx context.Context, playlistID, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsPlaylistAndNotDifferentUser", ctx, playlistID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsPlaylistAndNotDifferentUser indicates an expected call of CheckExistsPlaylistAndNotDifferentUser.
func (mr *MockRepositoryMockRecorder) CheckExistsPlaylistAndNotDifferentUser(ctx, playlistID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsPlaylistAndNotDifferentUser", reflect.TypeOf((*MockRepository)(nil).CheckExistsPlaylistAndNotDifferentUser), ctx, playlistID, userID)
}

// CreatePlaylist mocks base method.
func (m *MockRepository) CreatePlaylist(ctx context.Context, playlistCreateRequest *repository.CreatePlaylistRequest) (*repository.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaylist", ctx, playlistCreateRequest)
	ret0, _ := ret[0].(*repository.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaylist indicates an expected call of CreatePlaylist.
func (mr *MockRepositoryMockRecorder) CreatePlaylist(ctx, playlistCreateRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylist", reflect.TypeOf((*MockRepository)(nil).CreatePlaylist), ctx, playlistCreateRequest)
}

// GetCombinedPlaylistsByUserID mocks base method.
func (m *MockRepository) GetCombinedPlaylistsByUserID(ctx context.Context, userID int64) (*repository.PlaylistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedPlaylistsByUserID", ctx, userID)
	ret0, _ := ret[0].(*repository.PlaylistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombinedPlaylistsByUserID indicates an expected call of GetCombinedPlaylistsByUserID.
func (mr *MockRepositoryMockRecorder) GetCombinedPlaylistsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedPlaylistsByUserID", reflect.TypeOf((*MockRepository)(nil).GetCombinedPlaylistsByUserID), ctx, userID)
}

// GetPlaylistByID mocks base method.
func (m *MockRepository) GetPlaylistByID(ctx context.Context, id int64) (*repository.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistByID", ctx, id)
	ret0, _ := ret[0].(*repository.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistByID indicates an expected call of GetPlaylistByID.
func (mr *MockRepositoryMockRecorder) GetPlaylistByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistByID", reflect.TypeOf((*MockRepository)(nil).GetPlaylistByID), ctx, id)
}

// GetPlaylistTrackIds mocks base method.
func (m *MockRepository) GetPlaylistTrackIds(ctx context.Context, request *repository.GetPlaylistTrackIdsRequest) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistTrackIds", ctx, request)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistTrackIds indicates an expected call of GetPlaylistTrackIds.
func (mr *MockRepositoryMockRecorder) GetPlaylistTrackIds(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistTrackIds", reflect.TypeOf((*MockRepository)(nil).GetPlaylistTrackIds), ctx, request)
}

// GetPlaylistWithIsLikedByID mocks base method.
func (m *MockRepository) GetPlaylistWithIsLikedByID(ctx context.Context, id, userID int64) (*repository.PlaylistWithIsLiked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistWithIsLikedByID", ctx, id, userID)
	ret0, _ := ret[0].(*repository.PlaylistWithIsLiked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistWithIsLikedByID indicates an expected call of GetPlaylistWithIsLikedByID.
func (mr *MockRepositoryMockRecorder) GetPlaylistWithIsLikedByID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistWithIsLikedByID", reflect.TypeOf((*MockRepository)(nil).GetPlaylistWithIsLikedByID), ctx, id, userID)
}

// GetPlaylistsToAdd mocks base method.
func (m *MockRepository) GetPlaylistsToAdd(ctx context.Context, request *repository.GetPlaylistsToAddRequest) (*repository.GetPlaylistsToAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistsToAdd", ctx, request)
	ret0, _ := ret[0].(*repository.GetPlaylistsToAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistsToAdd indicates an expected call of GetPlaylistsToAdd.
func (mr *MockRepositoryMockRecorder) GetPlaylistsToAdd(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistsToAdd", reflect.TypeOf((*MockRepository)(nil).GetPlaylistsToAdd), ctx, request)
}

// GetProfilePlaylists mocks base method.
func (m *MockRepository) GetProfilePlaylists(ctx context.Context, request *repository.GetProfilePlaylistsRequest) (*repository.GetProfilePlaylistsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilePlaylists", ctx, request)
	ret0, _ := ret[0].(*repository.GetProfilePlaylistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePlaylists indicates an expected call of GetProfilePlaylists.
func (mr *MockRepositoryMockRecorder) GetProfilePlaylists(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePlaylists", reflect.TypeOf((*MockRepository)(nil).GetProfilePlaylists), ctx, request)
}

// LikePlaylist mocks base method.
func (m *MockRepository) LikePlaylist(ctx context.Context, request *repository.LikePlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePlaylist indicates an expected call of LikePlaylist.
func (mr *MockRepositoryMockRecorder) LikePlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePlaylist", reflect.TypeOf((*MockRepository)(nil).LikePlaylist), ctx, request)
}

// RemovePlaylist mocks base method.
func (m *MockRepository) RemovePlaylist(ctx context.Context, request *repository.RemovePlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePlaylist indicates an expected call of RemovePlaylist.
func (mr *MockRepositoryMockRecorder) RemovePlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlaylist", reflect.TypeOf((*MockRepository)(nil).RemovePlaylist), ctx, request)
}

// RemoveTrackFromPlaylist mocks base method.
func (m *MockRepository) RemoveTrackFromPlaylist(ctx context.Context, request *repository.RemoveTrackFromPlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrackFromPlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrackFromPlaylist indicates an expected call of RemoveTrackFromPlaylist.
func (mr *MockRepositoryMockRecorder) RemoveTrackFromPlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrackFromPlaylist", reflect.TypeOf((*MockRepository)(nil).RemoveTrackFromPlaylist), ctx, request)
}

// SearchPlaylists mocks base method.
func (m *MockRepository) SearchPlaylists(ctx context.Context, request *repository.SearchPlaylistsRequest) (*repository.PlaylistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaylists", ctx, request)
	ret0, _ := ret[0].(*repository.PlaylistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaylists indicates an expected call of SearchPlaylists.
func (mr *MockRepositoryMockRecorder) SearchPlaylists(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaylists", reflect.TypeOf((*MockRepository)(nil).SearchPlaylists), ctx, request)
}

// TrackExistsInPlaylist mocks base method.
func (m *MockRepository) TrackExistsInPlaylist(ctx context.Context, playlistID, trackID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackExistsInPlaylist", ctx, playlistID, trackID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackExistsInPlaylist indicates an expected call of TrackExistsInPlaylist.
func (mr *MockRepositoryMockRecorder) TrackExistsInPlaylist(ctx, playlistID, trackID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackExistsInPlaylist", reflect.TypeOf((*MockRepository)(nil).TrackExistsInPlaylist), ctx, playlistID, trackID)
}

// UnlikePlaylist mocks base method.
func (m *MockRepository) UnlikePlaylist(ctx context.Context, request *repository.LikePlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlikePlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlikePlaylist indicates an expected call of UnlikePlaylist.
func (mr *MockRepositoryMockRecorder) UnlikePlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlikePlaylist", reflect.TypeOf((*MockRepository)(nil).UnlikePlaylist), ctx, request)
}

// UpdatePlaylist mocks base method.
func (m *MockRepository) UpdatePlaylist(ctx context.Context, request *repository.UpdatePlaylistRequest) (*repository.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylist", ctx, request)
	ret0, _ := ret[0].(*repository.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaylist indicates an expected call of UpdatePlaylist.
func (mr *MockRepositoryMockRecorder) UpdatePlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylist", reflect.TypeOf((*MockRepository)(nil).UpdatePlaylist), ctx, request)
}

// UpdatePlaylistsPublisityByUserID mocks base method.
func (m *MockRepository) UpdatePlaylistsPublisityByUserID(ctx context.Context, request *repository.UpdatePlaylistsPublisityByUserIDRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylistsPublisityByUserID", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlaylistsPublisityByUserID indicates an expected call of UpdatePlaylistsPublisityByUserID.
func (mr *MockRepositoryMockRecorder) UpdatePlaylistsPublisityByUserID(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylistsPublisityByUserID", reflect.TypeOf((*MockRepository)(nil).UpdatePlaylistsPublisityByUserID), ctx, request)
}

// MockS3Repository is a mock of S3Repository interface.
type MockS3Repository struct {
	ctrl     *gomock.Controller
	recorder *MockS3RepositoryMockRecorder
	isgomock struct{}
}

// MockS3RepositoryMockRecorder is the mock recorder for MockS3Repository.
type MockS3RepositoryMockRecorder struct {
	mock *MockS3Repository
}

// NewMockS3Repository creates a new mock instance.
func NewMockS3Repository(ctrl *gomock.Controller) *MockS3Repository {
	mock := &MockS3Repository{ctrl: ctrl}
	mock.recorder = &MockS3RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Repository) EXPECT() *MockS3RepositoryMockRecorder {
	return m.recorder
}

// UploadThumbnail mocks base method.
func (m *MockS3Repository) UploadThumbnail(ctx context.Context, file io.Reader, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadThumbnail", ctx, file, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadThumbnail indicates an expected call of UploadThumbnail.
func (mr *MockS3RepositoryMockRecorder) UploadThumbnail(ctx, file, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadThumbnail", reflect.TypeOf((*MockS3Repository)(nil).UploadThumbnail), ctx, file, key)
}
