// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/playlist//usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/playlist//usecase.go -destination=internal/pkg/playlist/mocks/mock_usecase.go -package mock_playlist
//

// Package mock_playlist is a generated GoMock package.
package mock_playlist

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddTrackToPlaylist mocks base method.
func (m *MockUsecase) AddTrackToPlaylist(ctx context.Context, request *usecase.AddTrackToPlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrackToPlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrackToPlaylist indicates an expected call of AddTrackToPlaylist.
func (mr *MockUsecaseMockRecorder) AddTrackToPlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrackToPlaylist", reflect.TypeOf((*MockUsecase)(nil).AddTrackToPlaylist), ctx, request)
}

// CreatePlaylist mocks base method.
func (m *MockUsecase) CreatePlaylist(ctx context.Context, request *usecase.CreatePlaylistRequest) (*usecase.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaylist", ctx, request)
	ret0, _ := ret[0].(*usecase.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaylist indicates an expected call of CreatePlaylist.
func (mr *MockUsecaseMockRecorder) CreatePlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylist", reflect.TypeOf((*MockUsecase)(nil).CreatePlaylist), ctx, request)
}

// GetCombinedPlaylistsForCurrentUser mocks base method.
func (m *MockUsecase) GetCombinedPlaylistsForCurrentUser(ctx context.Context, userID int64) ([]*usecase.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedPlaylistsForCurrentUser", ctx, userID)
	ret0, _ := ret[0].([]*usecase.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombinedPlaylistsForCurrentUser indicates an expected call of GetCombinedPlaylistsForCurrentUser.
func (mr *MockUsecaseMockRecorder) GetCombinedPlaylistsForCurrentUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedPlaylistsForCurrentUser", reflect.TypeOf((*MockUsecase)(nil).GetCombinedPlaylistsForCurrentUser), ctx, userID)
}

// GetPlaylistByID mocks base method.
func (m *MockUsecase) GetPlaylistByID(ctx context.Context, playlistID int64) (*usecase.PlaylistWithIsLiked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistByID", ctx, playlistID)
	ret0, _ := ret[0].(*usecase.PlaylistWithIsLiked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistByID indicates an expected call of GetPlaylistByID.
func (mr *MockUsecaseMockRecorder) GetPlaylistByID(ctx, playlistID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistByID", reflect.TypeOf((*MockUsecase)(nil).GetPlaylistByID), ctx, playlistID)
}

// GetPlaylistsToAdd mocks base method.
func (m *MockUsecase) GetPlaylistsToAdd(ctx context.Context, request *usecase.GetPlaylistsToAddRequest) ([]*usecase.PlaylistWithIsIncludedTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistsToAdd", ctx, request)
	ret0, _ := ret[0].([]*usecase.PlaylistWithIsIncludedTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistsToAdd indicates an expected call of GetPlaylistsToAdd.
func (mr *MockUsecaseMockRecorder) GetPlaylistsToAdd(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistsToAdd", reflect.TypeOf((*MockUsecase)(nil).GetPlaylistsToAdd), ctx, request)
}

// GetProfilePlaylists mocks base method.
func (m *MockUsecase) GetProfilePlaylists(ctx context.Context, username string) ([]*usecase.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilePlaylists", ctx, username)
	ret0, _ := ret[0].([]*usecase.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePlaylists indicates an expected call of GetProfilePlaylists.
func (mr *MockUsecaseMockRecorder) GetProfilePlaylists(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePlaylists", reflect.TypeOf((*MockUsecase)(nil).GetProfilePlaylists), ctx, username)
}

// LikePlaylist mocks base method.
func (m *MockUsecase) LikePlaylist(ctx context.Context, request *usecase.LikePlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePlaylist indicates an expected call of LikePlaylist.
func (mr *MockUsecaseMockRecorder) LikePlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePlaylist", reflect.TypeOf((*MockUsecase)(nil).LikePlaylist), ctx, request)
}

// RemovePlaylist mocks base method.
func (m *MockUsecase) RemovePlaylist(ctx context.Context, request *usecase.RemovePlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePlaylist indicates an expected call of RemovePlaylist.
func (mr *MockUsecaseMockRecorder) RemovePlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlaylist", reflect.TypeOf((*MockUsecase)(nil).RemovePlaylist), ctx, request)
}

// RemoveTrackFromPlaylist mocks base method.
func (m *MockUsecase) RemoveTrackFromPlaylist(ctx context.Context, request *usecase.RemoveTrackFromPlaylistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrackFromPlaylist", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrackFromPlaylist indicates an expected call of RemoveTrackFromPlaylist.
func (mr *MockUsecaseMockRecorder) RemoveTrackFromPlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrackFromPlaylist", reflect.TypeOf((*MockUsecase)(nil).RemoveTrackFromPlaylist), ctx, request)
}

// SearchPlaylists mocks base method.
func (m *MockUsecase) SearchPlaylists(ctx context.Context, query string) ([]*usecase.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaylists", ctx, query)
	ret0, _ := ret[0].([]*usecase.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaylists indicates an expected call of SearchPlaylists.
func (mr *MockUsecaseMockRecorder) SearchPlaylists(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaylists", reflect.TypeOf((*MockUsecase)(nil).SearchPlaylists), ctx, query)
}

// UpdatePlaylist mocks base method.
func (m *MockUsecase) UpdatePlaylist(ctx context.Context, request *usecase.UpdatePlaylistRequest) (*usecase.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylist", ctx, request)
	ret0, _ := ret[0].(*usecase.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaylist indicates an expected call of UpdatePlaylist.
func (mr *MockUsecaseMockRecorder) UpdatePlaylist(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylist", reflect.TypeOf((*MockUsecase)(nil).UpdatePlaylist), ctx, request)
}
