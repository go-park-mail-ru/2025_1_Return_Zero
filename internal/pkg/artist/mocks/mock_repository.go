// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock_repository.go
//

// Package mock_artist is a generated GoMock package.
package mock_artist

import (
	context "context"
	reflect "reflect"

	repository "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllArtists mocks base method.
func (m *MockRepository) GetAllArtists(ctx context.Context, filters *repository.ArtistFilters) ([]*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArtists", ctx, filters)
	ret0, _ := ret[0].([]*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArtists indicates an expected call of GetAllArtists.
func (mr *MockRepositoryMockRecorder) GetAllArtists(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArtists", reflect.TypeOf((*MockRepository)(nil).GetAllArtists), ctx, filters)
}

// GetArtistByID mocks base method.
func (m *MockRepository) GetArtistByID(ctx context.Context, id int64) (*repository.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", ctx, id)
	ret0, _ := ret[0].(*repository.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockRepositoryMockRecorder) GetArtistByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockRepository)(nil).GetArtistByID), ctx, id)
}

// GetArtistStats mocks base method.
func (m *MockRepository) GetArtistStats(ctx context.Context, id int64) (*repository.ArtistStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistStats", ctx, id)
	ret0, _ := ret[0].(*repository.ArtistStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistStats indicates an expected call of GetArtistStats.
func (mr *MockRepositoryMockRecorder) GetArtistStats(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistStats", reflect.TypeOf((*MockRepository)(nil).GetArtistStats), ctx, id)
}

// GetArtistTitleByID mocks base method.
func (m *MockRepository) GetArtistTitleByID(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistTitleByID", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistTitleByID indicates an expected call of GetArtistTitleByID.
func (mr *MockRepositoryMockRecorder) GetArtistTitleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistTitleByID", reflect.TypeOf((*MockRepository)(nil).GetArtistTitleByID), ctx, id)
}

// GetArtistsByAlbumID mocks base method.
func (m *MockRepository) GetArtistsByAlbumID(ctx context.Context, albumID int64) ([]*repository.ArtistWithTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByAlbumID", ctx, albumID)
	ret0, _ := ret[0].([]*repository.ArtistWithTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumID indicates an expected call of GetArtistsByAlbumID.
func (mr *MockRepositoryMockRecorder) GetArtistsByAlbumID(ctx, albumID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumID", reflect.TypeOf((*MockRepository)(nil).GetArtistsByAlbumID), ctx, albumID)
}

// GetArtistsByAlbumIDs mocks base method.
func (m *MockRepository) GetArtistsByAlbumIDs(ctx context.Context, albumIDs []int64) (map[int64][]*repository.ArtistWithTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByAlbumIDs", ctx, albumIDs)
	ret0, _ := ret[0].(map[int64][]*repository.ArtistWithTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumIDs indicates an expected call of GetArtistsByAlbumIDs.
func (mr *MockRepositoryMockRecorder) GetArtistsByAlbumIDs(ctx, albumIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumIDs", reflect.TypeOf((*MockRepository)(nil).GetArtistsByAlbumIDs), ctx, albumIDs)
}

// GetArtistsByTrackID mocks base method.
func (m *MockRepository) GetArtistsByTrackID(ctx context.Context, id int64) ([]*repository.ArtistWithRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByTrackID", ctx, id)
	ret0, _ := ret[0].([]*repository.ArtistWithRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackID indicates an expected call of GetArtistsByTrackID.
func (mr *MockRepositoryMockRecorder) GetArtistsByTrackID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackID", reflect.TypeOf((*MockRepository)(nil).GetArtistsByTrackID), ctx, id)
}

// GetArtistsByTrackIDs mocks base method.
func (m *MockRepository) GetArtistsByTrackIDs(ctx context.Context, trackIDs []int64) (map[int64][]*repository.ArtistWithRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByTrackIDs", ctx, trackIDs)
	ret0, _ := ret[0].(map[int64][]*repository.ArtistWithRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackIDs indicates an expected call of GetArtistsByTrackIDs.
func (mr *MockRepositoryMockRecorder) GetArtistsByTrackIDs(ctx, trackIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackIDs", reflect.TypeOf((*MockRepository)(nil).GetArtistsByTrackIDs), ctx, trackIDs)
}
