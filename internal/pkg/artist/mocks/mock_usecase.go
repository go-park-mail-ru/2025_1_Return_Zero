// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock_usecase.go
//

// Package mock_artist is a generated GoMock package.
package mock_artist

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetAllArtists mocks base method.
func (m *MockUsecase) GetAllArtists(ctx context.Context, filters *usecase.ArtistFilters) ([]*usecase.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArtists", ctx, filters)
	ret0, _ := ret[0].([]*usecase.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArtists indicates an expected call of GetAllArtists.
func (mr *MockUsecaseMockRecorder) GetAllArtists(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArtists", reflect.TypeOf((*MockUsecase)(nil).GetAllArtists), ctx, filters)
}

// GetArtistByID mocks base method.
func (m *MockUsecase) GetArtistByID(ctx context.Context, id int64) (*usecase.ArtistDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", ctx, id)
	ret0, _ := ret[0].(*usecase.ArtistDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockUsecaseMockRecorder) GetArtistByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockUsecase)(nil).GetArtistByID), ctx, id)
}
