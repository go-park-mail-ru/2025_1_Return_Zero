// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock_repository.go
//

// Package mock_track is a generated GoMock package.
package mock_track

import (
	context "context"
	reflect "reflect"

	repository "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockRepository) CreateStream(ctx context.Context, stream *repository.TrackStreamCreateData) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, stream)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockRepositoryMockRecorder) CreateStream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockRepository)(nil).CreateStream), ctx, stream)
}

// GetAllTracks mocks base method.
func (m *MockRepository) GetAllTracks(ctx context.Context, filters *repository.TrackFilters) ([]*repository.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTracks", ctx, filters)
	ret0, _ := ret[0].([]*repository.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTracks indicates an expected call of GetAllTracks.
func (mr *MockRepositoryMockRecorder) GetAllTracks(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTracks", reflect.TypeOf((*MockRepository)(nil).GetAllTracks), ctx, filters)
}

// GetStreamByID mocks base method.
func (m *MockRepository) GetStreamByID(ctx context.Context, streamID int64) (*repository.TrackStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamByID", ctx, streamID)
	ret0, _ := ret[0].(*repository.TrackStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamByID indicates an expected call of GetStreamByID.
func (mr *MockRepositoryMockRecorder) GetStreamByID(ctx, streamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamByID", reflect.TypeOf((*MockRepository)(nil).GetStreamByID), ctx, streamID)
}

// GetStreamsByUserID mocks base method.
func (m *MockRepository) GetStreamsByUserID(ctx context.Context, userID int64, filters *repository.TrackFilters) ([]*repository.TrackStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamsByUserID", ctx, userID, filters)
	ret0, _ := ret[0].([]*repository.TrackStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamsByUserID indicates an expected call of GetStreamsByUserID.
func (mr *MockRepositoryMockRecorder) GetStreamsByUserID(ctx, userID, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamsByUserID", reflect.TypeOf((*MockRepository)(nil).GetStreamsByUserID), ctx, userID, filters)
}

// GetTrackByID mocks base method.
func (m *MockRepository) GetTrackByID(ctx context.Context, id int64) (*repository.TrackWithFileKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackByID", ctx, id)
	ret0, _ := ret[0].(*repository.TrackWithFileKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackByID indicates an expected call of GetTrackByID.
func (mr *MockRepositoryMockRecorder) GetTrackByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackByID", reflect.TypeOf((*MockRepository)(nil).GetTrackByID), ctx, id)
}

// GetTracksByArtistID mocks base method.
func (m *MockRepository) GetTracksByArtistID(ctx context.Context, id int64) ([]*repository.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByArtistID", ctx, id)
	ret0, _ := ret[0].([]*repository.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByArtistID indicates an expected call of GetTracksByArtistID.
func (mr *MockRepositoryMockRecorder) GetTracksByArtistID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByArtistID", reflect.TypeOf((*MockRepository)(nil).GetTracksByArtistID), ctx, id)
}

// GetTracksByIDs mocks base method.
func (m *MockRepository) GetTracksByIDs(ctx context.Context, ids []int64) (map[int64]*repository.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByIDs", ctx, ids)
	ret0, _ := ret[0].(map[int64]*repository.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByIDs indicates an expected call of GetTracksByIDs.
func (mr *MockRepositoryMockRecorder) GetTracksByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByIDs", reflect.TypeOf((*MockRepository)(nil).GetTracksByIDs), ctx, ids)
}

// UpdateStreamDuration mocks base method.
func (m *MockRepository) UpdateStreamDuration(ctx context.Context, endedStream *repository.TrackStreamUpdateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamDuration", ctx, endedStream)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStreamDuration indicates an expected call of UpdateStreamDuration.
func (mr *MockRepositoryMockRecorder) UpdateStreamDuration(ctx, endedStream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamDuration", reflect.TypeOf((*MockRepository)(nil).UpdateStreamDuration), ctx, endedStream)
}
