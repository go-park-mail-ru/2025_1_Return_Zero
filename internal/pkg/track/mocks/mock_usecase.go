// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock_usecase.go
//

// Package mock_track is a generated GoMock package.
package mock_track

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockUsecase) CreateStream(ctx context.Context, stream *usecase.TrackStreamCreateData) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, stream)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockUsecaseMockRecorder) CreateStream(ctx, stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockUsecase)(nil).CreateStream), ctx, stream)
}

// GetAllTracks mocks base method.
func (m *MockUsecase) GetAllTracks(ctx context.Context, filters *usecase.TrackFilters) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTracks", ctx, filters)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTracks indicates an expected call of GetAllTracks.
func (mr *MockUsecaseMockRecorder) GetAllTracks(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTracks", reflect.TypeOf((*MockUsecase)(nil).GetAllTracks), ctx, filters)
}

// GetLastListenedTracks mocks base method.
func (m *MockUsecase) GetLastListenedTracks(ctx context.Context, username string, filters *usecase.TrackFilters) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastListenedTracks", ctx, username, filters)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastListenedTracks indicates an expected call of GetLastListenedTracks.
func (mr *MockUsecaseMockRecorder) GetLastListenedTracks(ctx, username, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastListenedTracks", reflect.TypeOf((*MockUsecase)(nil).GetLastListenedTracks), ctx, username, filters)
}

// GetTrackByID mocks base method.
func (m *MockUsecase) GetTrackByID(ctx context.Context, id int64) (*usecase.TrackDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackByID", ctx, id)
	ret0, _ := ret[0].(*usecase.TrackDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackByID indicates an expected call of GetTrackByID.
func (mr *MockUsecaseMockRecorder) GetTrackByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackByID", reflect.TypeOf((*MockUsecase)(nil).GetTrackByID), ctx, id)
}

// GetTracksByArtistID mocks base method.
func (m *MockUsecase) GetTracksByArtistID(ctx context.Context, id int64) ([]*usecase.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByArtistID", ctx, id)
	ret0, _ := ret[0].([]*usecase.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByArtistID indicates an expected call of GetTracksByArtistID.
func (mr *MockUsecaseMockRecorder) GetTracksByArtistID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByArtistID", reflect.TypeOf((*MockUsecase)(nil).GetTracksByArtistID), ctx, id)
}

// UpdateStreamDuration mocks base method.
func (m *MockUsecase) UpdateStreamDuration(ctx context.Context, endedStream *usecase.TrackStreamUpdateData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamDuration", ctx, endedStream)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStreamDuration indicates an expected call of UpdateStreamDuration.
func (mr *MockUsecaseMockRecorder) UpdateStreamDuration(ctx, endedStream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamDuration", reflect.TypeOf((*MockUsecase)(nil).UpdateStreamDuration), ctx, endedStream)
}
