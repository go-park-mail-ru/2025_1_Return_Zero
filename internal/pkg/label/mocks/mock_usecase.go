// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/label/domain/usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/label/domain/usecase.go -destination=internal/pkg/label/mocks/mock_usecase.go -package=mock_label
//

// Package mock_label is a generated GoMock package.
package mock_label

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateAlbum mocks base method.
func (m *MockUsecase) CreateAlbum(ctx context.Context, album *usecase.CreateAlbumRequest) (int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlbum", ctx, album)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAlbum indicates an expected call of CreateAlbum.
func (mr *MockUsecaseMockRecorder) CreateAlbum(ctx, album any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlbum", reflect.TypeOf((*MockUsecase)(nil).CreateAlbum), ctx, album)
}

// CreateArtist mocks base method.
func (m *MockUsecase) CreateArtist(ctx context.Context, artist *usecase.ArtistLoad) (*usecase.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtist", ctx, artist)
	ret0, _ := ret[0].(*usecase.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArtist indicates an expected call of CreateArtist.
func (mr *MockUsecaseMockRecorder) CreateArtist(ctx, artist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockUsecase)(nil).CreateArtist), ctx, artist)
}

// CreateLabel mocks base method.
func (m *MockUsecase) CreateLabel(ctx context.Context, label *usecase.Label) (*usecase.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", ctx, label)
	ret0, _ := ret[0].(*usecase.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockUsecaseMockRecorder) CreateLabel(ctx, label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockUsecase)(nil).CreateLabel), ctx, label)
}

// DeleteAlbum mocks base method.
func (m *MockUsecase) DeleteAlbum(ctx context.Context, albumID, labelID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlbum", ctx, albumID, labelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlbum indicates an expected call of DeleteAlbum.
func (mr *MockUsecaseMockRecorder) DeleteAlbum(ctx, albumID, labelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbum", reflect.TypeOf((*MockUsecase)(nil).DeleteAlbum), ctx, albumID, labelID)
}

// DeleteArtist mocks base method.
func (m *MockUsecase) DeleteArtist(ctx context.Context, artist *usecase.ArtistDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtist", ctx, artist)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtist indicates an expected call of DeleteArtist.
func (mr *MockUsecaseMockRecorder) DeleteArtist(ctx, artist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtist", reflect.TypeOf((*MockUsecase)(nil).DeleteArtist), ctx, artist)
}

// EditArtist mocks base method.
func (m *MockUsecase) EditArtist(ctx context.Context, artist *usecase.ArtistEdit) (*usecase.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditArtist", ctx, artist)
	ret0, _ := ret[0].(*usecase.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditArtist indicates an expected call of EditArtist.
func (mr *MockUsecaseMockRecorder) EditArtist(ctx, artist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditArtist", reflect.TypeOf((*MockUsecase)(nil).EditArtist), ctx, artist)
}

// GetAlbumsByLabelID mocks base method.
func (m *MockUsecase) GetAlbumsByLabelID(ctx context.Context, labelID int64, filters *usecase.AlbumFilters) ([]*usecase.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByLabelID", ctx, labelID, filters)
	ret0, _ := ret[0].([]*usecase.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByLabelID indicates an expected call of GetAlbumsByLabelID.
func (mr *MockUsecaseMockRecorder) GetAlbumsByLabelID(ctx, labelID, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByLabelID", reflect.TypeOf((*MockUsecase)(nil).GetAlbumsByLabelID), ctx, labelID, filters)
}

// GetArtists mocks base method.
func (m *MockUsecase) GetArtists(ctx context.Context, labelID int64, filters *usecase.ArtistFilters) ([]*usecase.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtists", ctx, labelID, filters)
	ret0, _ := ret[0].([]*usecase.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtists indicates an expected call of GetArtists.
func (mr *MockUsecaseMockRecorder) GetArtists(ctx, labelID, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtists", reflect.TypeOf((*MockUsecase)(nil).GetArtists), ctx, labelID, filters)
}

// GetLabel mocks base method.
func (m *MockUsecase) GetLabel(ctx context.Context, id int64) (*usecase.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", ctx, id)
	ret0, _ := ret[0].(*usecase.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockUsecaseMockRecorder) GetLabel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockUsecase)(nil).GetLabel), ctx, id)
}

// UpdateLabel mocks base method.
func (m *MockUsecase) UpdateLabel(ctx context.Context, labelID int64, toAdd, toRemove []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabel", ctx, labelID, toAdd, toRemove)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabel indicates an expected call of UpdateLabel.
func (mr *MockUsecaseMockRecorder) UpdateLabel(ctx, labelID, toAdd, toRemove any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabel", reflect.TypeOf((*MockUsecase)(nil).UpdateLabel), ctx, labelID, toAdd, toRemove)
}
