// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock_repository.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	repository "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ChangeUserData mocks base method.
func (m *MockRepository) ChangeUserData(ctx context.Context, username string, changeData *repository.ChangeUserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserData", ctx, username, changeData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserData indicates an expected call of ChangeUserData.
func (mr *MockRepositoryMockRecorder) ChangeUserData(ctx, username, changeData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserData", reflect.TypeOf((*MockRepository)(nil).ChangeUserData), ctx, username, changeData)
}

// ChangeUserPrivacySettings mocks base method.
func (m *MockRepository) ChangeUserPrivacySettings(ctx context.Context, username string, privacySettings *repository.UserPrivacySettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPrivacySettings", ctx, username, privacySettings)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserPrivacySettings indicates an expected call of ChangeUserPrivacySettings.
func (mr *MockRepositoryMockRecorder) ChangeUserPrivacySettings(ctx, username, privacySettings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPrivacySettings", reflect.TypeOf((*MockRepository)(nil).ChangeUserPrivacySettings), ctx, username, privacySettings)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, regData *repository.User) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, regData)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, regData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, regData)
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser(ctx context.Context, user *repository.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), ctx, user)
}

// GetAvatar mocks base method.
func (m *MockRepository) GetAvatar(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockRepositoryMockRecorder) GetAvatar(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockRepository)(nil).GetAvatar), ctx, username)
}

// GetFullUserData mocks base method.
func (m *MockRepository) GetFullUserData(ctx context.Context, username string) (*repository.UserFullData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullUserData", ctx, username)
	ret0, _ := ret[0].(*repository.UserFullData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullUserData indicates an expected call of GetFullUserData.
func (mr *MockRepositoryMockRecorder) GetFullUserData(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullUserData", reflect.TypeOf((*MockRepository)(nil).GetFullUserData), ctx, username)
}

// GetIDByUsername mocks base method.
func (m *MockRepository) GetIDByUsername(ctx context.Context, username string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByUsername", ctx, username)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUsername indicates an expected call of GetIDByUsername.
func (mr *MockRepositoryMockRecorder) GetIDByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUsername", reflect.TypeOf((*MockRepository)(nil).GetIDByUsername), ctx, username)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(ctx context.Context, ID int64) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, ID)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), ctx, ID)
}

// GetUserData mocks base method.
func (m *MockRepository) GetUserData(ctx context.Context, id int64) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", ctx, id)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockRepositoryMockRecorder) GetUserData(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockRepository)(nil).GetUserData), ctx, id)
}

// GetUserPrivacy mocks base method.
func (m *MockRepository) GetUserPrivacy(ctx context.Context, id int64) (*repository.UserPrivacySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivacy", ctx, id)
	ret0, _ := ret[0].(*repository.UserPrivacySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivacy indicates an expected call of GetUserPrivacy.
func (mr *MockRepositoryMockRecorder) GetUserPrivacy(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivacy", reflect.TypeOf((*MockRepository)(nil).GetUserPrivacy), ctx, id)
}

// GetUserStats mocks base method.
func (m *MockRepository) GetUserStats(ctx context.Context, id int64) (*repository.UserStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStats", ctx, id)
	ret0, _ := ret[0].(*repository.UserStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStats indicates an expected call of GetUserStats.
func (mr *MockRepositoryMockRecorder) GetUserStats(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStats", reflect.TypeOf((*MockRepository)(nil).GetUserStats), ctx, id)
}

// LoginUser mocks base method.
func (m *MockRepository) LoginUser(ctx context.Context, logData *repository.User) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, logData)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockRepositoryMockRecorder) LoginUser(ctx, logData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockRepository)(nil).LoginUser), ctx, logData)
}

// UploadAvatar mocks base method.
func (m *MockRepository) UploadAvatar(ctx context.Context, avatarUrl, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", ctx, avatarUrl, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockRepositoryMockRecorder) UploadAvatar(ctx, avatarUrl, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockRepository)(nil).UploadAvatar), ctx, avatarUrl, username)
}
