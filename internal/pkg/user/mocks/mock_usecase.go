// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock_usecase.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	io "io"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// ChangeUserData mocks base method.
func (m *MockUsecase) ChangeUserData(ctx context.Context, username string, userChangeData *usecase.UserChangeSettings) (*usecase.UserFullData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserData", ctx, username, userChangeData)
	ret0, _ := ret[0].(*usecase.UserFullData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserData indicates an expected call of ChangeUserData.
func (mr *MockUsecaseMockRecorder) ChangeUserData(ctx, username, userChangeData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserData", reflect.TypeOf((*MockUsecase)(nil).ChangeUserData), ctx, username, userChangeData)
}

// CreateUser mocks base method.
func (m *MockUsecase) CreateUser(ctx context.Context, user *usecase.User) (*usecase.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*usecase.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsecaseMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsecase)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUsecase) DeleteUser(ctx context.Context, user *usecase.User, SID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, user, SID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUsecaseMockRecorder) DeleteUser(ctx, user, SID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUsecase)(nil).DeleteUser), ctx, user, SID)
}

// GetUserBySID mocks base method.
func (m *MockUsecase) GetUserBySID(ctx context.Context, SID string) (*usecase.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySID", ctx, SID)
	ret0, _ := ret[0].(*usecase.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySID indicates an expected call of GetUserBySID.
func (mr *MockUsecaseMockRecorder) GetUserBySID(ctx, SID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySID", reflect.TypeOf((*MockUsecase)(nil).GetUserBySID), ctx, SID)
}

// GetUserData mocks base method.
func (m *MockUsecase) GetUserData(ctx context.Context, username string) (*usecase.UserFullData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", ctx, username)
	ret0, _ := ret[0].(*usecase.UserFullData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockUsecaseMockRecorder) GetUserData(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockUsecase)(nil).GetUserData), ctx, username)
}

// LoginUser mocks base method.
func (m *MockUsecase) LoginUser(ctx context.Context, user *usecase.User) (*usecase.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, user)
	ret0, _ := ret[0].(*usecase.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUsecaseMockRecorder) LoginUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUsecase)(nil).LoginUser), ctx, user)
}

// Logout mocks base method.
func (m *MockUsecase) Logout(ctx context.Context, SID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, SID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockUsecaseMockRecorder) Logout(ctx, SID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUsecase)(nil).Logout), ctx, SID)
}

// UploadAvatar mocks base method.
func (m *MockUsecase) UploadAvatar(ctx context.Context, username string, fileAvatar io.Reader, ID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", ctx, username, fileAvatar, ID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockUsecaseMockRecorder) UploadAvatar(ctx, username, fileAvatar, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUsecase)(nil).UploadAvatar), ctx, username, fileAvatar, ID)
}
