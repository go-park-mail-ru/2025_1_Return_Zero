// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock_repository.go
//

// Package mock_album is a generated GoMock package.
package mock_album

import (
	context "context"
	reflect "reflect"

	repository "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAlbumByID mocks base method.
func (m *MockRepository) GetAlbumByID(ctx context.Context, id int64) (*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByID", ctx, id)
	ret0, _ := ret[0].(*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByID indicates an expected call of GetAlbumByID.
func (mr *MockRepositoryMockRecorder) GetAlbumByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByID", reflect.TypeOf((*MockRepository)(nil).GetAlbumByID), ctx, id)
}

// GetAlbumTitleByID mocks base method.
func (m *MockRepository) GetAlbumTitleByID(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumTitleByID", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByID indicates an expected call of GetAlbumTitleByID.
func (mr *MockRepositoryMockRecorder) GetAlbumTitleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByID", reflect.TypeOf((*MockRepository)(nil).GetAlbumTitleByID), ctx, id)
}

// GetAlbumTitleByIDs mocks base method.
func (m *MockRepository) GetAlbumTitleByIDs(ctx context.Context, ids []int64) (map[int64]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumTitleByIDs", ctx, ids)
	ret0, _ := ret[0].(map[int64]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByIDs indicates an expected call of GetAlbumTitleByIDs.
func (mr *MockRepositoryMockRecorder) GetAlbumTitleByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByIDs", reflect.TypeOf((*MockRepository)(nil).GetAlbumTitleByIDs), ctx, ids)
}

// GetAlbumsByArtistID mocks base method.
func (m *MockRepository) GetAlbumsByArtistID(ctx context.Context, artistID int64, filters *repository.AlbumFilters) ([]*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByArtistID", ctx, artistID, filters)
	ret0, _ := ret[0].([]*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByArtistID indicates an expected call of GetAlbumsByArtistID.
func (mr *MockRepositoryMockRecorder) GetAlbumsByArtistID(ctx, artistID, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByArtistID", reflect.TypeOf((*MockRepository)(nil).GetAlbumsByArtistID), ctx, artistID, filters)
}

// GetAllAlbums mocks base method.
func (m *MockRepository) GetAllAlbums(ctx context.Context, filters *repository.AlbumFilters) ([]*repository.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbums", ctx, filters)
	ret0, _ := ret[0].([]*repository.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbums indicates an expected call of GetAllAlbums.
func (mr *MockRepositoryMockRecorder) GetAllAlbums(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbums", reflect.TypeOf((*MockRepository)(nil).GetAllAlbums), ctx, filters)
}
