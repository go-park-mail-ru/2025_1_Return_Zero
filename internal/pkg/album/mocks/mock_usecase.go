// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase.go -destination=mocks/mock_usecase.go
//

// Package mock_album is a generated GoMock package.
package mock_album

import (
	context "context"
	reflect "reflect"

	usecase "github.com/go-park-mail-ru/2025_1_Return_Zero/internal/pkg/model/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetAlbumsByArtistID mocks base method.
func (m *MockUsecase) GetAlbumsByArtistID(ctx context.Context, artistID int64, filters *usecase.AlbumFilters) ([]*usecase.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByArtistID", ctx, artistID, filters)
	ret0, _ := ret[0].([]*usecase.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByArtistID indicates an expected call of GetAlbumsByArtistID.
func (mr *MockUsecaseMockRecorder) GetAlbumsByArtistID(ctx, artistID, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByArtistID", reflect.TypeOf((*MockUsecase)(nil).GetAlbumsByArtistID), ctx, artistID, filters)
}

// GetAllAlbums mocks base method.
func (m *MockUsecase) GetAllAlbums(ctx context.Context, filters *usecase.AlbumFilters) ([]*usecase.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbums", ctx, filters)
	ret0, _ := ret[0].([]*usecase.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbums indicates an expected call of GetAllAlbums.
func (mr *MockUsecaseMockRecorder) GetAllAlbums(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbums", reflect.TypeOf((*MockUsecase)(nil).GetAllAlbums), ctx, filters)
}
