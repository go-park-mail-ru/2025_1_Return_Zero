// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/userAvatarFile/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/userAvatarFile/repository.go -destination=internal/pkg/userAvatarFile/mocks/mock_repository.go
//

// Package mock_userAvatarFile is a generated GoMock package.
package mock_userAvatarFile

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAvatarURL mocks base method.
func (m *MockRepository) GetAvatarURL(ctx context.Context, fileKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarURL", ctx, fileKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatarURL indicates an expected call of GetAvatarURL.
func (mr *MockRepositoryMockRecorder) GetAvatarURL(ctx, fileKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarURL", reflect.TypeOf((*MockRepository)(nil).GetAvatarURL), ctx, fileKey)
}

// UploadUserAvatar mocks base method.
func (m *MockRepository) UploadUserAvatar(ctx context.Context, username string, fileContent io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserAvatar", ctx, username, fileContent)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockRepositoryMockRecorder) UploadUserAvatar(ctx, username, fileContent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockRepository)(nil).UploadUserAvatar), ctx, username, fileContent)
}
