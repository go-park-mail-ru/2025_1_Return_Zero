# docker-compose up
# docker rm $(docker ps -a -q) && docker volume prune -f


services:
  postgres:
    build:
      context: ./images/postgres
      dockerfile: Dockerfile
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
      - './_postgres:/docker-entrypoint-initdb.d'
      - '../db/setup:/db/setup'
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    tty: true

  redis:
    image: 'redis'
    container_name: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - '6379:6379'
    tty: true

  go-api:
    build:
      context: ..
      dockerfile: deploy/images/api/Dockerfile
    container_name: ReturnZeroAPI
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      S3_IMAGES_BUCKET: ${S3_IMAGES_BUCKET}
      S3_TRACKS_BUCKET: ${S3_TRACKS_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      ARTIST_SERVICE_HOST: artist-grpc
      ALBUM_SERVICE_HOST: album-grpc
      TRACK_SERVICE_HOST: track-grpc
      PLAYLIST_SERVICE_HOST: playlist-grpc
      AUTH_SERVICE_HOST: auth-grpc
      USER_SERVICE_HOST: user-grpc
    restart: always
    ports:
      - '8080:8080'
    tty: true
    depends_on:
      - postgres
      - redis
      - artist-grpc
      - album-grpc
      - track-grpc
      - playlist-grpc
      - auth-grpc
      - user-grpc

  artist-grpc:
    build:
      context: ..
      dockerfile: deploy/images/artist/Dockerfile
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      S3_IMAGES_BUCKET: ${S3_IMAGES_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
    container_name: artist-grpc
    restart: always
    depends_on:
      - postgres
    ports:
      - '5001:5001'
    tty: true

  track-grpc:
    build:
      context: ..
      dockerfile: deploy/images/track/Dockerfile
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      S3_TRACKS_BUCKET: ${S3_TRACKS_BUCKET}
      S3_IMAGES_BUCKET: ${S3_IMAGES_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
    container_name: track-grpc
    restart: always
    depends_on:
      - postgres
    ports:
      - '5002:5002'
    tty: true

  album-grpc:
    build:
      context: ..
      dockerfile: deploy/images/album/Dockerfile
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      S3_IMAGES_BUCKET: ${S3_IMAGES_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
    container_name: album-grpc
    restart: always
    depends_on:
      - postgres
    ports:
      - '5003:5003'
    tty: true
    
  auth-grpc:
    build:
      context: ..
      dockerfile: deploy/images/auth/Dockerfile
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: redis
    container_name: auth-grpc
    restart: always
    depends_on:
      - redis
    ports:
      - '5004:5004'
    tty: true

  user-grpc:
    build:
      context: ..
      dockerfile: deploy/images/user/Dockerfile
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      S3_IMAGES_BUCKET: ${S3_IMAGES_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
    container_name: user-grpc
    restart: always
    depends_on:
      - postgres
    ports:
      - '5005:5005'
    tty: true

  playlist-grpc:
    build:
      context: ..
      dockerfile: deploy/images/playlist/Dockerfile
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      S3_IMAGES_BUCKET: ${S3_IMAGES_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
    container_name: playlist-grpc
    restart: always
    depends_on:
      - postgres
    ports:
      - '5006:5006'
    tty: true

  nginx:
    build:
      context: ./images/nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: always
    ports:
      - '8081:80'
    volumes:
      - '../../dist:/usr/share/nginx/static'
    depends_on:
      - go-api
    tty: true

  prometheus:
    build:
      context: ./images/prometheus
      dockerfile: Dockerfile
    container_name: prometheus
    restart: always
    ports:
      - '9090:9090'

  grafana:
    build:
      context: ./images/grafana
      dockerfile: Dockerfile
    container_name: grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - '3000:3000'
    depends_on:
      - prometheus

  node-exporter:
    restart: always
    image: mirror.gcr.io/prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
#      - --collector.filesystem.ignored-mount-points
    ports:
      - "9100:9100"
    tty: true

volumes:
  pgdata:
    driver: local