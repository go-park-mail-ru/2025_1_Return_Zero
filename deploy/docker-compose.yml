# docker-compose up
# docker rm $(docker ps -a -q) && docker volume prune -f

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  postgres:
    build:
      context: .
      dockerfile: ./images/postgres/Dockerfile
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
    tty: true
    networks:
      - app-network

  redis:
    image: 'redis'
    container_name: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - '6379:6379'
    tty: true
    networks:
      app-network:
        ipv4_address: 172.20.0.10

  go-api:
    build:
      context: ..
      dockerfile: deploy/images/api/Dockerfile
    container_name: ReturnZeroAPI
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      S3_IMAGES_BUCKET: ${S3_IMAGES_BUCKET}
      S3_TRACKS_BUCKET: ${S3_TRACKS_BUCKET}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
    restart: always
    ports:
      - '8080:8080'
    tty: true
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  nginx:
    build:
      context: ./images/nginx
      dockerfile: Dockerfile
    container_name: nginx
    restart: always
    ports:
      - '8081:80'
    volumes:
      - '../../dist:/usr/share/nginx/static'
    depends_on:
      - go-api
    tty: true
    networks:
      - app-network

volumes:
  pgdata:
    driver: local