// Code generated by MockGen. DO NOT EDIT.
// Source: gen/album/album_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=gen/album/album_grpc.pb.go -destination=mocks/mock_album_client.go -package=mocks AlbumServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	album "github.com/go-park-mail-ru/2025_1_Return_Zero/gen/album"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAlbumServiceClient is a mock of AlbumServiceClient interface.
type MockAlbumServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumServiceClientMockRecorder
	isgomock struct{}
}

// MockAlbumServiceClientMockRecorder is the mock recorder for MockAlbumServiceClient.
type MockAlbumServiceClientMockRecorder struct {
	mock *MockAlbumServiceClient
}

// NewMockAlbumServiceClient creates a new mock instance.
func NewMockAlbumServiceClient(ctrl *gomock.Controller) *MockAlbumServiceClient {
	mock := &MockAlbumServiceClient{ctrl: ctrl}
	mock.recorder = &MockAlbumServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumServiceClient) EXPECT() *MockAlbumServiceClientMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockAlbumServiceClient) CreateStream(ctx context.Context, in *album.AlbumStreamCreateData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStream", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockAlbumServiceClientMockRecorder) CreateStream(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockAlbumServiceClient)(nil).CreateStream), varargs...)
}

// GetAlbumByID mocks base method.
func (m *MockAlbumServiceClient) GetAlbumByID(ctx context.Context, in *album.AlbumIDWithUserID, opts ...grpc.CallOption) (*album.Album, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbumByID", varargs...)
	ret0, _ := ret[0].(*album.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByID indicates an expected call of GetAlbumByID.
func (mr *MockAlbumServiceClientMockRecorder) GetAlbumByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByID", reflect.TypeOf((*MockAlbumServiceClient)(nil).GetAlbumByID), varargs...)
}

// GetAlbumTitleByID mocks base method.
func (m *MockAlbumServiceClient) GetAlbumTitleByID(ctx context.Context, in *album.AlbumID, opts ...grpc.CallOption) (*album.AlbumTitle, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbumTitleByID", varargs...)
	ret0, _ := ret[0].(*album.AlbumTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByID indicates an expected call of GetAlbumTitleByID.
func (mr *MockAlbumServiceClientMockRecorder) GetAlbumTitleByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByID", reflect.TypeOf((*MockAlbumServiceClient)(nil).GetAlbumTitleByID), varargs...)
}

// GetAlbumTitleByIDs mocks base method.
func (m *MockAlbumServiceClient) GetAlbumTitleByIDs(ctx context.Context, in *album.AlbumIDList, opts ...grpc.CallOption) (*album.AlbumTitleMap, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbumTitleByIDs", varargs...)
	ret0, _ := ret[0].(*album.AlbumTitleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByIDs indicates an expected call of GetAlbumTitleByIDs.
func (mr *MockAlbumServiceClientMockRecorder) GetAlbumTitleByIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByIDs", reflect.TypeOf((*MockAlbumServiceClient)(nil).GetAlbumTitleByIDs), varargs...)
}

// GetAlbumsByIDs mocks base method.
func (m *MockAlbumServiceClient) GetAlbumsByIDs(ctx context.Context, in *album.AlbumIDListWithUserID, opts ...grpc.CallOption) (*album.AlbumList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbumsByIDs", varargs...)
	ret0, _ := ret[0].(*album.AlbumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByIDs indicates an expected call of GetAlbumsByIDs.
func (mr *MockAlbumServiceClientMockRecorder) GetAlbumsByIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByIDs", reflect.TypeOf((*MockAlbumServiceClient)(nil).GetAlbumsByIDs), varargs...)
}

// GetAllAlbums mocks base method.
func (m *MockAlbumServiceClient) GetAllAlbums(ctx context.Context, in *album.FiltersWithUserID, opts ...grpc.CallOption) (*album.AlbumList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllAlbums", varargs...)
	ret0, _ := ret[0].(*album.AlbumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbums indicates an expected call of GetAllAlbums.
func (mr *MockAlbumServiceClientMockRecorder) GetAllAlbums(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbums", reflect.TypeOf((*MockAlbumServiceClient)(nil).GetAllAlbums), varargs...)
}

// GetFavoriteAlbums mocks base method.
func (m *MockAlbumServiceClient) GetFavoriteAlbums(ctx context.Context, in *album.FiltersWithUserID, opts ...grpc.CallOption) (*album.AlbumList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFavoriteAlbums", varargs...)
	ret0, _ := ret[0].(*album.AlbumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteAlbums indicates an expected call of GetFavoriteAlbums.
func (mr *MockAlbumServiceClientMockRecorder) GetFavoriteAlbums(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteAlbums", reflect.TypeOf((*MockAlbumServiceClient)(nil).GetFavoriteAlbums), varargs...)
}

// LikeAlbum mocks base method.
func (m *MockAlbumServiceClient) LikeAlbum(ctx context.Context, in *album.LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LikeAlbum", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeAlbum indicates an expected call of LikeAlbum.
func (mr *MockAlbumServiceClientMockRecorder) LikeAlbum(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeAlbum", reflect.TypeOf((*MockAlbumServiceClient)(nil).LikeAlbum), varargs...)
}

// SearchAlbums mocks base method.
func (m *MockAlbumServiceClient) SearchAlbums(ctx context.Context, in *album.Query, opts ...grpc.CallOption) (*album.AlbumList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAlbums", varargs...)
	ret0, _ := ret[0].(*album.AlbumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAlbums indicates an expected call of SearchAlbums.
func (mr *MockAlbumServiceClientMockRecorder) SearchAlbums(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAlbums", reflect.TypeOf((*MockAlbumServiceClient)(nil).SearchAlbums), varargs...)
}

// MockAlbumServiceServer is a mock of AlbumServiceServer interface.
type MockAlbumServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumServiceServerMockRecorder
	isgomock struct{}
}

// MockAlbumServiceServerMockRecorder is the mock recorder for MockAlbumServiceServer.
type MockAlbumServiceServerMockRecorder struct {
	mock *MockAlbumServiceServer
}

// NewMockAlbumServiceServer creates a new mock instance.
func NewMockAlbumServiceServer(ctrl *gomock.Controller) *MockAlbumServiceServer {
	mock := &MockAlbumServiceServer{ctrl: ctrl}
	mock.recorder = &MockAlbumServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumServiceServer) EXPECT() *MockAlbumServiceServerMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockAlbumServiceServer) CreateStream(arg0 context.Context, arg1 *album.AlbumStreamCreateData) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockAlbumServiceServerMockRecorder) CreateStream(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockAlbumServiceServer)(nil).CreateStream), arg0, arg1)
}

// GetAlbumByID mocks base method.
func (m *MockAlbumServiceServer) GetAlbumByID(arg0 context.Context, arg1 *album.AlbumIDWithUserID) (*album.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumByID", arg0, arg1)
	ret0, _ := ret[0].(*album.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumByID indicates an expected call of GetAlbumByID.
func (mr *MockAlbumServiceServerMockRecorder) GetAlbumByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumByID", reflect.TypeOf((*MockAlbumServiceServer)(nil).GetAlbumByID), arg0, arg1)
}

// GetAlbumTitleByID mocks base method.
func (m *MockAlbumServiceServer) GetAlbumTitleByID(arg0 context.Context, arg1 *album.AlbumID) (*album.AlbumTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumTitleByID", arg0, arg1)
	ret0, _ := ret[0].(*album.AlbumTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByID indicates an expected call of GetAlbumTitleByID.
func (mr *MockAlbumServiceServerMockRecorder) GetAlbumTitleByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByID", reflect.TypeOf((*MockAlbumServiceServer)(nil).GetAlbumTitleByID), arg0, arg1)
}

// GetAlbumTitleByIDs mocks base method.
func (m *MockAlbumServiceServer) GetAlbumTitleByIDs(arg0 context.Context, arg1 *album.AlbumIDList) (*album.AlbumTitleMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumTitleByIDs", arg0, arg1)
	ret0, _ := ret[0].(*album.AlbumTitleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumTitleByIDs indicates an expected call of GetAlbumTitleByIDs.
func (mr *MockAlbumServiceServerMockRecorder) GetAlbumTitleByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumTitleByIDs", reflect.TypeOf((*MockAlbumServiceServer)(nil).GetAlbumTitleByIDs), arg0, arg1)
}

// GetAlbumsByIDs mocks base method.
func (m *MockAlbumServiceServer) GetAlbumsByIDs(arg0 context.Context, arg1 *album.AlbumIDListWithUserID) (*album.AlbumList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumsByIDs", arg0, arg1)
	ret0, _ := ret[0].(*album.AlbumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumsByIDs indicates an expected call of GetAlbumsByIDs.
func (mr *MockAlbumServiceServerMockRecorder) GetAlbumsByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumsByIDs", reflect.TypeOf((*MockAlbumServiceServer)(nil).GetAlbumsByIDs), arg0, arg1)
}

// GetAllAlbums mocks base method.
func (m *MockAlbumServiceServer) GetAllAlbums(arg0 context.Context, arg1 *album.FiltersWithUserID) (*album.AlbumList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAlbums", arg0, arg1)
	ret0, _ := ret[0].(*album.AlbumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAlbums indicates an expected call of GetAllAlbums.
func (mr *MockAlbumServiceServerMockRecorder) GetAllAlbums(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAlbums", reflect.TypeOf((*MockAlbumServiceServer)(nil).GetAllAlbums), arg0, arg1)
}

// GetFavoriteAlbums mocks base method.
func (m *MockAlbumServiceServer) GetFavoriteAlbums(arg0 context.Context, arg1 *album.FiltersWithUserID) (*album.AlbumList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteAlbums", arg0, arg1)
	ret0, _ := ret[0].(*album.AlbumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteAlbums indicates an expected call of GetFavoriteAlbums.
func (mr *MockAlbumServiceServerMockRecorder) GetFavoriteAlbums(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteAlbums", reflect.TypeOf((*MockAlbumServiceServer)(nil).GetFavoriteAlbums), arg0, arg1)
}

// LikeAlbum mocks base method.
func (m *MockAlbumServiceServer) LikeAlbum(arg0 context.Context, arg1 *album.LikeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeAlbum", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeAlbum indicates an expected call of LikeAlbum.
func (mr *MockAlbumServiceServerMockRecorder) LikeAlbum(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeAlbum", reflect.TypeOf((*MockAlbumServiceServer)(nil).LikeAlbum), arg0, arg1)
}

// SearchAlbums mocks base method.
func (m *MockAlbumServiceServer) SearchAlbums(arg0 context.Context, arg1 *album.Query) (*album.AlbumList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAlbums", arg0, arg1)
	ret0, _ := ret[0].(*album.AlbumList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAlbums indicates an expected call of SearchAlbums.
func (mr *MockAlbumServiceServerMockRecorder) SearchAlbums(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAlbums", reflect.TypeOf((*MockAlbumServiceServer)(nil).SearchAlbums), arg0, arg1)
}

// mustEmbedUnimplementedAlbumServiceServer mocks base method.
func (m *MockAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAlbumServiceServer")
}

// mustEmbedUnimplementedAlbumServiceServer indicates an expected call of mustEmbedUnimplementedAlbumServiceServer.
func (mr *MockAlbumServiceServerMockRecorder) mustEmbedUnimplementedAlbumServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAlbumServiceServer", reflect.TypeOf((*MockAlbumServiceServer)(nil).mustEmbedUnimplementedAlbumServiceServer))
}

// MockUnsafeAlbumServiceServer is a mock of UnsafeAlbumServiceServer interface.
type MockUnsafeAlbumServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAlbumServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeAlbumServiceServerMockRecorder is the mock recorder for MockUnsafeAlbumServiceServer.
type MockUnsafeAlbumServiceServerMockRecorder struct {
	mock *MockUnsafeAlbumServiceServer
}

// NewMockUnsafeAlbumServiceServer creates a new mock instance.
func NewMockUnsafeAlbumServiceServer(ctrl *gomock.Controller) *MockUnsafeAlbumServiceServer {
	mock := &MockUnsafeAlbumServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAlbumServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAlbumServiceServer) EXPECT() *MockUnsafeAlbumServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAlbumServiceServer mocks base method.
func (m *MockUnsafeAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAlbumServiceServer")
}

// mustEmbedUnimplementedAlbumServiceServer indicates an expected call of mustEmbedUnimplementedAlbumServiceServer.
func (mr *MockUnsafeAlbumServiceServerMockRecorder) mustEmbedUnimplementedAlbumServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAlbumServiceServer", reflect.TypeOf((*MockUnsafeAlbumServiceServer)(nil).mustEmbedUnimplementedAlbumServiceServer))
}
