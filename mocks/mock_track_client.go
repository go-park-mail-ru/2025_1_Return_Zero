// Code generated by MockGen. DO NOT EDIT.
// Source: gen/track/track_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=gen/track/track_grpc.pb.go -destination=mocks/mock_track_client.go -package=mocks TrackServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	track "github.com/go-park-mail-ru/2025_1_Return_Zero/gen/track"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTrackServiceClient is a mock of TrackServiceClient interface.
type MockTrackServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrackServiceClientMockRecorder
	isgomock struct{}
}

// MockTrackServiceClientMockRecorder is the mock recorder for MockTrackServiceClient.
type MockTrackServiceClientMockRecorder struct {
	mock *MockTrackServiceClient
}

// NewMockTrackServiceClient creates a new mock instance.
func NewMockTrackServiceClient(ctrl *gomock.Controller) *MockTrackServiceClient {
	mock := &MockTrackServiceClient{ctrl: ctrl}
	mock.recorder = &MockTrackServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackServiceClient) EXPECT() *MockTrackServiceClientMockRecorder {
	return m.recorder
}

// AddTracksToAlbum mocks base method.
func (m *MockTrackServiceClient) AddTracksToAlbum(ctx context.Context, in *track.TracksListWithAlbumID, opts ...grpc.CallOption) (*track.TrackIdsList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTracksToAlbum", varargs...)
	ret0, _ := ret[0].(*track.TrackIdsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTracksToAlbum indicates an expected call of AddTracksToAlbum.
func (mr *MockTrackServiceClientMockRecorder) AddTracksToAlbum(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTracksToAlbum", reflect.TypeOf((*MockTrackServiceClient)(nil).AddTracksToAlbum), varargs...)
}

// CreateStream mocks base method.
func (m *MockTrackServiceClient) CreateStream(ctx context.Context, in *track.TrackStreamCreateData, opts ...grpc.CallOption) (*track.StreamID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStream", varargs...)
	ret0, _ := ret[0].(*track.StreamID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockTrackServiceClientMockRecorder) CreateStream(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockTrackServiceClient)(nil).CreateStream), varargs...)
}

// DeleteTracksByAlbumID mocks base method.
func (m *MockTrackServiceClient) DeleteTracksByAlbumID(ctx context.Context, in *track.AlbumID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTracksByAlbumID", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTracksByAlbumID indicates an expected call of DeleteTracksByAlbumID.
func (mr *MockTrackServiceClientMockRecorder) DeleteTracksByAlbumID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracksByAlbumID", reflect.TypeOf((*MockTrackServiceClient)(nil).DeleteTracksByAlbumID), varargs...)
}

// GetAlbumIDByTrackID mocks base method.
func (m *MockTrackServiceClient) GetAlbumIDByTrackID(ctx context.Context, in *track.TrackID, opts ...grpc.CallOption) (*track.AlbumID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbumIDByTrackID", varargs...)
	ret0, _ := ret[0].(*track.AlbumID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumIDByTrackID indicates an expected call of GetAlbumIDByTrackID.
func (mr *MockTrackServiceClientMockRecorder) GetAlbumIDByTrackID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumIDByTrackID", reflect.TypeOf((*MockTrackServiceClient)(nil).GetAlbumIDByTrackID), varargs...)
}

// GetAllTracks mocks base method.
func (m *MockTrackServiceClient) GetAllTracks(ctx context.Context, in *track.UserIDWithFilters, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllTracks", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTracks indicates an expected call of GetAllTracks.
func (mr *MockTrackServiceClientMockRecorder) GetAllTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTracks", reflect.TypeOf((*MockTrackServiceClient)(nil).GetAllTracks), varargs...)
}

// GetFavoriteTracks mocks base method.
func (m *MockTrackServiceClient) GetFavoriteTracks(ctx context.Context, in *track.FavoriteRequest, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFavoriteTracks", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteTracks indicates an expected call of GetFavoriteTracks.
func (mr *MockTrackServiceClientMockRecorder) GetFavoriteTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteTracks", reflect.TypeOf((*MockTrackServiceClient)(nil).GetFavoriteTracks), varargs...)
}

// GetLastListenedTracks mocks base method.
func (m *MockTrackServiceClient) GetLastListenedTracks(ctx context.Context, in *track.UserIDWithFilters, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastListenedTracks", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastListenedTracks indicates an expected call of GetLastListenedTracks.
func (mr *MockTrackServiceClientMockRecorder) GetLastListenedTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastListenedTracks", reflect.TypeOf((*MockTrackServiceClient)(nil).GetLastListenedTracks), varargs...)
}

// GetMinutesListenedByUserID mocks base method.
func (m *MockTrackServiceClient) GetMinutesListenedByUserID(ctx context.Context, in *track.UserID, opts ...grpc.CallOption) (*track.MinutesListened, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMinutesListenedByUserID", varargs...)
	ret0, _ := ret[0].(*track.MinutesListened)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinutesListenedByUserID indicates an expected call of GetMinutesListenedByUserID.
func (mr *MockTrackServiceClientMockRecorder) GetMinutesListenedByUserID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinutesListenedByUserID", reflect.TypeOf((*MockTrackServiceClient)(nil).GetMinutesListenedByUserID), varargs...)
}

// GetMostLikedLastWeekTracks mocks base method.
func (m *MockTrackServiceClient) GetMostLikedLastWeekTracks(ctx context.Context, in *track.UserID, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMostLikedLastWeekTracks", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostLikedLastWeekTracks indicates an expected call of GetMostLikedLastWeekTracks.
func (mr *MockTrackServiceClientMockRecorder) GetMostLikedLastWeekTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostLikedLastWeekTracks", reflect.TypeOf((*MockTrackServiceClient)(nil).GetMostLikedLastWeekTracks), varargs...)
}

// GetMostLikedTracks mocks base method.
func (m *MockTrackServiceClient) GetMostLikedTracks(ctx context.Context, in *track.UserID, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMostLikedTracks", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostLikedTracks indicates an expected call of GetMostLikedTracks.
func (mr *MockTrackServiceClientMockRecorder) GetMostLikedTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostLikedTracks", reflect.TypeOf((*MockTrackServiceClient)(nil).GetMostLikedTracks), varargs...)
}

// GetMostListenedLastMonthTracks mocks base method.
func (m *MockTrackServiceClient) GetMostListenedLastMonthTracks(ctx context.Context, in *track.UserID, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMostListenedLastMonthTracks", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostListenedLastMonthTracks indicates an expected call of GetMostListenedLastMonthTracks.
func (mr *MockTrackServiceClientMockRecorder) GetMostListenedLastMonthTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostListenedLastMonthTracks", reflect.TypeOf((*MockTrackServiceClient)(nil).GetMostListenedLastMonthTracks), varargs...)
}

// GetMostRecentTracks mocks base method.
func (m *MockTrackServiceClient) GetMostRecentTracks(ctx context.Context, in *track.UserID, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMostRecentTracks", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRecentTracks indicates an expected call of GetMostRecentTracks.
func (mr *MockTrackServiceClientMockRecorder) GetMostRecentTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentTracks", reflect.TypeOf((*MockTrackServiceClient)(nil).GetMostRecentTracks), varargs...)
}

// GetTrackByID mocks base method.
func (m *MockTrackServiceClient) GetTrackByID(ctx context.Context, in *track.TrackIDWithUserID, opts ...grpc.CallOption) (*track.TrackDetailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrackByID", varargs...)
	ret0, _ := ret[0].(*track.TrackDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackByID indicates an expected call of GetTrackByID.
func (mr *MockTrackServiceClientMockRecorder) GetTrackByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackByID", reflect.TypeOf((*MockTrackServiceClient)(nil).GetTrackByID), varargs...)
}

// GetTracksByAlbumID mocks base method.
func (m *MockTrackServiceClient) GetTracksByAlbumID(ctx context.Context, in *track.AlbumIDWithUserID, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTracksByAlbumID", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByAlbumID indicates an expected call of GetTracksByAlbumID.
func (mr *MockTrackServiceClientMockRecorder) GetTracksByAlbumID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByAlbumID", reflect.TypeOf((*MockTrackServiceClient)(nil).GetTracksByAlbumID), varargs...)
}

// GetTracksByIDs mocks base method.
func (m *MockTrackServiceClient) GetTracksByIDs(ctx context.Context, in *track.TrackIDList, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTracksByIDs", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByIDs indicates an expected call of GetTracksByIDs.
func (mr *MockTrackServiceClientMockRecorder) GetTracksByIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByIDs", reflect.TypeOf((*MockTrackServiceClient)(nil).GetTracksByIDs), varargs...)
}

// GetTracksByIDsFiltered mocks base method.
func (m *MockTrackServiceClient) GetTracksByIDsFiltered(ctx context.Context, in *track.TrackIDListWithFilters, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTracksByIDsFiltered", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByIDsFiltered indicates an expected call of GetTracksByIDsFiltered.
func (mr *MockTrackServiceClientMockRecorder) GetTracksByIDsFiltered(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByIDsFiltered", reflect.TypeOf((*MockTrackServiceClient)(nil).GetTracksByIDsFiltered), varargs...)
}

// GetTracksListenedByUserID mocks base method.
func (m *MockTrackServiceClient) GetTracksListenedByUserID(ctx context.Context, in *track.UserID, opts ...grpc.CallOption) (*track.TracksListened, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTracksListenedByUserID", varargs...)
	ret0, _ := ret[0].(*track.TracksListened)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksListenedByUserID indicates an expected call of GetTracksListenedByUserID.
func (mr *MockTrackServiceClientMockRecorder) GetTracksListenedByUserID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksListenedByUserID", reflect.TypeOf((*MockTrackServiceClient)(nil).GetTracksListenedByUserID), varargs...)
}

// LikeTrack mocks base method.
func (m *MockTrackServiceClient) LikeTrack(ctx context.Context, in *track.LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LikeTrack", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeTrack indicates an expected call of LikeTrack.
func (mr *MockTrackServiceClientMockRecorder) LikeTrack(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeTrack", reflect.TypeOf((*MockTrackServiceClient)(nil).LikeTrack), varargs...)
}

// SearchTracks mocks base method.
func (m *MockTrackServiceClient) SearchTracks(ctx context.Context, in *track.Query, opts ...grpc.CallOption) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchTracks", varargs...)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTracks indicates an expected call of SearchTracks.
func (mr *MockTrackServiceClientMockRecorder) SearchTracks(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTracks", reflect.TypeOf((*MockTrackServiceClient)(nil).SearchTracks), varargs...)
}

// UpdateStreamDuration mocks base method.
func (m *MockTrackServiceClient) UpdateStreamDuration(ctx context.Context, in *track.TrackStreamUpdateData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStreamDuration", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamDuration indicates an expected call of UpdateStreamDuration.
func (mr *MockTrackServiceClientMockRecorder) UpdateStreamDuration(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamDuration", reflect.TypeOf((*MockTrackServiceClient)(nil).UpdateStreamDuration), varargs...)
}

// MockTrackServiceServer is a mock of TrackServiceServer interface.
type MockTrackServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTrackServiceServerMockRecorder
	isgomock struct{}
}

// MockTrackServiceServerMockRecorder is the mock recorder for MockTrackServiceServer.
type MockTrackServiceServerMockRecorder struct {
	mock *MockTrackServiceServer
}

// NewMockTrackServiceServer creates a new mock instance.
func NewMockTrackServiceServer(ctrl *gomock.Controller) *MockTrackServiceServer {
	mock := &MockTrackServiceServer{ctrl: ctrl}
	mock.recorder = &MockTrackServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackServiceServer) EXPECT() *MockTrackServiceServerMockRecorder {
	return m.recorder
}

// AddTracksToAlbum mocks base method.
func (m *MockTrackServiceServer) AddTracksToAlbum(arg0 context.Context, arg1 *track.TracksListWithAlbumID) (*track.TrackIdsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTracksToAlbum", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackIdsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTracksToAlbum indicates an expected call of AddTracksToAlbum.
func (mr *MockTrackServiceServerMockRecorder) AddTracksToAlbum(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTracksToAlbum", reflect.TypeOf((*MockTrackServiceServer)(nil).AddTracksToAlbum), arg0, arg1)
}

// CreateStream mocks base method.
func (m *MockTrackServiceServer) CreateStream(arg0 context.Context, arg1 *track.TrackStreamCreateData) (*track.StreamID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", arg0, arg1)
	ret0, _ := ret[0].(*track.StreamID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockTrackServiceServerMockRecorder) CreateStream(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockTrackServiceServer)(nil).CreateStream), arg0, arg1)
}

// DeleteTracksByAlbumID mocks base method.
func (m *MockTrackServiceServer) DeleteTracksByAlbumID(arg0 context.Context, arg1 *track.AlbumID) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTracksByAlbumID", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTracksByAlbumID indicates an expected call of DeleteTracksByAlbumID.
func (mr *MockTrackServiceServerMockRecorder) DeleteTracksByAlbumID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTracksByAlbumID", reflect.TypeOf((*MockTrackServiceServer)(nil).DeleteTracksByAlbumID), arg0, arg1)
}

// GetAlbumIDByTrackID mocks base method.
func (m *MockTrackServiceServer) GetAlbumIDByTrackID(arg0 context.Context, arg1 *track.TrackID) (*track.AlbumID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumIDByTrackID", arg0, arg1)
	ret0, _ := ret[0].(*track.AlbumID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumIDByTrackID indicates an expected call of GetAlbumIDByTrackID.
func (mr *MockTrackServiceServerMockRecorder) GetAlbumIDByTrackID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumIDByTrackID", reflect.TypeOf((*MockTrackServiceServer)(nil).GetAlbumIDByTrackID), arg0, arg1)
}

// GetAllTracks mocks base method.
func (m *MockTrackServiceServer) GetAllTracks(arg0 context.Context, arg1 *track.UserIDWithFilters) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTracks", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTracks indicates an expected call of GetAllTracks.
func (mr *MockTrackServiceServerMockRecorder) GetAllTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTracks", reflect.TypeOf((*MockTrackServiceServer)(nil).GetAllTracks), arg0, arg1)
}

// GetFavoriteTracks mocks base method.
func (m *MockTrackServiceServer) GetFavoriteTracks(arg0 context.Context, arg1 *track.FavoriteRequest) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteTracks", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteTracks indicates an expected call of GetFavoriteTracks.
func (mr *MockTrackServiceServerMockRecorder) GetFavoriteTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteTracks", reflect.TypeOf((*MockTrackServiceServer)(nil).GetFavoriteTracks), arg0, arg1)
}

// GetLastListenedTracks mocks base method.
func (m *MockTrackServiceServer) GetLastListenedTracks(arg0 context.Context, arg1 *track.UserIDWithFilters) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastListenedTracks", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastListenedTracks indicates an expected call of GetLastListenedTracks.
func (mr *MockTrackServiceServerMockRecorder) GetLastListenedTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastListenedTracks", reflect.TypeOf((*MockTrackServiceServer)(nil).GetLastListenedTracks), arg0, arg1)
}

// GetMinutesListenedByUserID mocks base method.
func (m *MockTrackServiceServer) GetMinutesListenedByUserID(arg0 context.Context, arg1 *track.UserID) (*track.MinutesListened, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinutesListenedByUserID", arg0, arg1)
	ret0, _ := ret[0].(*track.MinutesListened)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinutesListenedByUserID indicates an expected call of GetMinutesListenedByUserID.
func (mr *MockTrackServiceServerMockRecorder) GetMinutesListenedByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinutesListenedByUserID", reflect.TypeOf((*MockTrackServiceServer)(nil).GetMinutesListenedByUserID), arg0, arg1)
}

// GetMostLikedLastWeekTracks mocks base method.
func (m *MockTrackServiceServer) GetMostLikedLastWeekTracks(arg0 context.Context, arg1 *track.UserID) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostLikedLastWeekTracks", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostLikedLastWeekTracks indicates an expected call of GetMostLikedLastWeekTracks.
func (mr *MockTrackServiceServerMockRecorder) GetMostLikedLastWeekTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostLikedLastWeekTracks", reflect.TypeOf((*MockTrackServiceServer)(nil).GetMostLikedLastWeekTracks), arg0, arg1)
}

// GetMostLikedTracks mocks base method.
func (m *MockTrackServiceServer) GetMostLikedTracks(arg0 context.Context, arg1 *track.UserID) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostLikedTracks", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostLikedTracks indicates an expected call of GetMostLikedTracks.
func (mr *MockTrackServiceServerMockRecorder) GetMostLikedTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostLikedTracks", reflect.TypeOf((*MockTrackServiceServer)(nil).GetMostLikedTracks), arg0, arg1)
}

// GetMostListenedLastMonthTracks mocks base method.
func (m *MockTrackServiceServer) GetMostListenedLastMonthTracks(arg0 context.Context, arg1 *track.UserID) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostListenedLastMonthTracks", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostListenedLastMonthTracks indicates an expected call of GetMostListenedLastMonthTracks.
func (mr *MockTrackServiceServerMockRecorder) GetMostListenedLastMonthTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostListenedLastMonthTracks", reflect.TypeOf((*MockTrackServiceServer)(nil).GetMostListenedLastMonthTracks), arg0, arg1)
}

// GetMostRecentTracks mocks base method.
func (m *MockTrackServiceServer) GetMostRecentTracks(arg0 context.Context, arg1 *track.UserID) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostRecentTracks", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostRecentTracks indicates an expected call of GetMostRecentTracks.
func (mr *MockTrackServiceServerMockRecorder) GetMostRecentTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostRecentTracks", reflect.TypeOf((*MockTrackServiceServer)(nil).GetMostRecentTracks), arg0, arg1)
}

// GetTrackByID mocks base method.
func (m *MockTrackServiceServer) GetTrackByID(arg0 context.Context, arg1 *track.TrackIDWithUserID) (*track.TrackDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackByID", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackByID indicates an expected call of GetTrackByID.
func (mr *MockTrackServiceServerMockRecorder) GetTrackByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackByID", reflect.TypeOf((*MockTrackServiceServer)(nil).GetTrackByID), arg0, arg1)
}

// GetTracksByAlbumID mocks base method.
func (m *MockTrackServiceServer) GetTracksByAlbumID(arg0 context.Context, arg1 *track.AlbumIDWithUserID) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByAlbumID", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByAlbumID indicates an expected call of GetTracksByAlbumID.
func (mr *MockTrackServiceServerMockRecorder) GetTracksByAlbumID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByAlbumID", reflect.TypeOf((*MockTrackServiceServer)(nil).GetTracksByAlbumID), arg0, arg1)
}

// GetTracksByIDs mocks base method.
func (m *MockTrackServiceServer) GetTracksByIDs(arg0 context.Context, arg1 *track.TrackIDList) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByIDs", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByIDs indicates an expected call of GetTracksByIDs.
func (mr *MockTrackServiceServerMockRecorder) GetTracksByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByIDs", reflect.TypeOf((*MockTrackServiceServer)(nil).GetTracksByIDs), arg0, arg1)
}

// GetTracksByIDsFiltered mocks base method.
func (m *MockTrackServiceServer) GetTracksByIDsFiltered(arg0 context.Context, arg1 *track.TrackIDListWithFilters) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByIDsFiltered", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByIDsFiltered indicates an expected call of GetTracksByIDsFiltered.
func (mr *MockTrackServiceServerMockRecorder) GetTracksByIDsFiltered(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByIDsFiltered", reflect.TypeOf((*MockTrackServiceServer)(nil).GetTracksByIDsFiltered), arg0, arg1)
}

// GetTracksListenedByUserID mocks base method.
func (m *MockTrackServiceServer) GetTracksListenedByUserID(arg0 context.Context, arg1 *track.UserID) (*track.TracksListened, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksListenedByUserID", arg0, arg1)
	ret0, _ := ret[0].(*track.TracksListened)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksListenedByUserID indicates an expected call of GetTracksListenedByUserID.
func (mr *MockTrackServiceServerMockRecorder) GetTracksListenedByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksListenedByUserID", reflect.TypeOf((*MockTrackServiceServer)(nil).GetTracksListenedByUserID), arg0, arg1)
}

// LikeTrack mocks base method.
func (m *MockTrackServiceServer) LikeTrack(arg0 context.Context, arg1 *track.LikeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeTrack", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeTrack indicates an expected call of LikeTrack.
func (mr *MockTrackServiceServerMockRecorder) LikeTrack(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeTrack", reflect.TypeOf((*MockTrackServiceServer)(nil).LikeTrack), arg0, arg1)
}

// SearchTracks mocks base method.
func (m *MockTrackServiceServer) SearchTracks(arg0 context.Context, arg1 *track.Query) (*track.TrackList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTracks", arg0, arg1)
	ret0, _ := ret[0].(*track.TrackList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTracks indicates an expected call of SearchTracks.
func (mr *MockTrackServiceServerMockRecorder) SearchTracks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTracks", reflect.TypeOf((*MockTrackServiceServer)(nil).SearchTracks), arg0, arg1)
}

// UpdateStreamDuration mocks base method.
func (m *MockTrackServiceServer) UpdateStreamDuration(arg0 context.Context, arg1 *track.TrackStreamUpdateData) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStreamDuration", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStreamDuration indicates an expected call of UpdateStreamDuration.
func (mr *MockTrackServiceServerMockRecorder) UpdateStreamDuration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStreamDuration", reflect.TypeOf((*MockTrackServiceServer)(nil).UpdateStreamDuration), arg0, arg1)
}

// mustEmbedUnimplementedTrackServiceServer mocks base method.
func (m *MockTrackServiceServer) mustEmbedUnimplementedTrackServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTrackServiceServer")
}

// mustEmbedUnimplementedTrackServiceServer indicates an expected call of mustEmbedUnimplementedTrackServiceServer.
func (mr *MockTrackServiceServerMockRecorder) mustEmbedUnimplementedTrackServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTrackServiceServer", reflect.TypeOf((*MockTrackServiceServer)(nil).mustEmbedUnimplementedTrackServiceServer))
}

// MockUnsafeTrackServiceServer is a mock of UnsafeTrackServiceServer interface.
type MockUnsafeTrackServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTrackServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeTrackServiceServerMockRecorder is the mock recorder for MockUnsafeTrackServiceServer.
type MockUnsafeTrackServiceServerMockRecorder struct {
	mock *MockUnsafeTrackServiceServer
}

// NewMockUnsafeTrackServiceServer creates a new mock instance.
func NewMockUnsafeTrackServiceServer(ctrl *gomock.Controller) *MockUnsafeTrackServiceServer {
	mock := &MockUnsafeTrackServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTrackServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTrackServiceServer) EXPECT() *MockUnsafeTrackServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTrackServiceServer mocks base method.
func (m *MockUnsafeTrackServiceServer) mustEmbedUnimplementedTrackServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTrackServiceServer")
}

// mustEmbedUnimplementedTrackServiceServer indicates an expected call of mustEmbedUnimplementedTrackServiceServer.
func (mr *MockUnsafeTrackServiceServerMockRecorder) mustEmbedUnimplementedTrackServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTrackServiceServer", reflect.TypeOf((*MockUnsafeTrackServiceServer)(nil).mustEmbedUnimplementedTrackServiceServer))
}
