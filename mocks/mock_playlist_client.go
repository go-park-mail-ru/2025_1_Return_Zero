// Code generated by MockGen. DO NOT EDIT.
// Source: gen/playlist/playlist_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=gen/playlist/playlist_grpc.pb.go -destination=mocks/mock_playlist_client.go -package=mocks PlaylistServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	playlist "github.com/go-park-mail-ru/2025_1_Return_Zero/gen/playlist"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPlaylistServiceClient is a mock of PlaylistServiceClient interface.
type MockPlaylistServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlaylistServiceClientMockRecorder
	isgomock struct{}
}

// MockPlaylistServiceClientMockRecorder is the mock recorder for MockPlaylistServiceClient.
type MockPlaylistServiceClientMockRecorder struct {
	mock *MockPlaylistServiceClient
}

// NewMockPlaylistServiceClient creates a new mock instance.
func NewMockPlaylistServiceClient(ctrl *gomock.Controller) *MockPlaylistServiceClient {
	mock := &MockPlaylistServiceClient{ctrl: ctrl}
	mock.recorder = &MockPlaylistServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaylistServiceClient) EXPECT() *MockPlaylistServiceClientMockRecorder {
	return m.recorder
}

// AddTrackToPlaylist mocks base method.
func (m *MockPlaylistServiceClient) AddTrackToPlaylist(ctx context.Context, in *playlist.AddTrackToPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTrackToPlaylist", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrackToPlaylist indicates an expected call of AddTrackToPlaylist.
func (mr *MockPlaylistServiceClientMockRecorder) AddTrackToPlaylist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrackToPlaylist", reflect.TypeOf((*MockPlaylistServiceClient)(nil).AddTrackToPlaylist), varargs...)
}

// CreatePlaylist mocks base method.
func (m *MockPlaylistServiceClient) CreatePlaylist(ctx context.Context, in *playlist.CreatePlaylistRequest, opts ...grpc.CallOption) (*playlist.Playlist, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePlaylist", varargs...)
	ret0, _ := ret[0].(*playlist.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaylist indicates an expected call of CreatePlaylist.
func (mr *MockPlaylistServiceClientMockRecorder) CreatePlaylist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylist", reflect.TypeOf((*MockPlaylistServiceClient)(nil).CreatePlaylist), varargs...)
}

// GetCombinedPlaylistsByUserID mocks base method.
func (m *MockPlaylistServiceClient) GetCombinedPlaylistsByUserID(ctx context.Context, in *playlist.GetCombinedPlaylistsByUserIDRequest, opts ...grpc.CallOption) (*playlist.PlaylistList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCombinedPlaylistsByUserID", varargs...)
	ret0, _ := ret[0].(*playlist.PlaylistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombinedPlaylistsByUserID indicates an expected call of GetCombinedPlaylistsByUserID.
func (mr *MockPlaylistServiceClientMockRecorder) GetCombinedPlaylistsByUserID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedPlaylistsByUserID", reflect.TypeOf((*MockPlaylistServiceClient)(nil).GetCombinedPlaylistsByUserID), varargs...)
}

// GetPlaylistByID mocks base method.
func (m *MockPlaylistServiceClient) GetPlaylistByID(ctx context.Context, in *playlist.GetPlaylistByIDRequest, opts ...grpc.CallOption) (*playlist.PlaylistWithIsLiked, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlaylistByID", varargs...)
	ret0, _ := ret[0].(*playlist.PlaylistWithIsLiked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistByID indicates an expected call of GetPlaylistByID.
func (mr *MockPlaylistServiceClientMockRecorder) GetPlaylistByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistByID", reflect.TypeOf((*MockPlaylistServiceClient)(nil).GetPlaylistByID), varargs...)
}

// GetPlaylistTrackIds mocks base method.
func (m *MockPlaylistServiceClient) GetPlaylistTrackIds(ctx context.Context, in *playlist.GetPlaylistTrackIdsRequest, opts ...grpc.CallOption) (*playlist.GetPlaylistTrackIdsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlaylistTrackIds", varargs...)
	ret0, _ := ret[0].(*playlist.GetPlaylistTrackIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistTrackIds indicates an expected call of GetPlaylistTrackIds.
func (mr *MockPlaylistServiceClientMockRecorder) GetPlaylistTrackIds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistTrackIds", reflect.TypeOf((*MockPlaylistServiceClient)(nil).GetPlaylistTrackIds), varargs...)
}

// GetPlaylistsToAdd mocks base method.
func (m *MockPlaylistServiceClient) GetPlaylistsToAdd(ctx context.Context, in *playlist.GetPlaylistsToAddRequest, opts ...grpc.CallOption) (*playlist.GetPlaylistsToAddResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlaylistsToAdd", varargs...)
	ret0, _ := ret[0].(*playlist.GetPlaylistsToAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistsToAdd indicates an expected call of GetPlaylistsToAdd.
func (mr *MockPlaylistServiceClientMockRecorder) GetPlaylistsToAdd(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistsToAdd", reflect.TypeOf((*MockPlaylistServiceClient)(nil).GetPlaylistsToAdd), varargs...)
}

// GetProfilePlaylists mocks base method.
func (m *MockPlaylistServiceClient) GetProfilePlaylists(ctx context.Context, in *playlist.GetProfilePlaylistsRequest, opts ...grpc.CallOption) (*playlist.GetProfilePlaylistsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfilePlaylists", varargs...)
	ret0, _ := ret[0].(*playlist.GetProfilePlaylistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePlaylists indicates an expected call of GetProfilePlaylists.
func (mr *MockPlaylistServiceClientMockRecorder) GetProfilePlaylists(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePlaylists", reflect.TypeOf((*MockPlaylistServiceClient)(nil).GetProfilePlaylists), varargs...)
}

// LikePlaylist mocks base method.
func (m *MockPlaylistServiceClient) LikePlaylist(ctx context.Context, in *playlist.LikePlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LikePlaylist", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikePlaylist indicates an expected call of LikePlaylist.
func (mr *MockPlaylistServiceClientMockRecorder) LikePlaylist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePlaylist", reflect.TypeOf((*MockPlaylistServiceClient)(nil).LikePlaylist), varargs...)
}

// RemovePlaylist mocks base method.
func (m *MockPlaylistServiceClient) RemovePlaylist(ctx context.Context, in *playlist.RemovePlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePlaylist", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePlaylist indicates an expected call of RemovePlaylist.
func (mr *MockPlaylistServiceClientMockRecorder) RemovePlaylist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlaylist", reflect.TypeOf((*MockPlaylistServiceClient)(nil).RemovePlaylist), varargs...)
}

// RemoveTrackFromPlaylist mocks base method.
func (m *MockPlaylistServiceClient) RemoveTrackFromPlaylist(ctx context.Context, in *playlist.RemoveTrackFromPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTrackFromPlaylist", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTrackFromPlaylist indicates an expected call of RemoveTrackFromPlaylist.
func (mr *MockPlaylistServiceClientMockRecorder) RemoveTrackFromPlaylist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrackFromPlaylist", reflect.TypeOf((*MockPlaylistServiceClient)(nil).RemoveTrackFromPlaylist), varargs...)
}

// SearchPlaylists mocks base method.
func (m *MockPlaylistServiceClient) SearchPlaylists(ctx context.Context, in *playlist.SearchPlaylistsRequest, opts ...grpc.CallOption) (*playlist.PlaylistList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchPlaylists", varargs...)
	ret0, _ := ret[0].(*playlist.PlaylistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaylists indicates an expected call of SearchPlaylists.
func (mr *MockPlaylistServiceClientMockRecorder) SearchPlaylists(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaylists", reflect.TypeOf((*MockPlaylistServiceClient)(nil).SearchPlaylists), varargs...)
}

// UpdatePlaylist mocks base method.
func (m *MockPlaylistServiceClient) UpdatePlaylist(ctx context.Context, in *playlist.UpdatePlaylistRequest, opts ...grpc.CallOption) (*playlist.Playlist, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePlaylist", varargs...)
	ret0, _ := ret[0].(*playlist.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaylist indicates an expected call of UpdatePlaylist.
func (mr *MockPlaylistServiceClientMockRecorder) UpdatePlaylist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylist", reflect.TypeOf((*MockPlaylistServiceClient)(nil).UpdatePlaylist), varargs...)
}

// UpdatePlaylistsPublisityByUserID mocks base method.
func (m *MockPlaylistServiceClient) UpdatePlaylistsPublisityByUserID(ctx context.Context, in *playlist.UpdatePlaylistsPublisityByUserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePlaylistsPublisityByUserID", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaylistsPublisityByUserID indicates an expected call of UpdatePlaylistsPublisityByUserID.
func (mr *MockPlaylistServiceClientMockRecorder) UpdatePlaylistsPublisityByUserID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylistsPublisityByUserID", reflect.TypeOf((*MockPlaylistServiceClient)(nil).UpdatePlaylistsPublisityByUserID), varargs...)
}

// UploadPlaylistThumbnail mocks base method.
func (m *MockPlaylistServiceClient) UploadPlaylistThumbnail(ctx context.Context, in *playlist.UploadPlaylistThumbnailRequest, opts ...grpc.CallOption) (*playlist.UploadPlaylistThumbnailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadPlaylistThumbnail", varargs...)
	ret0, _ := ret[0].(*playlist.UploadPlaylistThumbnailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPlaylistThumbnail indicates an expected call of UploadPlaylistThumbnail.
func (mr *MockPlaylistServiceClientMockRecorder) UploadPlaylistThumbnail(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPlaylistThumbnail", reflect.TypeOf((*MockPlaylistServiceClient)(nil).UploadPlaylistThumbnail), varargs...)
}

// MockPlaylistServiceServer is a mock of PlaylistServiceServer interface.
type MockPlaylistServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPlaylistServiceServerMockRecorder
	isgomock struct{}
}

// MockPlaylistServiceServerMockRecorder is the mock recorder for MockPlaylistServiceServer.
type MockPlaylistServiceServerMockRecorder struct {
	mock *MockPlaylistServiceServer
}

// NewMockPlaylistServiceServer creates a new mock instance.
func NewMockPlaylistServiceServer(ctrl *gomock.Controller) *MockPlaylistServiceServer {
	mock := &MockPlaylistServiceServer{ctrl: ctrl}
	mock.recorder = &MockPlaylistServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaylistServiceServer) EXPECT() *MockPlaylistServiceServerMockRecorder {
	return m.recorder
}

// AddTrackToPlaylist mocks base method.
func (m *MockPlaylistServiceServer) AddTrackToPlaylist(arg0 context.Context, arg1 *playlist.AddTrackToPlaylistRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrackToPlaylist", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrackToPlaylist indicates an expected call of AddTrackToPlaylist.
func (mr *MockPlaylistServiceServerMockRecorder) AddTrackToPlaylist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrackToPlaylist", reflect.TypeOf((*MockPlaylistServiceServer)(nil).AddTrackToPlaylist), arg0, arg1)
}

// CreatePlaylist mocks base method.
func (m *MockPlaylistServiceServer) CreatePlaylist(arg0 context.Context, arg1 *playlist.CreatePlaylistRequest) (*playlist.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaylist", arg0, arg1)
	ret0, _ := ret[0].(*playlist.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaylist indicates an expected call of CreatePlaylist.
func (mr *MockPlaylistServiceServerMockRecorder) CreatePlaylist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylist", reflect.TypeOf((*MockPlaylistServiceServer)(nil).CreatePlaylist), arg0, arg1)
}

// GetCombinedPlaylistsByUserID mocks base method.
func (m *MockPlaylistServiceServer) GetCombinedPlaylistsByUserID(arg0 context.Context, arg1 *playlist.GetCombinedPlaylistsByUserIDRequest) (*playlist.PlaylistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombinedPlaylistsByUserID", arg0, arg1)
	ret0, _ := ret[0].(*playlist.PlaylistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombinedPlaylistsByUserID indicates an expected call of GetCombinedPlaylistsByUserID.
func (mr *MockPlaylistServiceServerMockRecorder) GetCombinedPlaylistsByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombinedPlaylistsByUserID", reflect.TypeOf((*MockPlaylistServiceServer)(nil).GetCombinedPlaylistsByUserID), arg0, arg1)
}

// GetPlaylistByID mocks base method.
func (m *MockPlaylistServiceServer) GetPlaylistByID(arg0 context.Context, arg1 *playlist.GetPlaylistByIDRequest) (*playlist.PlaylistWithIsLiked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistByID", arg0, arg1)
	ret0, _ := ret[0].(*playlist.PlaylistWithIsLiked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistByID indicates an expected call of GetPlaylistByID.
func (mr *MockPlaylistServiceServerMockRecorder) GetPlaylistByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistByID", reflect.TypeOf((*MockPlaylistServiceServer)(nil).GetPlaylistByID), arg0, arg1)
}

// GetPlaylistTrackIds mocks base method.
func (m *MockPlaylistServiceServer) GetPlaylistTrackIds(arg0 context.Context, arg1 *playlist.GetPlaylistTrackIdsRequest) (*playlist.GetPlaylistTrackIdsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistTrackIds", arg0, arg1)
	ret0, _ := ret[0].(*playlist.GetPlaylistTrackIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistTrackIds indicates an expected call of GetPlaylistTrackIds.
func (mr *MockPlaylistServiceServerMockRecorder) GetPlaylistTrackIds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistTrackIds", reflect.TypeOf((*MockPlaylistServiceServer)(nil).GetPlaylistTrackIds), arg0, arg1)
}

// GetPlaylistsToAdd mocks base method.
func (m *MockPlaylistServiceServer) GetPlaylistsToAdd(arg0 context.Context, arg1 *playlist.GetPlaylistsToAddRequest) (*playlist.GetPlaylistsToAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistsToAdd", arg0, arg1)
	ret0, _ := ret[0].(*playlist.GetPlaylistsToAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistsToAdd indicates an expected call of GetPlaylistsToAdd.
func (mr *MockPlaylistServiceServerMockRecorder) GetPlaylistsToAdd(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistsToAdd", reflect.TypeOf((*MockPlaylistServiceServer)(nil).GetPlaylistsToAdd), arg0, arg1)
}

// GetProfilePlaylists mocks base method.
func (m *MockPlaylistServiceServer) GetProfilePlaylists(arg0 context.Context, arg1 *playlist.GetProfilePlaylistsRequest) (*playlist.GetProfilePlaylistsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilePlaylists", arg0, arg1)
	ret0, _ := ret[0].(*playlist.GetProfilePlaylistsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePlaylists indicates an expected call of GetProfilePlaylists.
func (mr *MockPlaylistServiceServerMockRecorder) GetProfilePlaylists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePlaylists", reflect.TypeOf((*MockPlaylistServiceServer)(nil).GetProfilePlaylists), arg0, arg1)
}

// LikePlaylist mocks base method.
func (m *MockPlaylistServiceServer) LikePlaylist(arg0 context.Context, arg1 *playlist.LikePlaylistRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePlaylist", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikePlaylist indicates an expected call of LikePlaylist.
func (mr *MockPlaylistServiceServerMockRecorder) LikePlaylist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePlaylist", reflect.TypeOf((*MockPlaylistServiceServer)(nil).LikePlaylist), arg0, arg1)
}

// RemovePlaylist mocks base method.
func (m *MockPlaylistServiceServer) RemovePlaylist(arg0 context.Context, arg1 *playlist.RemovePlaylistRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlaylist", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePlaylist indicates an expected call of RemovePlaylist.
func (mr *MockPlaylistServiceServerMockRecorder) RemovePlaylist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlaylist", reflect.TypeOf((*MockPlaylistServiceServer)(nil).RemovePlaylist), arg0, arg1)
}

// RemoveTrackFromPlaylist mocks base method.
func (m *MockPlaylistServiceServer) RemoveTrackFromPlaylist(arg0 context.Context, arg1 *playlist.RemoveTrackFromPlaylistRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrackFromPlaylist", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTrackFromPlaylist indicates an expected call of RemoveTrackFromPlaylist.
func (mr *MockPlaylistServiceServerMockRecorder) RemoveTrackFromPlaylist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrackFromPlaylist", reflect.TypeOf((*MockPlaylistServiceServer)(nil).RemoveTrackFromPlaylist), arg0, arg1)
}

// SearchPlaylists mocks base method.
func (m *MockPlaylistServiceServer) SearchPlaylists(arg0 context.Context, arg1 *playlist.SearchPlaylistsRequest) (*playlist.PlaylistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchPlaylists", arg0, arg1)
	ret0, _ := ret[0].(*playlist.PlaylistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchPlaylists indicates an expected call of SearchPlaylists.
func (mr *MockPlaylistServiceServerMockRecorder) SearchPlaylists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchPlaylists", reflect.TypeOf((*MockPlaylistServiceServer)(nil).SearchPlaylists), arg0, arg1)
}

// UpdatePlaylist mocks base method.
func (m *MockPlaylistServiceServer) UpdatePlaylist(arg0 context.Context, arg1 *playlist.UpdatePlaylistRequest) (*playlist.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylist", arg0, arg1)
	ret0, _ := ret[0].(*playlist.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaylist indicates an expected call of UpdatePlaylist.
func (mr *MockPlaylistServiceServerMockRecorder) UpdatePlaylist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylist", reflect.TypeOf((*MockPlaylistServiceServer)(nil).UpdatePlaylist), arg0, arg1)
}

// UpdatePlaylistsPublisityByUserID mocks base method.
func (m *MockPlaylistServiceServer) UpdatePlaylistsPublisityByUserID(arg0 context.Context, arg1 *playlist.UpdatePlaylistsPublisityByUserIDRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylistsPublisityByUserID", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePlaylistsPublisityByUserID indicates an expected call of UpdatePlaylistsPublisityByUserID.
func (mr *MockPlaylistServiceServerMockRecorder) UpdatePlaylistsPublisityByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylistsPublisityByUserID", reflect.TypeOf((*MockPlaylistServiceServer)(nil).UpdatePlaylistsPublisityByUserID), arg0, arg1)
}

// UploadPlaylistThumbnail mocks base method.
func (m *MockPlaylistServiceServer) UploadPlaylistThumbnail(arg0 context.Context, arg1 *playlist.UploadPlaylistThumbnailRequest) (*playlist.UploadPlaylistThumbnailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPlaylistThumbnail", arg0, arg1)
	ret0, _ := ret[0].(*playlist.UploadPlaylistThumbnailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPlaylistThumbnail indicates an expected call of UploadPlaylistThumbnail.
func (mr *MockPlaylistServiceServerMockRecorder) UploadPlaylistThumbnail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPlaylistThumbnail", reflect.TypeOf((*MockPlaylistServiceServer)(nil).UploadPlaylistThumbnail), arg0, arg1)
}

// mustEmbedUnimplementedPlaylistServiceServer mocks base method.
func (m *MockPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPlaylistServiceServer")
}

// mustEmbedUnimplementedPlaylistServiceServer indicates an expected call of mustEmbedUnimplementedPlaylistServiceServer.
func (mr *MockPlaylistServiceServerMockRecorder) mustEmbedUnimplementedPlaylistServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPlaylistServiceServer", reflect.TypeOf((*MockPlaylistServiceServer)(nil).mustEmbedUnimplementedPlaylistServiceServer))
}

// MockUnsafePlaylistServiceServer is a mock of UnsafePlaylistServiceServer interface.
type MockUnsafePlaylistServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePlaylistServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafePlaylistServiceServerMockRecorder is the mock recorder for MockUnsafePlaylistServiceServer.
type MockUnsafePlaylistServiceServerMockRecorder struct {
	mock *MockUnsafePlaylistServiceServer
}

// NewMockUnsafePlaylistServiceServer creates a new mock instance.
func NewMockUnsafePlaylistServiceServer(ctrl *gomock.Controller) *MockUnsafePlaylistServiceServer {
	mock := &MockUnsafePlaylistServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePlaylistServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePlaylistServiceServer) EXPECT() *MockUnsafePlaylistServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPlaylistServiceServer mocks base method.
func (m *MockUnsafePlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPlaylistServiceServer")
}

// mustEmbedUnimplementedPlaylistServiceServer indicates an expected call of mustEmbedUnimplementedPlaylistServiceServer.
func (mr *MockUnsafePlaylistServiceServerMockRecorder) mustEmbedUnimplementedPlaylistServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPlaylistServiceServer", reflect.TypeOf((*MockUnsafePlaylistServiceServer)(nil).mustEmbedUnimplementedPlaylistServiceServer))
}
