// Code generated by MockGen. DO NOT EDIT.
// Source: gen/artist/artist_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=gen/artist/artist_grpc.pb.go -destination=mocks/mock_artist_client.go -package=mocks ArtistServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	artist "github.com/go-park-mail-ru/2025_1_Return_Zero/gen/artist"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockArtistServiceClient is a mock of ArtistServiceClient interface.
type MockArtistServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockArtistServiceClientMockRecorder
	isgomock struct{}
}

// MockArtistServiceClientMockRecorder is the mock recorder for MockArtistServiceClient.
type MockArtistServiceClientMockRecorder struct {
	mock *MockArtistServiceClient
}

// NewMockArtistServiceClient creates a new mock instance.
func NewMockArtistServiceClient(ctrl *gomock.Controller) *MockArtistServiceClient {
	mock := &MockArtistServiceClient{ctrl: ctrl}
	mock.recorder = &MockArtistServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtistServiceClient) EXPECT() *MockArtistServiceClientMockRecorder {
	return m.recorder
}

// ConnectArtists mocks base method.
func (m *MockArtistServiceClient) ConnectArtists(ctx context.Context, in *artist.ArtistsIDWithAlbumID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectArtists", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectArtists indicates an expected call of ConnectArtists.
func (mr *MockArtistServiceClientMockRecorder) ConnectArtists(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectArtists", reflect.TypeOf((*MockArtistServiceClient)(nil).ConnectArtists), varargs...)
}

// CreateArtist mocks base method.
func (m *MockArtistServiceClient) CreateArtist(ctx context.Context, in *artist.ArtistLoad, opts ...grpc.CallOption) (*artist.Artist, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateArtist", varargs...)
	ret0, _ := ret[0].(*artist.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArtist indicates an expected call of CreateArtist.
func (mr *MockArtistServiceClientMockRecorder) CreateArtist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockArtistServiceClient)(nil).CreateArtist), varargs...)
}

// CreateStreamsByArtistIDs mocks base method.
func (m *MockArtistServiceClient) CreateStreamsByArtistIDs(ctx context.Context, in *artist.ArtistStreamCreateDataList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStreamsByArtistIDs", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamsByArtistIDs indicates an expected call of CreateStreamsByArtistIDs.
func (mr *MockArtistServiceClientMockRecorder) CreateStreamsByArtistIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamsByArtistIDs", reflect.TypeOf((*MockArtistServiceClient)(nil).CreateStreamsByArtistIDs), varargs...)
}

// DeleteArtist mocks base method.
func (m *MockArtistServiceClient) DeleteArtist(ctx context.Context, in *artist.ArtistDelete, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteArtist", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArtist indicates an expected call of DeleteArtist.
func (mr *MockArtistServiceClientMockRecorder) DeleteArtist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtist", reflect.TypeOf((*MockArtistServiceClient)(nil).DeleteArtist), varargs...)
}

// EditArtist mocks base method.
func (m *MockArtistServiceClient) EditArtist(ctx context.Context, in *artist.ArtistEdit, opts ...grpc.CallOption) (*artist.Artist, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditArtist", varargs...)
	ret0, _ := ret[0].(*artist.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditArtist indicates an expected call of EditArtist.
func (mr *MockArtistServiceClientMockRecorder) EditArtist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditArtist", reflect.TypeOf((*MockArtistServiceClient)(nil).EditArtist), varargs...)
}

// GetAlbumIDsByArtistID mocks base method.
func (m *MockArtistServiceClient) GetAlbumIDsByArtistID(ctx context.Context, in *artist.ArtistID, opts ...grpc.CallOption) (*artist.AlbumIDList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAlbumIDsByArtistID", varargs...)
	ret0, _ := ret[0].(*artist.AlbumIDList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumIDsByArtistID indicates an expected call of GetAlbumIDsByArtistID.
func (mr *MockArtistServiceClientMockRecorder) GetAlbumIDsByArtistID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumIDsByArtistID", reflect.TypeOf((*MockArtistServiceClient)(nil).GetAlbumIDsByArtistID), varargs...)
}

// GetAllArtists mocks base method.
func (m *MockArtistServiceClient) GetAllArtists(ctx context.Context, in *artist.FiltersWithUserID, opts ...grpc.CallOption) (*artist.ArtistList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllArtists", varargs...)
	ret0, _ := ret[0].(*artist.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArtists indicates an expected call of GetAllArtists.
func (mr *MockArtistServiceClientMockRecorder) GetAllArtists(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArtists", reflect.TypeOf((*MockArtistServiceClient)(nil).GetAllArtists), varargs...)
}

// GetArtistByID mocks base method.
func (m *MockArtistServiceClient) GetArtistByID(ctx context.Context, in *artist.ArtistIDWithUserID, opts ...grpc.CallOption) (*artist.ArtistDetailed, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtistByID", varargs...)
	ret0, _ := ret[0].(*artist.ArtistDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockArtistServiceClientMockRecorder) GetArtistByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockArtistServiceClient)(nil).GetArtistByID), varargs...)
}

// GetArtistTitleByID mocks base method.
func (m *MockArtistServiceClient) GetArtistTitleByID(ctx context.Context, in *artist.ArtistID, opts ...grpc.CallOption) (*artist.ArtistTitle, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtistTitleByID", varargs...)
	ret0, _ := ret[0].(*artist.ArtistTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistTitleByID indicates an expected call of GetArtistTitleByID.
func (mr *MockArtistServiceClientMockRecorder) GetArtistTitleByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistTitleByID", reflect.TypeOf((*MockArtistServiceClient)(nil).GetArtistTitleByID), varargs...)
}

// GetArtistsByAlbumID mocks base method.
func (m *MockArtistServiceClient) GetArtistsByAlbumID(ctx context.Context, in *artist.AlbumID, opts ...grpc.CallOption) (*artist.ArtistWithTitleList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtistsByAlbumID", varargs...)
	ret0, _ := ret[0].(*artist.ArtistWithTitleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumID indicates an expected call of GetArtistsByAlbumID.
func (mr *MockArtistServiceClientMockRecorder) GetArtistsByAlbumID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumID", reflect.TypeOf((*MockArtistServiceClient)(nil).GetArtistsByAlbumID), varargs...)
}

// GetArtistsByAlbumIDs mocks base method.
func (m *MockArtistServiceClient) GetArtistsByAlbumIDs(ctx context.Context, in *artist.AlbumIDList, opts ...grpc.CallOption) (*artist.ArtistWithTitleMap, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtistsByAlbumIDs", varargs...)
	ret0, _ := ret[0].(*artist.ArtistWithTitleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumIDs indicates an expected call of GetArtistsByAlbumIDs.
func (mr *MockArtistServiceClientMockRecorder) GetArtistsByAlbumIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumIDs", reflect.TypeOf((*MockArtistServiceClient)(nil).GetArtistsByAlbumIDs), varargs...)
}

// GetArtistsByTrackID mocks base method.
func (m *MockArtistServiceClient) GetArtistsByTrackID(ctx context.Context, in *artist.TrackID, opts ...grpc.CallOption) (*artist.ArtistWithRoleList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtistsByTrackID", varargs...)
	ret0, _ := ret[0].(*artist.ArtistWithRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackID indicates an expected call of GetArtistsByTrackID.
func (mr *MockArtistServiceClientMockRecorder) GetArtistsByTrackID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackID", reflect.TypeOf((*MockArtistServiceClient)(nil).GetArtistsByTrackID), varargs...)
}

// GetArtistsByTrackIDs mocks base method.
func (m *MockArtistServiceClient) GetArtistsByTrackIDs(ctx context.Context, in *artist.TrackIDList, opts ...grpc.CallOption) (*artist.ArtistWithRoleMap, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtistsByTrackIDs", varargs...)
	ret0, _ := ret[0].(*artist.ArtistWithRoleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackIDs indicates an expected call of GetArtistsByTrackIDs.
func (mr *MockArtistServiceClientMockRecorder) GetArtistsByTrackIDs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackIDs", reflect.TypeOf((*MockArtistServiceClient)(nil).GetArtistsByTrackIDs), varargs...)
}

// GetArtistsLabelID mocks base method.
func (m *MockArtistServiceClient) GetArtistsLabelID(ctx context.Context, in *artist.FiltersWithLabelID, opts ...grpc.CallOption) (*artist.ArtistList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtistsLabelID", varargs...)
	ret0, _ := ret[0].(*artist.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsLabelID indicates an expected call of GetArtistsLabelID.
func (mr *MockArtistServiceClientMockRecorder) GetArtistsLabelID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsLabelID", reflect.TypeOf((*MockArtistServiceClient)(nil).GetArtistsLabelID), varargs...)
}

// GetArtistsListenedByUserID mocks base method.
func (m *MockArtistServiceClient) GetArtistsListenedByUserID(ctx context.Context, in *artist.UserID, opts ...grpc.CallOption) (*artist.ArtistListened, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtistsListenedByUserID", varargs...)
	ret0, _ := ret[0].(*artist.ArtistListened)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsListenedByUserID indicates an expected call of GetArtistsListenedByUserID.
func (mr *MockArtistServiceClientMockRecorder) GetArtistsListenedByUserID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsListenedByUserID", reflect.TypeOf((*MockArtistServiceClient)(nil).GetArtistsListenedByUserID), varargs...)
}

// GetFavoriteArtists mocks base method.
func (m *MockArtistServiceClient) GetFavoriteArtists(ctx context.Context, in *artist.FiltersWithUserID, opts ...grpc.CallOption) (*artist.ArtistList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFavoriteArtists", varargs...)
	ret0, _ := ret[0].(*artist.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteArtists indicates an expected call of GetFavoriteArtists.
func (mr *MockArtistServiceClientMockRecorder) GetFavoriteArtists(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteArtists", reflect.TypeOf((*MockArtistServiceClient)(nil).GetFavoriteArtists), varargs...)
}

// GetTrackIDsByArtistID mocks base method.
func (m *MockArtistServiceClient) GetTrackIDsByArtistID(ctx context.Context, in *artist.ArtistID, opts ...grpc.CallOption) (*artist.TrackIDList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrackIDsByArtistID", varargs...)
	ret0, _ := ret[0].(*artist.TrackIDList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackIDsByArtistID indicates an expected call of GetTrackIDsByArtistID.
func (mr *MockArtistServiceClientMockRecorder) GetTrackIDsByArtistID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackIDsByArtistID", reflect.TypeOf((*MockArtistServiceClient)(nil).GetTrackIDsByArtistID), varargs...)
}

// LikeArtist mocks base method.
func (m *MockArtistServiceClient) LikeArtist(ctx context.Context, in *artist.LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LikeArtist", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeArtist indicates an expected call of LikeArtist.
func (mr *MockArtistServiceClientMockRecorder) LikeArtist(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeArtist", reflect.TypeOf((*MockArtistServiceClient)(nil).LikeArtist), varargs...)
}

// SearchArtists mocks base method.
func (m *MockArtistServiceClient) SearchArtists(ctx context.Context, in *artist.Query, opts ...grpc.CallOption) (*artist.ArtistList, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchArtists", varargs...)
	ret0, _ := ret[0].(*artist.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArtists indicates an expected call of SearchArtists.
func (mr *MockArtistServiceClientMockRecorder) SearchArtists(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArtists", reflect.TypeOf((*MockArtistServiceClient)(nil).SearchArtists), varargs...)
}

// MockArtistServiceServer is a mock of ArtistServiceServer interface.
type MockArtistServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockArtistServiceServerMockRecorder
	isgomock struct{}
}

// MockArtistServiceServerMockRecorder is the mock recorder for MockArtistServiceServer.
type MockArtistServiceServerMockRecorder struct {
	mock *MockArtistServiceServer
}

// NewMockArtistServiceServer creates a new mock instance.
func NewMockArtistServiceServer(ctrl *gomock.Controller) *MockArtistServiceServer {
	mock := &MockArtistServiceServer{ctrl: ctrl}
	mock.recorder = &MockArtistServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtistServiceServer) EXPECT() *MockArtistServiceServerMockRecorder {
	return m.recorder
}

// ConnectArtists mocks base method.
func (m *MockArtistServiceServer) ConnectArtists(arg0 context.Context, arg1 *artist.ArtistsIDWithAlbumID) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectArtists", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectArtists indicates an expected call of ConnectArtists.
func (mr *MockArtistServiceServerMockRecorder) ConnectArtists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectArtists", reflect.TypeOf((*MockArtistServiceServer)(nil).ConnectArtists), arg0, arg1)
}

// CreateArtist mocks base method.
func (m *MockArtistServiceServer) CreateArtist(arg0 context.Context, arg1 *artist.ArtistLoad) (*artist.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArtist", arg0, arg1)
	ret0, _ := ret[0].(*artist.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArtist indicates an expected call of CreateArtist.
func (mr *MockArtistServiceServerMockRecorder) CreateArtist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArtist", reflect.TypeOf((*MockArtistServiceServer)(nil).CreateArtist), arg0, arg1)
}

// CreateStreamsByArtistIDs mocks base method.
func (m *MockArtistServiceServer) CreateStreamsByArtistIDs(arg0 context.Context, arg1 *artist.ArtistStreamCreateDataList) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStreamsByArtistIDs", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStreamsByArtistIDs indicates an expected call of CreateStreamsByArtistIDs.
func (mr *MockArtistServiceServerMockRecorder) CreateStreamsByArtistIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStreamsByArtistIDs", reflect.TypeOf((*MockArtistServiceServer)(nil).CreateStreamsByArtistIDs), arg0, arg1)
}

// DeleteArtist mocks base method.
func (m *MockArtistServiceServer) DeleteArtist(arg0 context.Context, arg1 *artist.ArtistDelete) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtist", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArtist indicates an expected call of DeleteArtist.
func (mr *MockArtistServiceServerMockRecorder) DeleteArtist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtist", reflect.TypeOf((*MockArtistServiceServer)(nil).DeleteArtist), arg0, arg1)
}

// EditArtist mocks base method.
func (m *MockArtistServiceServer) EditArtist(arg0 context.Context, arg1 *artist.ArtistEdit) (*artist.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditArtist", arg0, arg1)
	ret0, _ := ret[0].(*artist.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditArtist indicates an expected call of EditArtist.
func (mr *MockArtistServiceServerMockRecorder) EditArtist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditArtist", reflect.TypeOf((*MockArtistServiceServer)(nil).EditArtist), arg0, arg1)
}

// GetAlbumIDsByArtistID mocks base method.
func (m *MockArtistServiceServer) GetAlbumIDsByArtistID(arg0 context.Context, arg1 *artist.ArtistID) (*artist.AlbumIDList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumIDsByArtistID", arg0, arg1)
	ret0, _ := ret[0].(*artist.AlbumIDList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumIDsByArtistID indicates an expected call of GetAlbumIDsByArtistID.
func (mr *MockArtistServiceServerMockRecorder) GetAlbumIDsByArtistID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumIDsByArtistID", reflect.TypeOf((*MockArtistServiceServer)(nil).GetAlbumIDsByArtistID), arg0, arg1)
}

// GetAllArtists mocks base method.
func (m *MockArtistServiceServer) GetAllArtists(arg0 context.Context, arg1 *artist.FiltersWithUserID) (*artist.ArtistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArtists", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArtists indicates an expected call of GetAllArtists.
func (mr *MockArtistServiceServerMockRecorder) GetAllArtists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArtists", reflect.TypeOf((*MockArtistServiceServer)(nil).GetAllArtists), arg0, arg1)
}

// GetArtistByID mocks base method.
func (m *MockArtistServiceServer) GetArtistByID(arg0 context.Context, arg1 *artist.ArtistIDWithUserID) (*artist.ArtistDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistByID", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistByID indicates an expected call of GetArtistByID.
func (mr *MockArtistServiceServerMockRecorder) GetArtistByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistByID", reflect.TypeOf((*MockArtistServiceServer)(nil).GetArtistByID), arg0, arg1)
}

// GetArtistTitleByID mocks base method.
func (m *MockArtistServiceServer) GetArtistTitleByID(arg0 context.Context, arg1 *artist.ArtistID) (*artist.ArtistTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistTitleByID", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistTitleByID indicates an expected call of GetArtistTitleByID.
func (mr *MockArtistServiceServerMockRecorder) GetArtistTitleByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistTitleByID", reflect.TypeOf((*MockArtistServiceServer)(nil).GetArtistTitleByID), arg0, arg1)
}

// GetArtistsByAlbumID mocks base method.
func (m *MockArtistServiceServer) GetArtistsByAlbumID(arg0 context.Context, arg1 *artist.AlbumID) (*artist.ArtistWithTitleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByAlbumID", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistWithTitleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumID indicates an expected call of GetArtistsByAlbumID.
func (mr *MockArtistServiceServerMockRecorder) GetArtistsByAlbumID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumID", reflect.TypeOf((*MockArtistServiceServer)(nil).GetArtistsByAlbumID), arg0, arg1)
}

// GetArtistsByAlbumIDs mocks base method.
func (m *MockArtistServiceServer) GetArtistsByAlbumIDs(arg0 context.Context, arg1 *artist.AlbumIDList) (*artist.ArtistWithTitleMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByAlbumIDs", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistWithTitleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByAlbumIDs indicates an expected call of GetArtistsByAlbumIDs.
func (mr *MockArtistServiceServerMockRecorder) GetArtistsByAlbumIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByAlbumIDs", reflect.TypeOf((*MockArtistServiceServer)(nil).GetArtistsByAlbumIDs), arg0, arg1)
}

// GetArtistsByTrackID mocks base method.
func (m *MockArtistServiceServer) GetArtistsByTrackID(arg0 context.Context, arg1 *artist.TrackID) (*artist.ArtistWithRoleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByTrackID", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistWithRoleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackID indicates an expected call of GetArtistsByTrackID.
func (mr *MockArtistServiceServerMockRecorder) GetArtistsByTrackID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackID", reflect.TypeOf((*MockArtistServiceServer)(nil).GetArtistsByTrackID), arg0, arg1)
}

// GetArtistsByTrackIDs mocks base method.
func (m *MockArtistServiceServer) GetArtistsByTrackIDs(arg0 context.Context, arg1 *artist.TrackIDList) (*artist.ArtistWithRoleMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsByTrackIDs", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistWithRoleMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsByTrackIDs indicates an expected call of GetArtistsByTrackIDs.
func (mr *MockArtistServiceServerMockRecorder) GetArtistsByTrackIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsByTrackIDs", reflect.TypeOf((*MockArtistServiceServer)(nil).GetArtistsByTrackIDs), arg0, arg1)
}

// GetArtistsLabelID mocks base method.
func (m *MockArtistServiceServer) GetArtistsLabelID(arg0 context.Context, arg1 *artist.FiltersWithLabelID) (*artist.ArtistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsLabelID", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsLabelID indicates an expected call of GetArtistsLabelID.
func (mr *MockArtistServiceServerMockRecorder) GetArtistsLabelID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsLabelID", reflect.TypeOf((*MockArtistServiceServer)(nil).GetArtistsLabelID), arg0, arg1)
}

// GetArtistsListenedByUserID mocks base method.
func (m *MockArtistServiceServer) GetArtistsListenedByUserID(arg0 context.Context, arg1 *artist.UserID) (*artist.ArtistListened, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistsListenedByUserID", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistListened)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistsListenedByUserID indicates an expected call of GetArtistsListenedByUserID.
func (mr *MockArtistServiceServerMockRecorder) GetArtistsListenedByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistsListenedByUserID", reflect.TypeOf((*MockArtistServiceServer)(nil).GetArtistsListenedByUserID), arg0, arg1)
}

// GetFavoriteArtists mocks base method.
func (m *MockArtistServiceServer) GetFavoriteArtists(arg0 context.Context, arg1 *artist.FiltersWithUserID) (*artist.ArtistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteArtists", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteArtists indicates an expected call of GetFavoriteArtists.
func (mr *MockArtistServiceServerMockRecorder) GetFavoriteArtists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteArtists", reflect.TypeOf((*MockArtistServiceServer)(nil).GetFavoriteArtists), arg0, arg1)
}

// GetTrackIDsByArtistID mocks base method.
func (m *MockArtistServiceServer) GetTrackIDsByArtistID(arg0 context.Context, arg1 *artist.ArtistID) (*artist.TrackIDList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackIDsByArtistID", arg0, arg1)
	ret0, _ := ret[0].(*artist.TrackIDList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackIDsByArtistID indicates an expected call of GetTrackIDsByArtistID.
func (mr *MockArtistServiceServerMockRecorder) GetTrackIDsByArtistID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackIDsByArtistID", reflect.TypeOf((*MockArtistServiceServer)(nil).GetTrackIDsByArtistID), arg0, arg1)
}

// LikeArtist mocks base method.
func (m *MockArtistServiceServer) LikeArtist(arg0 context.Context, arg1 *artist.LikeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeArtist", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LikeArtist indicates an expected call of LikeArtist.
func (mr *MockArtistServiceServerMockRecorder) LikeArtist(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeArtist", reflect.TypeOf((*MockArtistServiceServer)(nil).LikeArtist), arg0, arg1)
}

// SearchArtists mocks base method.
func (m *MockArtistServiceServer) SearchArtists(arg0 context.Context, arg1 *artist.Query) (*artist.ArtistList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchArtists", arg0, arg1)
	ret0, _ := ret[0].(*artist.ArtistList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchArtists indicates an expected call of SearchArtists.
func (mr *MockArtistServiceServerMockRecorder) SearchArtists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchArtists", reflect.TypeOf((*MockArtistServiceServer)(nil).SearchArtists), arg0, arg1)
}

// mustEmbedUnimplementedArtistServiceServer mocks base method.
func (m *MockArtistServiceServer) mustEmbedUnimplementedArtistServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedArtistServiceServer")
}

// mustEmbedUnimplementedArtistServiceServer indicates an expected call of mustEmbedUnimplementedArtistServiceServer.
func (mr *MockArtistServiceServerMockRecorder) mustEmbedUnimplementedArtistServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedArtistServiceServer", reflect.TypeOf((*MockArtistServiceServer)(nil).mustEmbedUnimplementedArtistServiceServer))
}

// MockUnsafeArtistServiceServer is a mock of UnsafeArtistServiceServer interface.
type MockUnsafeArtistServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeArtistServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeArtistServiceServerMockRecorder is the mock recorder for MockUnsafeArtistServiceServer.
type MockUnsafeArtistServiceServerMockRecorder struct {
	mock *MockUnsafeArtistServiceServer
}

// NewMockUnsafeArtistServiceServer creates a new mock instance.
func NewMockUnsafeArtistServiceServer(ctrl *gomock.Controller) *MockUnsafeArtistServiceServer {
	mock := &MockUnsafeArtistServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeArtistServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeArtistServiceServer) EXPECT() *MockUnsafeArtistServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedArtistServiceServer mocks base method.
func (m *MockUnsafeArtistServiceServer) mustEmbedUnimplementedArtistServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedArtistServiceServer")
}

// mustEmbedUnimplementedArtistServiceServer indicates an expected call of mustEmbedUnimplementedArtistServiceServer.
func (mr *MockUnsafeArtistServiceServerMockRecorder) mustEmbedUnimplementedArtistServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedArtistServiceServer", reflect.TypeOf((*MockUnsafeArtistServiceServer)(nil).mustEmbedUnimplementedArtistServiceServer))
}
