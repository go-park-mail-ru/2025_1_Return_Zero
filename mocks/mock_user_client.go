// Code generated by MockGen. DO NOT EDIT.
// Source: gen/user/user_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=gen/user/user_grpc.pb.go -destination=mocks/mock_user_client.go -package=mocks UserServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	user "github.com/go-park-mail-ru/2025_1_Return_Zero/gen/user"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
	isgomock struct{}
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// ChangeUserData mocks base method.
func (m *MockUserServiceClient) ChangeUserData(ctx context.Context, in *user.ChangeUserDataMessage, opts ...grpc.CallOption) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserData", varargs...)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserData indicates an expected call of ChangeUserData.
func (mr *MockUserServiceClientMockRecorder) ChangeUserData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserData", reflect.TypeOf((*MockUserServiceClient)(nil).ChangeUserData), varargs...)
}

// ChangeUserPrivacySettings mocks base method.
func (m *MockUserServiceClient) ChangeUserPrivacySettings(ctx context.Context, in *user.PrivacySettings, opts ...grpc.CallOption) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeUserPrivacySettings", varargs...)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPrivacySettings indicates an expected call of ChangeUserPrivacySettings.
func (mr *MockUserServiceClientMockRecorder) ChangeUserPrivacySettings(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPrivacySettings", reflect.TypeOf((*MockUserServiceClient)(nil).ChangeUserPrivacySettings), varargs...)
}

// ChecksUsersByUsernames mocks base method.
func (m *MockUserServiceClient) ChecksUsersByUsernames(ctx context.Context, in *user.Usernames, opts ...grpc.CallOption) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChecksUsersByUsernames", varargs...)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChecksUsersByUsernames indicates an expected call of ChecksUsersByUsernames.
func (mr *MockUserServiceClientMockRecorder) ChecksUsersByUsernames(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChecksUsersByUsernames", reflect.TypeOf((*MockUserServiceClient)(nil).ChecksUsersByUsernames), varargs...)
}

// CreateUser mocks base method.
func (m *MockUserServiceClient) CreateUser(ctx context.Context, in *user.RegisterData, opts ...grpc.CallOption) (*user.UserFront, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*user.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceClientMockRecorder) CreateUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUser), varargs...)
}

// DeleteUser mocks base method.
func (m *MockUserServiceClient) DeleteUser(ctx context.Context, in *user.UserDelete, opts ...grpc.CallOption) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceClientMockRecorder) DeleteUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteUser), varargs...)
}

// GetIDByUsername mocks base method.
func (m *MockUserServiceClient) GetIDByUsername(ctx context.Context, in *user.Username, opts ...grpc.CallOption) (*user.UserID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIDByUsername", varargs...)
	ret0, _ := ret[0].(*user.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUsername indicates an expected call of GetIDByUsername.
func (mr *MockUserServiceClientMockRecorder) GetIDByUsername(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUsername", reflect.TypeOf((*MockUserServiceClient)(nil).GetIDByUsername), varargs...)
}

// GetLabelIDByUserID mocks base method.
func (m *MockUserServiceClient) GetLabelIDByUserID(ctx context.Context, in *user.UserID, opts ...grpc.CallOption) (*user.LabelID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLabelIDByUserID", varargs...)
	ret0, _ := ret[0].(*user.LabelID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelIDByUserID indicates an expected call of GetLabelIDByUserID.
func (mr *MockUserServiceClientMockRecorder) GetLabelIDByUserID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelIDByUserID", reflect.TypeOf((*MockUserServiceClient)(nil).GetLabelIDByUserID), varargs...)
}

// GetUserAvatarURL mocks base method.
func (m *MockUserServiceClient) GetUserAvatarURL(ctx context.Context, in *user.FileKey, opts ...grpc.CallOption) (*user.AvatarUrl, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserAvatarURL", varargs...)
	ret0, _ := ret[0].(*user.AvatarUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAvatarURL indicates an expected call of GetUserAvatarURL.
func (mr *MockUserServiceClientMockRecorder) GetUserAvatarURL(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAvatarURL", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserAvatarURL), varargs...)
}

// GetUserByID mocks base method.
func (m *MockUserServiceClient) GetUserByID(ctx context.Context, in *user.UserID, opts ...grpc.CallOption) (*user.UserFront, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByID", varargs...)
	ret0, _ := ret[0].(*user.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceClientMockRecorder) GetUserByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByID), varargs...)
}

// GetUserFullData mocks base method.
func (m *MockUserServiceClient) GetUserFullData(ctx context.Context, in *user.Username, opts ...grpc.CallOption) (*user.UserFullData, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserFullData", varargs...)
	ret0, _ := ret[0].(*user.UserFullData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFullData indicates an expected call of GetUserFullData.
func (mr *MockUserServiceClientMockRecorder) GetUserFullData(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFullData", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserFullData), varargs...)
}

// GetUserPrivacyByID mocks base method.
func (m *MockUserServiceClient) GetUserPrivacyByID(ctx context.Context, in *user.UserID, opts ...grpc.CallOption) (*user.PrivacySettings, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserPrivacyByID", varargs...)
	ret0, _ := ret[0].(*user.PrivacySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivacyByID indicates an expected call of GetUserPrivacyByID.
func (mr *MockUserServiceClientMockRecorder) GetUserPrivacyByID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivacyByID", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserPrivacyByID), varargs...)
}

// GetUsersByLabelID mocks base method.
func (m *MockUserServiceClient) GetUsersByLabelID(ctx context.Context, in *user.LabelID, opts ...grpc.CallOption) (*user.Usernames, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersByLabelID", varargs...)
	ret0, _ := ret[0].(*user.Usernames)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByLabelID indicates an expected call of GetUsersByLabelID.
func (mr *MockUserServiceClientMockRecorder) GetUsersByLabelID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByLabelID", reflect.TypeOf((*MockUserServiceClient)(nil).GetUsersByLabelID), varargs...)
}

// LoginUser mocks base method.
func (m *MockUserServiceClient) LoginUser(ctx context.Context, in *user.LoginData, opts ...grpc.CallOption) (*user.UserFront, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginUser", varargs...)
	ret0, _ := ret[0].(*user.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserServiceClientMockRecorder) LoginUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserServiceClient)(nil).LoginUser), varargs...)
}

// RemoveUsersLabelID mocks base method.
func (m *MockUserServiceClient) RemoveUsersLabelID(ctx context.Context, in *user.RequestRemoveUserLabelID, opts ...grpc.CallOption) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUsersLabelID", varargs...)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUsersLabelID indicates an expected call of RemoveUsersLabelID.
func (mr *MockUserServiceClientMockRecorder) RemoveUsersLabelID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUsersLabelID", reflect.TypeOf((*MockUserServiceClient)(nil).RemoveUsersLabelID), varargs...)
}

// UpdateUsersLabelID mocks base method.
func (m *MockUserServiceClient) UpdateUsersLabelID(ctx context.Context, in *user.RequestUpdateUserLabelID, opts ...grpc.CallOption) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsersLabelID", varargs...)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsersLabelID indicates an expected call of UpdateUsersLabelID.
func (mr *MockUserServiceClientMockRecorder) UpdateUsersLabelID(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersLabelID", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUsersLabelID), varargs...)
}

// UploadAvatar mocks base method.
func (m *MockUserServiceClient) UploadAvatar(ctx context.Context, in *user.AvatarData, opts ...grpc.CallOption) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadAvatar", varargs...)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockUserServiceClientMockRecorder) UploadAvatar(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUserServiceClient)(nil).UploadAvatar), varargs...)
}

// UploadUserAvatar mocks base method.
func (m *MockUserServiceClient) UploadUserAvatar(ctx context.Context, in *user.AvatarImage, opts ...grpc.CallOption) (*user.FileKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadUserAvatar", varargs...)
	ret0, _ := ret[0].(*user.FileKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockUserServiceClientMockRecorder) UploadUserAvatar(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockUserServiceClient)(nil).UploadUserAvatar), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
	isgomock struct{}
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// ChangeUserData mocks base method.
func (m *MockUserServiceServer) ChangeUserData(arg0 context.Context, arg1 *user.ChangeUserDataMessage) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserData", arg0, arg1)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserData indicates an expected call of ChangeUserData.
func (mr *MockUserServiceServerMockRecorder) ChangeUserData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserData", reflect.TypeOf((*MockUserServiceServer)(nil).ChangeUserData), arg0, arg1)
}

// ChangeUserPrivacySettings mocks base method.
func (m *MockUserServiceServer) ChangeUserPrivacySettings(arg0 context.Context, arg1 *user.PrivacySettings) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserPrivacySettings", arg0, arg1)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeUserPrivacySettings indicates an expected call of ChangeUserPrivacySettings.
func (mr *MockUserServiceServerMockRecorder) ChangeUserPrivacySettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserPrivacySettings", reflect.TypeOf((*MockUserServiceServer)(nil).ChangeUserPrivacySettings), arg0, arg1)
}

// ChecksUsersByUsernames mocks base method.
func (m *MockUserServiceServer) ChecksUsersByUsernames(arg0 context.Context, arg1 *user.Usernames) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChecksUsersByUsernames", arg0, arg1)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChecksUsersByUsernames indicates an expected call of ChecksUsersByUsernames.
func (mr *MockUserServiceServerMockRecorder) ChecksUsersByUsernames(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChecksUsersByUsernames", reflect.TypeOf((*MockUserServiceServer)(nil).ChecksUsersByUsernames), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockUserServiceServer) CreateUser(arg0 context.Context, arg1 *user.RegisterData) (*user.UserFront, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*user.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceServerMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserServiceServer) DeleteUser(arg0 context.Context, arg1 *user.UserDelete) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceServerMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteUser), arg0, arg1)
}

// GetIDByUsername mocks base method.
func (m *MockUserServiceServer) GetIDByUsername(arg0 context.Context, arg1 *user.Username) (*user.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByUsername", arg0, arg1)
	ret0, _ := ret[0].(*user.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUsername indicates an expected call of GetIDByUsername.
func (mr *MockUserServiceServerMockRecorder) GetIDByUsername(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUsername", reflect.TypeOf((*MockUserServiceServer)(nil).GetIDByUsername), arg0, arg1)
}

// GetLabelIDByUserID mocks base method.
func (m *MockUserServiceServer) GetLabelIDByUserID(arg0 context.Context, arg1 *user.UserID) (*user.LabelID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelIDByUserID", arg0, arg1)
	ret0, _ := ret[0].(*user.LabelID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelIDByUserID indicates an expected call of GetLabelIDByUserID.
func (mr *MockUserServiceServerMockRecorder) GetLabelIDByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelIDByUserID", reflect.TypeOf((*MockUserServiceServer)(nil).GetLabelIDByUserID), arg0, arg1)
}

// GetUserAvatarURL mocks base method.
func (m *MockUserServiceServer) GetUserAvatarURL(arg0 context.Context, arg1 *user.FileKey) (*user.AvatarUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAvatarURL", arg0, arg1)
	ret0, _ := ret[0].(*user.AvatarUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAvatarURL indicates an expected call of GetUserAvatarURL.
func (mr *MockUserServiceServerMockRecorder) GetUserAvatarURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAvatarURL", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserAvatarURL), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockUserServiceServer) GetUserByID(arg0 context.Context, arg1 *user.UserID) (*user.UserFront, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*user.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceServerMockRecorder) GetUserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByID), arg0, arg1)
}

// GetUserFullData mocks base method.
func (m *MockUserServiceServer) GetUserFullData(arg0 context.Context, arg1 *user.Username) (*user.UserFullData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFullData", arg0, arg1)
	ret0, _ := ret[0].(*user.UserFullData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFullData indicates an expected call of GetUserFullData.
func (mr *MockUserServiceServerMockRecorder) GetUserFullData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFullData", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserFullData), arg0, arg1)
}

// GetUserPrivacyByID mocks base method.
func (m *MockUserServiceServer) GetUserPrivacyByID(arg0 context.Context, arg1 *user.UserID) (*user.PrivacySettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPrivacyByID", arg0, arg1)
	ret0, _ := ret[0].(*user.PrivacySettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPrivacyByID indicates an expected call of GetUserPrivacyByID.
func (mr *MockUserServiceServerMockRecorder) GetUserPrivacyByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPrivacyByID", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserPrivacyByID), arg0, arg1)
}

// GetUsersByLabelID mocks base method.
func (m *MockUserServiceServer) GetUsersByLabelID(arg0 context.Context, arg1 *user.LabelID) (*user.Usernames, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByLabelID", arg0, arg1)
	ret0, _ := ret[0].(*user.Usernames)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByLabelID indicates an expected call of GetUsersByLabelID.
func (mr *MockUserServiceServerMockRecorder) GetUsersByLabelID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByLabelID", reflect.TypeOf((*MockUserServiceServer)(nil).GetUsersByLabelID), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockUserServiceServer) LoginUser(arg0 context.Context, arg1 *user.LoginData) (*user.UserFront, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*user.UserFront)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserServiceServerMockRecorder) LoginUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserServiceServer)(nil).LoginUser), arg0, arg1)
}

// RemoveUsersLabelID mocks base method.
func (m *MockUserServiceServer) RemoveUsersLabelID(arg0 context.Context, arg1 *user.RequestRemoveUserLabelID) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUsersLabelID", arg0, arg1)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUsersLabelID indicates an expected call of RemoveUsersLabelID.
func (mr *MockUserServiceServerMockRecorder) RemoveUsersLabelID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUsersLabelID", reflect.TypeOf((*MockUserServiceServer)(nil).RemoveUsersLabelID), arg0, arg1)
}

// UpdateUsersLabelID mocks base method.
func (m *MockUserServiceServer) UpdateUsersLabelID(arg0 context.Context, arg1 *user.RequestUpdateUserLabelID) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsersLabelID", arg0, arg1)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsersLabelID indicates an expected call of UpdateUsersLabelID.
func (mr *MockUserServiceServerMockRecorder) UpdateUsersLabelID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsersLabelID", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUsersLabelID), arg0, arg1)
}

// UploadAvatar mocks base method.
func (m *MockUserServiceServer) UploadAvatar(arg0 context.Context, arg1 *user.AvatarData) (*user.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAvatar", arg0, arg1)
	ret0, _ := ret[0].(*user.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadAvatar indicates an expected call of UploadAvatar.
func (mr *MockUserServiceServerMockRecorder) UploadAvatar(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAvatar", reflect.TypeOf((*MockUserServiceServer)(nil).UploadAvatar), arg0, arg1)
}

// UploadUserAvatar mocks base method.
func (m *MockUserServiceServer) UploadUserAvatar(arg0 context.Context, arg1 *user.AvatarImage) (*user.FileKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserAvatar", arg0, arg1)
	ret0, _ := ret[0].(*user.FileKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockUserServiceServerMockRecorder) UploadUserAvatar(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockUserServiceServer)(nil).UploadUserAvatar), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}
