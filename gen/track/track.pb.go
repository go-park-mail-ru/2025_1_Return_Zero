// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.1
// source: track/track.proto

package track

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Track struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail     string                 `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Duration      int64                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	AlbumId       int64                  `protobuf:"varint,5,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Track) Reset() {
	*x = Track{}
	mi := &file_track_track_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{0}
}

func (x *Track) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Track) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Track) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *Track) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Track) GetAlbumId() int64 {
	if x != nil {
		return x.AlbumId
	}
	return 0
}

type TrackList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        []*Track               `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackList) Reset() {
	*x = TrackList{}
	mi := &file_track_track_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackList) ProtoMessage() {}

func (x *TrackList) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackList.ProtoReflect.Descriptor instead.
func (*TrackList) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{1}
}

func (x *TrackList) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type TrackID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackID) Reset() {
	*x = TrackID{}
	mi := &file_track_track_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackID) ProtoMessage() {}

func (x *TrackID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackID.ProtoReflect.Descriptor instead.
func (*TrackID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{2}
}

func (x *TrackID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TrackIDList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []*TrackID             `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackIDList) Reset() {
	*x = TrackIDList{}
	mi := &file_track_track_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIDList) ProtoMessage() {}

func (x *TrackIDList) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIDList.ProtoReflect.Descriptor instead.
func (*TrackIDList) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{3}
}

func (x *TrackIDList) GetIds() []*TrackID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type TrackIDListWithFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           *TrackIDList           `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	Filters       *Filters               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackIDListWithFilters) Reset() {
	*x = TrackIDListWithFilters{}
	mi := &file_track_track_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackIDListWithFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIDListWithFilters) ProtoMessage() {}

func (x *TrackIDListWithFilters) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIDListWithFilters.ProtoReflect.Descriptor instead.
func (*TrackIDListWithFilters) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{4}
}

func (x *TrackIDListWithFilters) GetIds() *TrackIDList {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TrackIDListWithFilters) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type UserID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserID) Reset() {
	*x = UserID{}
	mi := &file_track_track_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{5}
}

func (x *UserID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserIDWithFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *UserID                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Filters       *Filters               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserIDWithFilters) Reset() {
	*x = UserIDWithFilters{}
	mi := &file_track_track_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIDWithFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDWithFilters) ProtoMessage() {}

func (x *UserIDWithFilters) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDWithFilters.ProtoReflect.Descriptor instead.
func (*UserIDWithFilters) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{6}
}

func (x *UserIDWithFilters) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserIDWithFilters) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type StreamID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamID) Reset() {
	*x = StreamID{}
	mi := &file_track_track_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamID) ProtoMessage() {}

func (x *StreamID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamID.ProtoReflect.Descriptor instead.
func (*StreamID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{7}
}

func (x *StreamID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TrackStreamCreateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackId       *TrackID               `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	UserId        *UserID                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStreamCreateData) Reset() {
	*x = TrackStreamCreateData{}
	mi := &file_track_track_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStreamCreateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStreamCreateData) ProtoMessage() {}

func (x *TrackStreamCreateData) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStreamCreateData.ProtoReflect.Descriptor instead.
func (*TrackStreamCreateData) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{8}
}

func (x *TrackStreamCreateData) GetTrackId() *TrackID {
	if x != nil {
		return x.TrackId
	}
	return nil
}

func (x *TrackStreamCreateData) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TrackStreamUpdateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      *StreamID              `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId        *UserID                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Duration      int64                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStreamUpdateData) Reset() {
	*x = TrackStreamUpdateData{}
	mi := &file_track_track_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStreamUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStreamUpdateData) ProtoMessage() {}

func (x *TrackStreamUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStreamUpdateData.ProtoReflect.Descriptor instead.
func (*TrackStreamUpdateData) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{9}
}

func (x *TrackStreamUpdateData) GetStreamId() *StreamID {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *TrackStreamUpdateData) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TrackStreamUpdateData) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TrackStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TrackId       *TrackID               `protobuf:"bytes,2,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	Duration      int64                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStream) Reset() {
	*x = TrackStream{}
	mi := &file_track_track_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStream) ProtoMessage() {}

func (x *TrackStream) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStream.ProtoReflect.Descriptor instead.
func (*TrackStream) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{10}
}

func (x *TrackStream) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrackStream) GetTrackId() *TrackID {
	if x != nil {
		return x.TrackId
	}
	return nil
}

func (x *TrackStream) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TrackStreamList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       []*TrackStream         `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStreamList) Reset() {
	*x = TrackStreamList{}
	mi := &file_track_track_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStreamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStreamList) ProtoMessage() {}

func (x *TrackStreamList) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStreamList.ProtoReflect.Descriptor instead.
func (*TrackStreamList) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{11}
}

func (x *TrackStreamList) GetStreams() []*TrackStream {
	if x != nil {
		return x.Streams
	}
	return nil
}

type TrackStreamListWithFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       *TrackStreamList       `protobuf:"bytes,1,opt,name=streams,proto3" json:"streams,omitempty"`
	Filters       *Filters               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStreamListWithFilters) Reset() {
	*x = TrackStreamListWithFilters{}
	mi := &file_track_track_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStreamListWithFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStreamListWithFilters) ProtoMessage() {}

func (x *TrackStreamListWithFilters) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStreamListWithFilters.ProtoReflect.Descriptor instead.
func (*TrackStreamListWithFilters) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{12}
}

func (x *TrackStreamListWithFilters) GetStreams() *TrackStreamList {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *TrackStreamListWithFilters) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type TrackDetailed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Track         *Track                 `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	FileUrl       string                 `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackDetailed) Reset() {
	*x = TrackDetailed{}
	mi := &file_track_track_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackDetailed) ProtoMessage() {}

func (x *TrackDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackDetailed.ProtoReflect.Descriptor instead.
func (*TrackDetailed) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{13}
}

func (x *TrackDetailed) GetTrack() *Track {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *TrackDetailed) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        int64                  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_track_track_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{14}
}

func (x *Pagination) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Filters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Pagination            `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filters) Reset() {
	*x = Filters{}
	mi := &file_track_track_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{15}
}

func (x *Filters) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_track_track_proto protoreflect.FileDescriptor

const file_track_track_proto_rawDesc = "" +
	"\n" +
	"\x11track/track.proto\x12\x05track\x1a\x1bgoogle/protobuf/empty.proto\"\x82\x01\n" +
	"\x05Track\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1c\n" +
	"\tthumbnail\x18\x03 \x01(\tR\tthumbnail\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\x03R\bduration\x12\x19\n" +
	"\balbum_id\x18\x05 \x01(\x03R\aalbumId\"1\n" +
	"\tTrackList\x12$\n" +
	"\x06tracks\x18\x01 \x03(\v2\f.track.TrackR\x06tracks\"\x19\n" +
	"\aTrackID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"/\n" +
	"\vTrackIDList\x12 \n" +
	"\x03ids\x18\x01 \x03(\v2\x0e.track.TrackIDR\x03ids\"h\n" +
	"\x16TrackIDListWithFilters\x12$\n" +
	"\x03ids\x18\x01 \x01(\v2\x12.track.TrackIDListR\x03ids\x12(\n" +
	"\afilters\x18\x02 \x01(\v2\x0e.track.FiltersR\afilters\"\x18\n" +
	"\x06UserID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"e\n" +
	"\x11UserIDWithFilters\x12&\n" +
	"\auser_id\x18\x01 \x01(\v2\r.track.UserIDR\x06userId\x12(\n" +
	"\afilters\x18\x02 \x01(\v2\x0e.track.FiltersR\afilters\"\x1a\n" +
	"\bStreamID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"j\n" +
	"\x15TrackStreamCreateData\x12)\n" +
	"\btrack_id\x18\x01 \x01(\v2\x0e.track.TrackIDR\atrackId\x12&\n" +
	"\auser_id\x18\x02 \x01(\v2\r.track.UserIDR\x06userId\"\x89\x01\n" +
	"\x15TrackStreamUpdateData\x12,\n" +
	"\tstream_id\x18\x01 \x01(\v2\x0f.track.StreamIDR\bstreamId\x12&\n" +
	"\auser_id\x18\x02 \x01(\v2\r.track.UserIDR\x06userId\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x03R\bduration\"d\n" +
	"\vTrackStream\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12)\n" +
	"\btrack_id\x18\x02 \x01(\v2\x0e.track.TrackIDR\atrackId\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x03R\bduration\"?\n" +
	"\x0fTrackStreamList\x12,\n" +
	"\astreams\x18\x01 \x03(\v2\x12.track.TrackStreamR\astreams\"x\n" +
	"\x1aTrackStreamListWithFilters\x120\n" +
	"\astreams\x18\x01 \x01(\v2\x16.track.TrackStreamListR\astreams\x12(\n" +
	"\afilters\x18\x02 \x01(\v2\x0e.track.FiltersR\afilters\"N\n" +
	"\rTrackDetailed\x12\"\n" +
	"\x05track\x18\x01 \x01(\v2\f.track.TrackR\x05track\x12\x19\n" +
	"\bfile_url\x18\x02 \x01(\tR\afileUrl\":\n" +
	"\n" +
	"Pagination\x12\x16\n" +
	"\x06offset\x18\x01 \x01(\x03R\x06offset\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x03R\x05limit\"<\n" +
	"\aFilters\x121\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2\x11.track.PaginationR\n" +
	"pagination2\xcb\x03\n" +
	"\fTrackService\x120\n" +
	"\fGetAllTracks\x12\x0e.track.Filters\x1a\x10.track.TrackList\x124\n" +
	"\fGetTrackByID\x12\x0e.track.TrackID\x1a\x14.track.TrackDetailed\x12=\n" +
	"\fCreateStream\x12\x1c.track.TrackStreamCreateData\x1a\x0f.track.StreamID\x12L\n" +
	"\x14UpdateStreamDuration\x12\x1c.track.TrackStreamUpdateData\x1a\x16.google.protobuf.Empty\x12C\n" +
	"\x15GetLastListenedTracks\x12\x18.track.UserIDWithFilters\x1a\x10.track.TrackList\x126\n" +
	"\x0eGetTracksByIDs\x12\x12.track.TrackIDList\x1a\x10.track.TrackList\x12I\n" +
	"\x16GetTracksByIDsFiltered\x12\x1d.track.TrackIDListWithFilters\x1a\x10.track.TrackListB\tZ\a./trackb\x06proto3"

var (
	file_track_track_proto_rawDescOnce sync.Once
	file_track_track_proto_rawDescData []byte
)

func file_track_track_proto_rawDescGZIP() []byte {
	file_track_track_proto_rawDescOnce.Do(func() {
		file_track_track_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_track_track_proto_rawDesc), len(file_track_track_proto_rawDesc)))
	})
	return file_track_track_proto_rawDescData
}

var file_track_track_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_track_track_proto_goTypes = []any{
	(*Track)(nil),                      // 0: track.Track
	(*TrackList)(nil),                  // 1: track.TrackList
	(*TrackID)(nil),                    // 2: track.TrackID
	(*TrackIDList)(nil),                // 3: track.TrackIDList
	(*TrackIDListWithFilters)(nil),     // 4: track.TrackIDListWithFilters
	(*UserID)(nil),                     // 5: track.UserID
	(*UserIDWithFilters)(nil),          // 6: track.UserIDWithFilters
	(*StreamID)(nil),                   // 7: track.StreamID
	(*TrackStreamCreateData)(nil),      // 8: track.TrackStreamCreateData
	(*TrackStreamUpdateData)(nil),      // 9: track.TrackStreamUpdateData
	(*TrackStream)(nil),                // 10: track.TrackStream
	(*TrackStreamList)(nil),            // 11: track.TrackStreamList
	(*TrackStreamListWithFilters)(nil), // 12: track.TrackStreamListWithFilters
	(*TrackDetailed)(nil),              // 13: track.TrackDetailed
	(*Pagination)(nil),                 // 14: track.Pagination
	(*Filters)(nil),                    // 15: track.Filters
	(*emptypb.Empty)(nil),              // 16: google.protobuf.Empty
}
var file_track_track_proto_depIdxs = []int32{
	0,  // 0: track.TrackList.tracks:type_name -> track.Track
	2,  // 1: track.TrackIDList.ids:type_name -> track.TrackID
	3,  // 2: track.TrackIDListWithFilters.ids:type_name -> track.TrackIDList
	15, // 3: track.TrackIDListWithFilters.filters:type_name -> track.Filters
	5,  // 4: track.UserIDWithFilters.user_id:type_name -> track.UserID
	15, // 5: track.UserIDWithFilters.filters:type_name -> track.Filters
	2,  // 6: track.TrackStreamCreateData.track_id:type_name -> track.TrackID
	5,  // 7: track.TrackStreamCreateData.user_id:type_name -> track.UserID
	7,  // 8: track.TrackStreamUpdateData.stream_id:type_name -> track.StreamID
	5,  // 9: track.TrackStreamUpdateData.user_id:type_name -> track.UserID
	2,  // 10: track.TrackStream.track_id:type_name -> track.TrackID
	10, // 11: track.TrackStreamList.streams:type_name -> track.TrackStream
	11, // 12: track.TrackStreamListWithFilters.streams:type_name -> track.TrackStreamList
	15, // 13: track.TrackStreamListWithFilters.filters:type_name -> track.Filters
	0,  // 14: track.TrackDetailed.track:type_name -> track.Track
	14, // 15: track.Filters.pagination:type_name -> track.Pagination
	15, // 16: track.TrackService.GetAllTracks:input_type -> track.Filters
	2,  // 17: track.TrackService.GetTrackByID:input_type -> track.TrackID
	8,  // 18: track.TrackService.CreateStream:input_type -> track.TrackStreamCreateData
	9,  // 19: track.TrackService.UpdateStreamDuration:input_type -> track.TrackStreamUpdateData
	6,  // 20: track.TrackService.GetLastListenedTracks:input_type -> track.UserIDWithFilters
	3,  // 21: track.TrackService.GetTracksByIDs:input_type -> track.TrackIDList
	4,  // 22: track.TrackService.GetTracksByIDsFiltered:input_type -> track.TrackIDListWithFilters
	1,  // 23: track.TrackService.GetAllTracks:output_type -> track.TrackList
	13, // 24: track.TrackService.GetTrackByID:output_type -> track.TrackDetailed
	7,  // 25: track.TrackService.CreateStream:output_type -> track.StreamID
	16, // 26: track.TrackService.UpdateStreamDuration:output_type -> google.protobuf.Empty
	1,  // 27: track.TrackService.GetLastListenedTracks:output_type -> track.TrackList
	1,  // 28: track.TrackService.GetTracksByIDs:output_type -> track.TrackList
	1,  // 29: track.TrackService.GetTracksByIDsFiltered:output_type -> track.TrackList
	23, // [23:30] is the sub-list for method output_type
	16, // [16:23] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_track_track_proto_init() }
func file_track_track_proto_init() {
	if File_track_track_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_track_track_proto_rawDesc), len(file_track_track_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_track_track_proto_goTypes,
		DependencyIndexes: file_track_track_proto_depIdxs,
		MessageInfos:      file_track_track_proto_msgTypes,
	}.Build()
	File_track_track_proto = out.File
	file_track_track_proto_goTypes = nil
	file_track_track_proto_depIdxs = nil
}
