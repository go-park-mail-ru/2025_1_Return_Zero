// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.1
// source: track/track.proto

package track

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrackIdsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []*TrackID             `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackIdsList) Reset() {
	*x = TrackIdsList{}
	mi := &file_track_track_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackIdsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIdsList) ProtoMessage() {}

func (x *TrackIdsList) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIdsList.ProtoReflect.Descriptor instead.
func (*TrackIdsList) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{0}
}

func (x *TrackIdsList) GetIds() []*TrackID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type TrackLoad struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	File          []byte                 `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackLoad) Reset() {
	*x = TrackLoad{}
	mi := &file_track_track_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackLoad) ProtoMessage() {}

func (x *TrackLoad) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackLoad.ProtoReflect.Descriptor instead.
func (*TrackLoad) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{1}
}

func (x *TrackLoad) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TrackLoad) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type TracksListWithAlbumID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        []*TrackLoad           `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	AlbumId       *AlbumID               `protobuf:"bytes,2,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	Cover         []byte                 `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracksListWithAlbumID) Reset() {
	*x = TracksListWithAlbumID{}
	mi := &file_track_track_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracksListWithAlbumID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracksListWithAlbumID) ProtoMessage() {}

func (x *TracksListWithAlbumID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracksListWithAlbumID.ProtoReflect.Descriptor instead.
func (*TracksListWithAlbumID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{2}
}

func (x *TracksListWithAlbumID) GetTracks() []*TrackLoad {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *TracksListWithAlbumID) GetAlbumId() *AlbumID {
	if x != nil {
		return x.AlbumId
	}
	return nil
}

func (x *TracksListWithAlbumID) GetCover() []byte {
	if x != nil {
		return x.Cover
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	UserId        *UserID                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Query) Reset() {
	*x = Query{}
	mi := &file_track_track_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{3}
}

func (x *Query) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Query) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type AlbumID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlbumID) Reset() {
	*x = AlbumID{}
	mi := &file_track_track_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlbumID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumID) ProtoMessage() {}

func (x *AlbumID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumID.ProtoReflect.Descriptor instead.
func (*AlbumID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{4}
}

func (x *AlbumID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AlbumIDWithUserID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AlbumId       *AlbumID               `protobuf:"bytes,1,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	UserId        *UserID                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlbumIDWithUserID) Reset() {
	*x = AlbumIDWithUserID{}
	mi := &file_track_track_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlbumIDWithUserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumIDWithUserID) ProtoMessage() {}

func (x *AlbumIDWithUserID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumIDWithUserID.ProtoReflect.Descriptor instead.
func (*AlbumIDWithUserID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{5}
}

func (x *AlbumIDWithUserID) GetAlbumId() *AlbumID {
	if x != nil {
		return x.AlbumId
	}
	return nil
}

func (x *AlbumIDWithUserID) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type MinutesListened struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Minutes       int64                  `protobuf:"varint,1,opt,name=minutes,proto3" json:"minutes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MinutesListened) Reset() {
	*x = MinutesListened{}
	mi := &file_track_track_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MinutesListened) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinutesListened) ProtoMessage() {}

func (x *MinutesListened) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinutesListened.ProtoReflect.Descriptor instead.
func (*MinutesListened) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{6}
}

func (x *MinutesListened) GetMinutes() int64 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

type TracksListened struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        int64                  `protobuf:"varint,1,opt,name=tracks,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracksListened) Reset() {
	*x = TracksListened{}
	mi := &file_track_track_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracksListened) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracksListened) ProtoMessage() {}

func (x *TracksListened) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracksListened.ProtoReflect.Descriptor instead.
func (*TracksListened) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{7}
}

func (x *TracksListened) GetTracks() int64 {
	if x != nil {
		return x.Tracks
	}
	return 0
}

type Track struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail     string                 `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Duration      int64                  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	AlbumId       int64                  `protobuf:"varint,5,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	IsFavorite    bool                   `protobuf:"varint,6,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Track) Reset() {
	*x = Track{}
	mi := &file_track_track_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{8}
}

func (x *Track) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Track) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Track) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *Track) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Track) GetAlbumId() int64 {
	if x != nil {
		return x.AlbumId
	}
	return 0
}

func (x *Track) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type TrackList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tracks        []*Track               `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackList) Reset() {
	*x = TrackList{}
	mi := &file_track_track_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackList) ProtoMessage() {}

func (x *TrackList) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackList.ProtoReflect.Descriptor instead.
func (*TrackList) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{9}
}

func (x *TrackList) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type TrackID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackID) Reset() {
	*x = TrackID{}
	mi := &file_track_track_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackID) ProtoMessage() {}

func (x *TrackID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackID.ProtoReflect.Descriptor instead.
func (*TrackID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{10}
}

func (x *TrackID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TrackIDWithUserID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackId       *TrackID               `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	UserId        *UserID                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackIDWithUserID) Reset() {
	*x = TrackIDWithUserID{}
	mi := &file_track_track_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackIDWithUserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIDWithUserID) ProtoMessage() {}

func (x *TrackIDWithUserID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIDWithUserID.ProtoReflect.Descriptor instead.
func (*TrackIDWithUserID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{11}
}

func (x *TrackIDWithUserID) GetTrackId() *TrackID {
	if x != nil {
		return x.TrackId
	}
	return nil
}

func (x *TrackIDWithUserID) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TrackIDList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *UserID                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids           []*TrackID             `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackIDList) Reset() {
	*x = TrackIDList{}
	mi := &file_track_track_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIDList) ProtoMessage() {}

func (x *TrackIDList) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIDList.ProtoReflect.Descriptor instead.
func (*TrackIDList) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{12}
}

func (x *TrackIDList) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TrackIDList) GetIds() []*TrackID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type TrackIDListWithFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           *TrackIDList           `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	Filters       *Filters               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackIDListWithFilters) Reset() {
	*x = TrackIDListWithFilters{}
	mi := &file_track_track_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackIDListWithFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIDListWithFilters) ProtoMessage() {}

func (x *TrackIDListWithFilters) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIDListWithFilters.ProtoReflect.Descriptor instead.
func (*TrackIDListWithFilters) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{13}
}

func (x *TrackIDListWithFilters) GetIds() *TrackIDList {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *TrackIDListWithFilters) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type UserID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserID) Reset() {
	*x = UserID{}
	mi := &file_track_track_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{14}
}

func (x *UserID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserIDWithFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *UserID                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Filters       *Filters               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserIDWithFilters) Reset() {
	*x = UserIDWithFilters{}
	mi := &file_track_track_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIDWithFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDWithFilters) ProtoMessage() {}

func (x *UserIDWithFilters) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDWithFilters.ProtoReflect.Descriptor instead.
func (*UserIDWithFilters) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{15}
}

func (x *UserIDWithFilters) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *UserIDWithFilters) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type StreamID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamID) Reset() {
	*x = StreamID{}
	mi := &file_track_track_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamID) ProtoMessage() {}

func (x *StreamID) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamID.ProtoReflect.Descriptor instead.
func (*StreamID) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{16}
}

func (x *StreamID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TrackStreamCreateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackId       *TrackID               `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	UserId        *UserID                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStreamCreateData) Reset() {
	*x = TrackStreamCreateData{}
	mi := &file_track_track_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStreamCreateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStreamCreateData) ProtoMessage() {}

func (x *TrackStreamCreateData) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStreamCreateData.ProtoReflect.Descriptor instead.
func (*TrackStreamCreateData) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{17}
}

func (x *TrackStreamCreateData) GetTrackId() *TrackID {
	if x != nil {
		return x.TrackId
	}
	return nil
}

func (x *TrackStreamCreateData) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type TrackStreamUpdateData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      *StreamID              `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	UserId        *UserID                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Duration      int64                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStreamUpdateData) Reset() {
	*x = TrackStreamUpdateData{}
	mi := &file_track_track_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStreamUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStreamUpdateData) ProtoMessage() {}

func (x *TrackStreamUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStreamUpdateData.ProtoReflect.Descriptor instead.
func (*TrackStreamUpdateData) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{18}
}

func (x *TrackStreamUpdateData) GetStreamId() *StreamID {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *TrackStreamUpdateData) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *TrackStreamUpdateData) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TrackStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TrackId       *TrackID               `protobuf:"bytes,2,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	Duration      int64                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStream) Reset() {
	*x = TrackStream{}
	mi := &file_track_track_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStream) ProtoMessage() {}

func (x *TrackStream) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStream.ProtoReflect.Descriptor instead.
func (*TrackStream) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{19}
}

func (x *TrackStream) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TrackStream) GetTrackId() *TrackID {
	if x != nil {
		return x.TrackId
	}
	return nil
}

func (x *TrackStream) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TrackStreamList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       []*TrackStream         `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStreamList) Reset() {
	*x = TrackStreamList{}
	mi := &file_track_track_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStreamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStreamList) ProtoMessage() {}

func (x *TrackStreamList) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStreamList.ProtoReflect.Descriptor instead.
func (*TrackStreamList) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{20}
}

func (x *TrackStreamList) GetStreams() []*TrackStream {
	if x != nil {
		return x.Streams
	}
	return nil
}

type TrackStreamListWithFilters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       *TrackStreamList       `protobuf:"bytes,1,opt,name=streams,proto3" json:"streams,omitempty"`
	Filters       *Filters               `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackStreamListWithFilters) Reset() {
	*x = TrackStreamListWithFilters{}
	mi := &file_track_track_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackStreamListWithFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackStreamListWithFilters) ProtoMessage() {}

func (x *TrackStreamListWithFilters) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackStreamListWithFilters.ProtoReflect.Descriptor instead.
func (*TrackStreamListWithFilters) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{21}
}

func (x *TrackStreamListWithFilters) GetStreams() *TrackStreamList {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *TrackStreamListWithFilters) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

type TrackDetailed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Track         *Track                 `protobuf:"bytes,1,opt,name=track,proto3" json:"track,omitempty"`
	FileUrl       string                 `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackDetailed) Reset() {
	*x = TrackDetailed{}
	mi := &file_track_track_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackDetailed) ProtoMessage() {}

func (x *TrackDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackDetailed.ProtoReflect.Descriptor instead.
func (*TrackDetailed) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{22}
}

func (x *TrackDetailed) GetTrack() *Track {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *TrackDetailed) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        int64                  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_track_track_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{23}
}

func (x *Pagination) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Filters struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Pagination            `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filters) Reset() {
	*x = Filters{}
	mi := &file_track_track_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{24}
}

func (x *Filters) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type LikeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackId       *TrackID               `protobuf:"bytes,1,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	UserId        *UserID                `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsLike        bool                   `protobuf:"varint,3,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LikeRequest) Reset() {
	*x = LikeRequest{}
	mi := &file_track_track_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeRequest) ProtoMessage() {}

func (x *LikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeRequest.ProtoReflect.Descriptor instead.
func (*LikeRequest) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{25}
}

func (x *LikeRequest) GetTrackId() *TrackID {
	if x != nil {
		return x.TrackId
	}
	return nil
}

func (x *LikeRequest) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *LikeRequest) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

type FavoriteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProfileUserId *UserID                `protobuf:"bytes,1,opt,name=profile_user_id,json=profileUserId,proto3" json:"profile_user_id,omitempty"`
	RequestUserId *UserID                `protobuf:"bytes,2,opt,name=request_user_id,json=requestUserId,proto3" json:"request_user_id,omitempty"`
	Filters       *Filters               `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FavoriteRequest) Reset() {
	*x = FavoriteRequest{}
	mi := &file_track_track_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FavoriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FavoriteRequest) ProtoMessage() {}

func (x *FavoriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_track_track_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FavoriteRequest.ProtoReflect.Descriptor instead.
func (*FavoriteRequest) Descriptor() ([]byte, []int) {
	return file_track_track_proto_rawDescGZIP(), []int{26}
}

func (x *FavoriteRequest) GetProfileUserId() *UserID {
	if x != nil {
		return x.ProfileUserId
	}
	return nil
}

func (x *FavoriteRequest) GetRequestUserId() *UserID {
	if x != nil {
		return x.RequestUserId
	}
	return nil
}

func (x *FavoriteRequest) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

var File_track_track_proto protoreflect.FileDescriptor

const file_track_track_proto_rawDesc = "" +
	"\n" +
	"\x11track/track.proto\x12\x05track\x1a\x1bgoogle/protobuf/empty.proto\"0\n" +
	"\fTrackIdsList\x12 \n" +
	"\x03ids\x18\x01 \x03(\v2\x0e.track.TrackIDR\x03ids\"5\n" +
	"\tTrackLoad\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x12\n" +
	"\x04file\x18\x02 \x01(\fR\x04file\"\x82\x01\n" +
	"\x15TracksListWithAlbumID\x12(\n" +
	"\x06tracks\x18\x01 \x03(\v2\x10.track.TrackLoadR\x06tracks\x12)\n" +
	"\balbum_id\x18\x02 \x01(\v2\x0e.track.AlbumIDR\aalbumId\x12\x14\n" +
	"\x05cover\x18\x03 \x01(\fR\x05cover\"E\n" +
	"\x05Query\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12&\n" +
	"\auser_id\x18\x02 \x01(\v2\r.track.UserIDR\x06userId\"\x19\n" +
	"\aAlbumID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"f\n" +
	"\x11AlbumIDWithUserID\x12)\n" +
	"\balbum_id\x18\x01 \x01(\v2\x0e.track.AlbumIDR\aalbumId\x12&\n" +
	"\auser_id\x18\x02 \x01(\v2\r.track.UserIDR\x06userId\"+\n" +
	"\x0fMinutesListened\x12\x18\n" +
	"\aminutes\x18\x01 \x01(\x03R\aminutes\"(\n" +
	"\x0eTracksListened\x12\x16\n" +
	"\x06tracks\x18\x01 \x01(\x03R\x06tracks\"\xa3\x01\n" +
	"\x05Track\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1c\n" +
	"\tthumbnail\x18\x03 \x01(\tR\tthumbnail\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\x03R\bduration\x12\x19\n" +
	"\balbum_id\x18\x05 \x01(\x03R\aalbumId\x12\x1f\n" +
	"\vis_favorite\x18\x06 \x01(\bR\n" +
	"isFavorite\"1\n" +
	"\tTrackList\x12$\n" +
	"\x06tracks\x18\x01 \x03(\v2\f.track.TrackR\x06tracks\"\x19\n" +
	"\aTrackID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"f\n" +
	"\x11TrackIDWithUserID\x12)\n" +
	"\btrack_id\x18\x01 \x01(\v2\x0e.track.TrackIDR\atrackId\x12&\n" +
	"\auser_id\x18\x02 \x01(\v2\r.track.UserIDR\x06userId\"W\n" +
	"\vTrackIDList\x12&\n" +
	"\auser_id\x18\x01 \x01(\v2\r.track.UserIDR\x06userId\x12 \n" +
	"\x03ids\x18\x02 \x03(\v2\x0e.track.TrackIDR\x03ids\"h\n" +
	"\x16TrackIDListWithFilters\x12$\n" +
	"\x03ids\x18\x01 \x01(\v2\x12.track.TrackIDListR\x03ids\x12(\n" +
	"\afilters\x18\x02 \x01(\v2\x0e.track.FiltersR\afilters\"\x18\n" +
	"\x06UserID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"e\n" +
	"\x11UserIDWithFilters\x12&\n" +
	"\auser_id\x18\x01 \x01(\v2\r.track.UserIDR\x06userId\x12(\n" +
	"\afilters\x18\x02 \x01(\v2\x0e.track.FiltersR\afilters\"\x1a\n" +
	"\bStreamID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"j\n" +
	"\x15TrackStreamCreateData\x12)\n" +
	"\btrack_id\x18\x01 \x01(\v2\x0e.track.TrackIDR\atrackId\x12&\n" +
	"\auser_id\x18\x02 \x01(\v2\r.track.UserIDR\x06userId\"\x89\x01\n" +
	"\x15TrackStreamUpdateData\x12,\n" +
	"\tstream_id\x18\x01 \x01(\v2\x0f.track.StreamIDR\bstreamId\x12&\n" +
	"\auser_id\x18\x02 \x01(\v2\r.track.UserIDR\x06userId\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x03R\bduration\"d\n" +
	"\vTrackStream\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12)\n" +
	"\btrack_id\x18\x02 \x01(\v2\x0e.track.TrackIDR\atrackId\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x03R\bduration\"?\n" +
	"\x0fTrackStreamList\x12,\n" +
	"\astreams\x18\x01 \x03(\v2\x12.track.TrackStreamR\astreams\"x\n" +
	"\x1aTrackStreamListWithFilters\x120\n" +
	"\astreams\x18\x01 \x01(\v2\x16.track.TrackStreamListR\astreams\x12(\n" +
	"\afilters\x18\x02 \x01(\v2\x0e.track.FiltersR\afilters\"N\n" +
	"\rTrackDetailed\x12\"\n" +
	"\x05track\x18\x01 \x01(\v2\f.track.TrackR\x05track\x12\x19\n" +
	"\bfile_url\x18\x02 \x01(\tR\afileUrl\":\n" +
	"\n" +
	"Pagination\x12\x16\n" +
	"\x06offset\x18\x01 \x01(\x03R\x06offset\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x03R\x05limit\"<\n" +
	"\aFilters\x121\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2\x11.track.PaginationR\n" +
	"pagination\"y\n" +
	"\vLikeRequest\x12)\n" +
	"\btrack_id\x18\x01 \x01(\v2\x0e.track.TrackIDR\atrackId\x12&\n" +
	"\auser_id\x18\x02 \x01(\v2\r.track.UserIDR\x06userId\x12\x17\n" +
	"\ais_like\x18\x03 \x01(\bR\x06isLike\"\xa9\x01\n" +
	"\x0fFavoriteRequest\x125\n" +
	"\x0fprofile_user_id\x18\x01 \x01(\v2\r.track.UserIDR\rprofileUserId\x125\n" +
	"\x0frequest_user_id\x18\x02 \x01(\v2\r.track.UserIDR\rrequestUserId\x12(\n" +
	"\afilters\x18\x03 \x01(\v2\x0e.track.FiltersR\afilters2\x81\n" +
	"\n" +
	"\fTrackService\x12:\n" +
	"\fGetAllTracks\x12\x18.track.UserIDWithFilters\x1a\x10.track.TrackList\x12>\n" +
	"\fGetTrackByID\x12\x18.track.TrackIDWithUserID\x1a\x14.track.TrackDetailed\x12=\n" +
	"\fCreateStream\x12\x1c.track.TrackStreamCreateData\x1a\x0f.track.StreamID\x12L\n" +
	"\x14UpdateStreamDuration\x12\x1c.track.TrackStreamUpdateData\x1a\x16.google.protobuf.Empty\x12C\n" +
	"\x15GetLastListenedTracks\x12\x18.track.UserIDWithFilters\x1a\x10.track.TrackList\x126\n" +
	"\x0eGetTracksByIDs\x12\x12.track.TrackIDList\x1a\x10.track.TrackList\x12I\n" +
	"\x16GetTracksByIDsFiltered\x12\x1d.track.TrackIDListWithFilters\x1a\x10.track.TrackList\x125\n" +
	"\x13GetAlbumIDByTrackID\x12\x0e.track.TrackID\x1a\x0e.track.AlbumID\x12@\n" +
	"\x12GetTracksByAlbumID\x12\x18.track.AlbumIDWithUserID\x1a\x10.track.TrackList\x12C\n" +
	"\x1aGetMinutesListenedByUserID\x12\r.track.UserID\x1a\x16.track.MinutesListened\x12A\n" +
	"\x19GetTracksListenedByUserID\x12\r.track.UserID\x1a\x15.track.TracksListened\x127\n" +
	"\tLikeTrack\x12\x12.track.LikeRequest\x1a\x16.google.protobuf.Empty\x12.\n" +
	"\fSearchTracks\x12\f.track.Query\x1a\x10.track.TrackList\x12=\n" +
	"\x11GetFavoriteTracks\x12\x16.track.FavoriteRequest\x1a\x10.track.TrackList\x12E\n" +
	"\x10AddTracksToAlbum\x12\x1c.track.TracksListWithAlbumID\x1a\x13.track.TrackIdsList\x12?\n" +
	"\x15DeleteTracksByAlbumID\x12\x0e.track.AlbumID\x1a\x16.google.protobuf.Empty\x125\n" +
	"\x12GetMostLikedTracks\x12\r.track.UserID\x1a\x10.track.TrackList\x12=\n" +
	"\x1aGetMostLikedLastWeekTracks\x12\r.track.UserID\x1a\x10.track.TrackList\x12A\n" +
	"\x1eGetMostListenedLastMonthTracks\x12\r.track.UserID\x1a\x10.track.TrackList\x126\n" +
	"\x13GetMostRecentTracks\x12\r.track.UserID\x1a\x10.track.TrackListB\tZ\a./trackb\x06proto3"

var (
	file_track_track_proto_rawDescOnce sync.Once
	file_track_track_proto_rawDescData []byte
)

func file_track_track_proto_rawDescGZIP() []byte {
	file_track_track_proto_rawDescOnce.Do(func() {
		file_track_track_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_track_track_proto_rawDesc), len(file_track_track_proto_rawDesc)))
	})
	return file_track_track_proto_rawDescData
}

var file_track_track_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_track_track_proto_goTypes = []any{
	(*TrackIdsList)(nil),               // 0: track.TrackIdsList
	(*TrackLoad)(nil),                  // 1: track.TrackLoad
	(*TracksListWithAlbumID)(nil),      // 2: track.TracksListWithAlbumID
	(*Query)(nil),                      // 3: track.Query
	(*AlbumID)(nil),                    // 4: track.AlbumID
	(*AlbumIDWithUserID)(nil),          // 5: track.AlbumIDWithUserID
	(*MinutesListened)(nil),            // 6: track.MinutesListened
	(*TracksListened)(nil),             // 7: track.TracksListened
	(*Track)(nil),                      // 8: track.Track
	(*TrackList)(nil),                  // 9: track.TrackList
	(*TrackID)(nil),                    // 10: track.TrackID
	(*TrackIDWithUserID)(nil),          // 11: track.TrackIDWithUserID
	(*TrackIDList)(nil),                // 12: track.TrackIDList
	(*TrackIDListWithFilters)(nil),     // 13: track.TrackIDListWithFilters
	(*UserID)(nil),                     // 14: track.UserID
	(*UserIDWithFilters)(nil),          // 15: track.UserIDWithFilters
	(*StreamID)(nil),                   // 16: track.StreamID
	(*TrackStreamCreateData)(nil),      // 17: track.TrackStreamCreateData
	(*TrackStreamUpdateData)(nil),      // 18: track.TrackStreamUpdateData
	(*TrackStream)(nil),                // 19: track.TrackStream
	(*TrackStreamList)(nil),            // 20: track.TrackStreamList
	(*TrackStreamListWithFilters)(nil), // 21: track.TrackStreamListWithFilters
	(*TrackDetailed)(nil),              // 22: track.TrackDetailed
	(*Pagination)(nil),                 // 23: track.Pagination
	(*Filters)(nil),                    // 24: track.Filters
	(*LikeRequest)(nil),                // 25: track.LikeRequest
	(*FavoriteRequest)(nil),            // 26: track.FavoriteRequest
	(*emptypb.Empty)(nil),              // 27: google.protobuf.Empty
}
var file_track_track_proto_depIdxs = []int32{
	10, // 0: track.TrackIdsList.ids:type_name -> track.TrackID
	1,  // 1: track.TracksListWithAlbumID.tracks:type_name -> track.TrackLoad
	4,  // 2: track.TracksListWithAlbumID.album_id:type_name -> track.AlbumID
	14, // 3: track.Query.user_id:type_name -> track.UserID
	4,  // 4: track.AlbumIDWithUserID.album_id:type_name -> track.AlbumID
	14, // 5: track.AlbumIDWithUserID.user_id:type_name -> track.UserID
	8,  // 6: track.TrackList.tracks:type_name -> track.Track
	10, // 7: track.TrackIDWithUserID.track_id:type_name -> track.TrackID
	14, // 8: track.TrackIDWithUserID.user_id:type_name -> track.UserID
	14, // 9: track.TrackIDList.user_id:type_name -> track.UserID
	10, // 10: track.TrackIDList.ids:type_name -> track.TrackID
	12, // 11: track.TrackIDListWithFilters.ids:type_name -> track.TrackIDList
	24, // 12: track.TrackIDListWithFilters.filters:type_name -> track.Filters
	14, // 13: track.UserIDWithFilters.user_id:type_name -> track.UserID
	24, // 14: track.UserIDWithFilters.filters:type_name -> track.Filters
	10, // 15: track.TrackStreamCreateData.track_id:type_name -> track.TrackID
	14, // 16: track.TrackStreamCreateData.user_id:type_name -> track.UserID
	16, // 17: track.TrackStreamUpdateData.stream_id:type_name -> track.StreamID
	14, // 18: track.TrackStreamUpdateData.user_id:type_name -> track.UserID
	10, // 19: track.TrackStream.track_id:type_name -> track.TrackID
	19, // 20: track.TrackStreamList.streams:type_name -> track.TrackStream
	20, // 21: track.TrackStreamListWithFilters.streams:type_name -> track.TrackStreamList
	24, // 22: track.TrackStreamListWithFilters.filters:type_name -> track.Filters
	8,  // 23: track.TrackDetailed.track:type_name -> track.Track
	23, // 24: track.Filters.pagination:type_name -> track.Pagination
	10, // 25: track.LikeRequest.track_id:type_name -> track.TrackID
	14, // 26: track.LikeRequest.user_id:type_name -> track.UserID
	14, // 27: track.FavoriteRequest.profile_user_id:type_name -> track.UserID
	14, // 28: track.FavoriteRequest.request_user_id:type_name -> track.UserID
	24, // 29: track.FavoriteRequest.filters:type_name -> track.Filters
	15, // 30: track.TrackService.GetAllTracks:input_type -> track.UserIDWithFilters
	11, // 31: track.TrackService.GetTrackByID:input_type -> track.TrackIDWithUserID
	17, // 32: track.TrackService.CreateStream:input_type -> track.TrackStreamCreateData
	18, // 33: track.TrackService.UpdateStreamDuration:input_type -> track.TrackStreamUpdateData
	15, // 34: track.TrackService.GetLastListenedTracks:input_type -> track.UserIDWithFilters
	12, // 35: track.TrackService.GetTracksByIDs:input_type -> track.TrackIDList
	13, // 36: track.TrackService.GetTracksByIDsFiltered:input_type -> track.TrackIDListWithFilters
	10, // 37: track.TrackService.GetAlbumIDByTrackID:input_type -> track.TrackID
	5,  // 38: track.TrackService.GetTracksByAlbumID:input_type -> track.AlbumIDWithUserID
	14, // 39: track.TrackService.GetMinutesListenedByUserID:input_type -> track.UserID
	14, // 40: track.TrackService.GetTracksListenedByUserID:input_type -> track.UserID
	25, // 41: track.TrackService.LikeTrack:input_type -> track.LikeRequest
	3,  // 42: track.TrackService.SearchTracks:input_type -> track.Query
	26, // 43: track.TrackService.GetFavoriteTracks:input_type -> track.FavoriteRequest
	2,  // 44: track.TrackService.AddTracksToAlbum:input_type -> track.TracksListWithAlbumID
	4,  // 45: track.TrackService.DeleteTracksByAlbumID:input_type -> track.AlbumID
	14, // 46: track.TrackService.GetMostLikedTracks:input_type -> track.UserID
	14, // 47: track.TrackService.GetMostLikedLastWeekTracks:input_type -> track.UserID
	14, // 48: track.TrackService.GetMostListenedLastMonthTracks:input_type -> track.UserID
	14, // 49: track.TrackService.GetMostRecentTracks:input_type -> track.UserID
	9,  // 50: track.TrackService.GetAllTracks:output_type -> track.TrackList
	22, // 51: track.TrackService.GetTrackByID:output_type -> track.TrackDetailed
	16, // 52: track.TrackService.CreateStream:output_type -> track.StreamID
	27, // 53: track.TrackService.UpdateStreamDuration:output_type -> google.protobuf.Empty
	9,  // 54: track.TrackService.GetLastListenedTracks:output_type -> track.TrackList
	9,  // 55: track.TrackService.GetTracksByIDs:output_type -> track.TrackList
	9,  // 56: track.TrackService.GetTracksByIDsFiltered:output_type -> track.TrackList
	4,  // 57: track.TrackService.GetAlbumIDByTrackID:output_type -> track.AlbumID
	9,  // 58: track.TrackService.GetTracksByAlbumID:output_type -> track.TrackList
	6,  // 59: track.TrackService.GetMinutesListenedByUserID:output_type -> track.MinutesListened
	7,  // 60: track.TrackService.GetTracksListenedByUserID:output_type -> track.TracksListened
	27, // 61: track.TrackService.LikeTrack:output_type -> google.protobuf.Empty
	9,  // 62: track.TrackService.SearchTracks:output_type -> track.TrackList
	9,  // 63: track.TrackService.GetFavoriteTracks:output_type -> track.TrackList
	0,  // 64: track.TrackService.AddTracksToAlbum:output_type -> track.TrackIdsList
	27, // 65: track.TrackService.DeleteTracksByAlbumID:output_type -> google.protobuf.Empty
	9,  // 66: track.TrackService.GetMostLikedTracks:output_type -> track.TrackList
	9,  // 67: track.TrackService.GetMostLikedLastWeekTracks:output_type -> track.TrackList
	9,  // 68: track.TrackService.GetMostListenedLastMonthTracks:output_type -> track.TrackList
	9,  // 69: track.TrackService.GetMostRecentTracks:output_type -> track.TrackList
	50, // [50:70] is the sub-list for method output_type
	30, // [30:50] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_track_track_proto_init() }
func file_track_track_proto_init() {
	if File_track_track_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_track_track_proto_rawDesc), len(file_track_track_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_track_track_proto_goTypes,
		DependencyIndexes: file_track_track_proto_depIdxs,
		MessageInfos:      file_track_track_proto_msgTypes,
	}.Build()
	File_track_track_proto = out.File
	file_track_track_proto_goTypes = nil
	file_track_track_proto_depIdxs = nil
}
