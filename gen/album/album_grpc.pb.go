// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package album

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlbumServiceClient is the client API for AlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumServiceClient interface {
	GetAllAlbums(ctx context.Context, in *FiltersWithUserID, opts ...grpc.CallOption) (*AlbumList, error)
	GetAlbumByID(ctx context.Context, in *AlbumIDWithUserID, opts ...grpc.CallOption) (*Album, error)
	GetAlbumTitleByID(ctx context.Context, in *AlbumID, opts ...grpc.CallOption) (*AlbumTitle, error)
	GetAlbumTitleByIDs(ctx context.Context, in *AlbumIDList, opts ...grpc.CallOption) (*AlbumTitleMap, error)
	GetAlbumsByIDs(ctx context.Context, in *AlbumIDListWithUserID, opts ...grpc.CallOption) (*AlbumList, error)
	CreateStream(ctx context.Context, in *AlbumStreamCreateData, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LikeAlbum(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFavoriteAlbums(ctx context.Context, in *FiltersWithUserID, opts ...grpc.CallOption) (*AlbumList, error)
	SearchAlbums(ctx context.Context, in *Query, opts ...grpc.CallOption) (*AlbumList, error)
}

type albumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumServiceClient(cc grpc.ClientConnInterface) AlbumServiceClient {
	return &albumServiceClient{cc}
}

func (c *albumServiceClient) GetAllAlbums(ctx context.Context, in *FiltersWithUserID, opts ...grpc.CallOption) (*AlbumList, error) {
	out := new(AlbumList)
	err := c.cc.Invoke(ctx, "/album.AlbumService/GetAllAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetAlbumByID(ctx context.Context, in *AlbumIDWithUserID, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, "/album.AlbumService/GetAlbumByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetAlbumTitleByID(ctx context.Context, in *AlbumID, opts ...grpc.CallOption) (*AlbumTitle, error) {
	out := new(AlbumTitle)
	err := c.cc.Invoke(ctx, "/album.AlbumService/GetAlbumTitleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetAlbumTitleByIDs(ctx context.Context, in *AlbumIDList, opts ...grpc.CallOption) (*AlbumTitleMap, error) {
	out := new(AlbumTitleMap)
	err := c.cc.Invoke(ctx, "/album.AlbumService/GetAlbumTitleByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetAlbumsByIDs(ctx context.Context, in *AlbumIDListWithUserID, opts ...grpc.CallOption) (*AlbumList, error) {
	out := new(AlbumList)
	err := c.cc.Invoke(ctx, "/album.AlbumService/GetAlbumsByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) CreateStream(ctx context.Context, in *AlbumStreamCreateData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumService/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) LikeAlbum(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/album.AlbumService/LikeAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) GetFavoriteAlbums(ctx context.Context, in *FiltersWithUserID, opts ...grpc.CallOption) (*AlbumList, error) {
	out := new(AlbumList)
	err := c.cc.Invoke(ctx, "/album.AlbumService/GetFavoriteAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumServiceClient) SearchAlbums(ctx context.Context, in *Query, opts ...grpc.CallOption) (*AlbumList, error) {
	out := new(AlbumList)
	err := c.cc.Invoke(ctx, "/album.AlbumService/SearchAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServiceServer is the server API for AlbumService service.
// All implementations must embed UnimplementedAlbumServiceServer
// for forward compatibility
type AlbumServiceServer interface {
	GetAllAlbums(context.Context, *FiltersWithUserID) (*AlbumList, error)
	GetAlbumByID(context.Context, *AlbumIDWithUserID) (*Album, error)
	GetAlbumTitleByID(context.Context, *AlbumID) (*AlbumTitle, error)
	GetAlbumTitleByIDs(context.Context, *AlbumIDList) (*AlbumTitleMap, error)
	GetAlbumsByIDs(context.Context, *AlbumIDListWithUserID) (*AlbumList, error)
	CreateStream(context.Context, *AlbumStreamCreateData) (*emptypb.Empty, error)
	LikeAlbum(context.Context, *LikeRequest) (*emptypb.Empty, error)
	GetFavoriteAlbums(context.Context, *FiltersWithUserID) (*AlbumList, error)
	SearchAlbums(context.Context, *Query) (*AlbumList, error)
	mustEmbedUnimplementedAlbumServiceServer()
}

// UnimplementedAlbumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumServiceServer struct {
}

func (UnimplementedAlbumServiceServer) GetAllAlbums(context.Context, *FiltersWithUserID) (*AlbumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAlbums not implemented")
}
func (UnimplementedAlbumServiceServer) GetAlbumByID(context.Context, *AlbumIDWithUserID) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumByID not implemented")
}
func (UnimplementedAlbumServiceServer) GetAlbumTitleByID(context.Context, *AlbumID) (*AlbumTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumTitleByID not implemented")
}
func (UnimplementedAlbumServiceServer) GetAlbumTitleByIDs(context.Context, *AlbumIDList) (*AlbumTitleMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumTitleByIDs not implemented")
}
func (UnimplementedAlbumServiceServer) GetAlbumsByIDs(context.Context, *AlbumIDListWithUserID) (*AlbumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumsByIDs not implemented")
}
func (UnimplementedAlbumServiceServer) CreateStream(context.Context, *AlbumStreamCreateData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedAlbumServiceServer) LikeAlbum(context.Context, *LikeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeAlbum not implemented")
}
func (UnimplementedAlbumServiceServer) GetFavoriteAlbums(context.Context, *FiltersWithUserID) (*AlbumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteAlbums not implemented")
}
func (UnimplementedAlbumServiceServer) SearchAlbums(context.Context, *Query) (*AlbumList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAlbums not implemented")
}
func (UnimplementedAlbumServiceServer) mustEmbedUnimplementedAlbumServiceServer() {}

// UnsafeAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServiceServer will
// result in compilation errors.
type UnsafeAlbumServiceServer interface {
	mustEmbedUnimplementedAlbumServiceServer()
}

func RegisterAlbumServiceServer(s grpc.ServiceRegistrar, srv AlbumServiceServer) {
	s.RegisterService(&AlbumService_ServiceDesc, srv)
}

func _AlbumService_GetAllAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiltersWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAllAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/GetAllAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAllAlbums(ctx, req.(*FiltersWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetAlbumByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumIDWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbumByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/GetAlbumByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbumByID(ctx, req.(*AlbumIDWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetAlbumTitleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbumTitleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/GetAlbumTitleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbumTitleByID(ctx, req.(*AlbumID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetAlbumTitleByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbumTitleByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/GetAlbumTitleByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbumTitleByIDs(ctx, req.(*AlbumIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetAlbumsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumIDListWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetAlbumsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/GetAlbumsByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetAlbumsByIDs(ctx, req.(*AlbumIDListWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumStreamCreateData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).CreateStream(ctx, req.(*AlbumStreamCreateData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_LikeAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).LikeAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/LikeAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).LikeAlbum(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_GetFavoriteAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiltersWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).GetFavoriteAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/GetFavoriteAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).GetFavoriteAlbums(ctx, req.(*FiltersWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlbumService_SearchAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServiceServer).SearchAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/album.AlbumService/SearchAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServiceServer).SearchAlbums(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// AlbumService_ServiceDesc is the grpc.ServiceDesc for AlbumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlbumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "album.AlbumService",
	HandlerType: (*AlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllAlbums",
			Handler:    _AlbumService_GetAllAlbums_Handler,
		},
		{
			MethodName: "GetAlbumByID",
			Handler:    _AlbumService_GetAlbumByID_Handler,
		},
		{
			MethodName: "GetAlbumTitleByID",
			Handler:    _AlbumService_GetAlbumTitleByID_Handler,
		},
		{
			MethodName: "GetAlbumTitleByIDs",
			Handler:    _AlbumService_GetAlbumTitleByIDs_Handler,
		},
		{
			MethodName: "GetAlbumsByIDs",
			Handler:    _AlbumService_GetAlbumsByIDs_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _AlbumService_CreateStream_Handler,
		},
		{
			MethodName: "LikeAlbum",
			Handler:    _AlbumService_LikeAlbum_Handler,
		},
		{
			MethodName: "GetFavoriteAlbums",
			Handler:    _AlbumService_GetFavoriteAlbums_Handler,
		},
		{
			MethodName: "SearchAlbums",
			Handler:    _AlbumService_SearchAlbums_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "album/album.proto",
}
