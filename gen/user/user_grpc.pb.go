// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *RegisterData, opts ...grpc.CallOption) (*UserFront, error)
	LoginUser(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*UserFront, error)
	GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserFront, error)
	UploadAvatar(ctx context.Context, in *AvatarData, opts ...grpc.CallOption) (*Nothing, error)
	DeleteUser(ctx context.Context, in *UserDelete, opts ...grpc.CallOption) (*Nothing, error)
	ChangeUserData(ctx context.Context, in *ChangeUserDataMessage, opts ...grpc.CallOption) (*Nothing, error)
	ChangeUserPrivacySettings(ctx context.Context, in *PrivacySettings, opts ...grpc.CallOption) (*Nothing, error)
	GetUserFullData(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserFullData, error)
	GetIDByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserID, error)
	GetUserPrivacyByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*PrivacySettings, error)
	GetUserAvatarURL(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*AvatarUrl, error)
	UploadUserAvatar(ctx context.Context, in *AvatarImage, opts ...grpc.CallOption) (*FileKey, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *RegisterData, opts ...grpc.CallOption) (*UserFront, error) {
	out := new(UserFront)
	err := c.cc.Invoke(ctx, "/user.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*UserFront, error) {
	out := new(UserFront)
	err := c.cc.Invoke(ctx, "/user.UserService/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserFront, error) {
	out := new(UserFront)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadAvatar(ctx context.Context, in *AvatarData, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/user.UserService/UploadAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *UserDelete, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/user.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserData(ctx context.Context, in *ChangeUserDataMessage, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/user.UserService/ChangeUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUserPrivacySettings(ctx context.Context, in *PrivacySettings, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/user.UserService/ChangeUserPrivacySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserFullData(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserFullData, error) {
	out := new(UserFullData)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserFullData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetIDByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, "/user.UserService/GetIDByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserPrivacyByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*PrivacySettings, error) {
	out := new(PrivacySettings)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserPrivacyByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserAvatarURL(ctx context.Context, in *FileKey, opts ...grpc.CallOption) (*AvatarUrl, error) {
	out := new(AvatarUrl)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserAvatarURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadUserAvatar(ctx context.Context, in *AvatarImage, opts ...grpc.CallOption) (*FileKey, error) {
	out := new(FileKey)
	err := c.cc.Invoke(ctx, "/user.UserService/UploadUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *RegisterData) (*UserFront, error)
	LoginUser(context.Context, *LoginData) (*UserFront, error)
	GetUserByID(context.Context, *UserID) (*UserFront, error)
	UploadAvatar(context.Context, *AvatarData) (*Nothing, error)
	DeleteUser(context.Context, *UserDelete) (*Nothing, error)
	ChangeUserData(context.Context, *ChangeUserDataMessage) (*Nothing, error)
	ChangeUserPrivacySettings(context.Context, *PrivacySettings) (*Nothing, error)
	GetUserFullData(context.Context, *Username) (*UserFullData, error)
	GetIDByUsername(context.Context, *Username) (*UserID, error)
	GetUserPrivacyByID(context.Context, *UserID) (*PrivacySettings, error)
	GetUserAvatarURL(context.Context, *FileKey) (*AvatarUrl, error)
	UploadUserAvatar(context.Context, *AvatarImage) (*FileKey, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *RegisterData) (*UserFront, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) LoginUser(context.Context, *LoginData) (*UserFront, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserByID(context.Context, *UserID) (*UserFront, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServiceServer) UploadAvatar(context.Context, *AvatarData) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAvatar not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *UserDelete) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserData(context.Context, *ChangeUserDataMessage) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserData not implemented")
}
func (UnimplementedUserServiceServer) ChangeUserPrivacySettings(context.Context, *PrivacySettings) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPrivacySettings not implemented")
}
func (UnimplementedUserServiceServer) GetUserFullData(context.Context, *Username) (*UserFullData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFullData not implemented")
}
func (UnimplementedUserServiceServer) GetIDByUsername(context.Context, *Username) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDByUsername not implemented")
}
func (UnimplementedUserServiceServer) GetUserPrivacyByID(context.Context, *UserID) (*PrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPrivacyByID not implemented")
}
func (UnimplementedUserServiceServer) GetUserAvatarURL(context.Context, *FileKey) (*AvatarUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAvatarURL not implemented")
}
func (UnimplementedUserServiceServer) UploadUserAvatar(context.Context, *AvatarImage) (*FileKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserAvatar not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*RegisterData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UploadAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadAvatar(ctx, req.(*AvatarData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*UserDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserDataMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ChangeUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserData(ctx, req.(*ChangeUserDataMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUserPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUserPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ChangeUserPrivacySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUserPrivacySettings(ctx, req.(*PrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserFullData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserFullData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserFullData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserFullData(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetIDByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetIDByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetIDByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetIDByUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserPrivacyByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserPrivacyByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserPrivacyByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserPrivacyByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserAvatarURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserAvatarURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserAvatarURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserAvatarURL(ctx, req.(*FileKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UploadUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadUserAvatar(ctx, req.(*AvatarImage))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserService_GetUserByID_Handler,
		},
		{
			MethodName: "UploadAvatar",
			Handler:    _UserService_UploadAvatar_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "ChangeUserData",
			Handler:    _UserService_ChangeUserData_Handler,
		},
		{
			MethodName: "ChangeUserPrivacySettings",
			Handler:    _UserService_ChangeUserPrivacySettings_Handler,
		},
		{
			MethodName: "GetUserFullData",
			Handler:    _UserService_GetUserFullData_Handler,
		},
		{
			MethodName: "GetIDByUsername",
			Handler:    _UserService_GetIDByUsername_Handler,
		},
		{
			MethodName: "GetUserPrivacyByID",
			Handler:    _UserService_GetUserPrivacyByID_Handler,
		},
		{
			MethodName: "GetUserAvatarURL",
			Handler:    _UserService_GetUserAvatarURL_Handler,
		},
		{
			MethodName: "UploadUserAvatar",
			Handler:    _UserService_UploadUserAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user.proto",
}
