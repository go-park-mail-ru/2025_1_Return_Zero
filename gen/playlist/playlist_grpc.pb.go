// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package playlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*Playlist, error)
	GetPlaylistByID(ctx context.Context, in *GetPlaylistByIDRequest, opts ...grpc.CallOption) (*PlaylistWithIsLiked, error)
	GetCombinedPlaylistsByUserID(ctx context.Context, in *GetCombinedPlaylistsByUserIDRequest, opts ...grpc.CallOption) (*PlaylistList, error)
	UpdatePlaylist(ctx context.Context, in *UpdatePlaylistRequest, opts ...grpc.CallOption) (*Playlist, error)
	UploadPlaylistThumbnail(ctx context.Context, in *UploadPlaylistThumbnailRequest, opts ...grpc.CallOption) (*UploadPlaylistThumbnailResponse, error)
	AddTrackToPlaylist(ctx context.Context, in *AddTrackToPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveTrackFromPlaylist(ctx context.Context, in *RemoveTrackFromPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPlaylistTrackIds(ctx context.Context, in *GetPlaylistTrackIdsRequest, opts ...grpc.CallOption) (*GetPlaylistTrackIdsResponse, error)
	RemovePlaylist(ctx context.Context, in *RemovePlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPlaylistsToAdd(ctx context.Context, in *GetPlaylistsToAddRequest, opts ...grpc.CallOption) (*GetPlaylistsToAddResponse, error)
	UpdatePlaylistsPublisityByUserID(ctx context.Context, in *UpdatePlaylistsPublisityByUserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LikePlaylist(ctx context.Context, in *LikePlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProfilePlaylists(ctx context.Context, in *GetProfilePlaylistsRequest, opts ...grpc.CallOption) (*GetProfilePlaylistsResponse, error)
	SearchPlaylists(ctx context.Context, in *SearchPlaylistsRequest, opts ...grpc.CallOption) (*PlaylistList, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/CreatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetPlaylistByID(ctx context.Context, in *GetPlaylistByIDRequest, opts ...grpc.CallOption) (*PlaylistWithIsLiked, error) {
	out := new(PlaylistWithIsLiked)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/GetPlaylistByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetCombinedPlaylistsByUserID(ctx context.Context, in *GetCombinedPlaylistsByUserIDRequest, opts ...grpc.CallOption) (*PlaylistList, error) {
	out := new(PlaylistList)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/GetCombinedPlaylistsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) UpdatePlaylist(ctx context.Context, in *UpdatePlaylistRequest, opts ...grpc.CallOption) (*Playlist, error) {
	out := new(Playlist)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/UpdatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) UploadPlaylistThumbnail(ctx context.Context, in *UploadPlaylistThumbnailRequest, opts ...grpc.CallOption) (*UploadPlaylistThumbnailResponse, error) {
	out := new(UploadPlaylistThumbnailResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/UploadPlaylistThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) AddTrackToPlaylist(ctx context.Context, in *AddTrackToPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/AddTrackToPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) RemoveTrackFromPlaylist(ctx context.Context, in *RemoveTrackFromPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/RemoveTrackFromPlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetPlaylistTrackIds(ctx context.Context, in *GetPlaylistTrackIdsRequest, opts ...grpc.CallOption) (*GetPlaylistTrackIdsResponse, error) {
	out := new(GetPlaylistTrackIdsResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/GetPlaylistTrackIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) RemovePlaylist(ctx context.Context, in *RemovePlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/RemovePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetPlaylistsToAdd(ctx context.Context, in *GetPlaylistsToAddRequest, opts ...grpc.CallOption) (*GetPlaylistsToAddResponse, error) {
	out := new(GetPlaylistsToAddResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/GetPlaylistsToAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) UpdatePlaylistsPublisityByUserID(ctx context.Context, in *UpdatePlaylistsPublisityByUserIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/UpdatePlaylistsPublisityByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) LikePlaylist(ctx context.Context, in *LikePlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/LikePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetProfilePlaylists(ctx context.Context, in *GetProfilePlaylistsRequest, opts ...grpc.CallOption) (*GetProfilePlaylistsResponse, error) {
	out := new(GetProfilePlaylistsResponse)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/GetProfilePlaylists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) SearchPlaylists(ctx context.Context, in *SearchPlaylistsRequest, opts ...grpc.CallOption) (*PlaylistList, error) {
	out := new(PlaylistList)
	err := c.cc.Invoke(ctx, "/playlist.PlaylistService/SearchPlaylists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility
type PlaylistServiceServer interface {
	CreatePlaylist(context.Context, *CreatePlaylistRequest) (*Playlist, error)
	GetPlaylistByID(context.Context, *GetPlaylistByIDRequest) (*PlaylistWithIsLiked, error)
	GetCombinedPlaylistsByUserID(context.Context, *GetCombinedPlaylistsByUserIDRequest) (*PlaylistList, error)
	UpdatePlaylist(context.Context, *UpdatePlaylistRequest) (*Playlist, error)
	UploadPlaylistThumbnail(context.Context, *UploadPlaylistThumbnailRequest) (*UploadPlaylistThumbnailResponse, error)
	AddTrackToPlaylist(context.Context, *AddTrackToPlaylistRequest) (*emptypb.Empty, error)
	RemoveTrackFromPlaylist(context.Context, *RemoveTrackFromPlaylistRequest) (*emptypb.Empty, error)
	GetPlaylistTrackIds(context.Context, *GetPlaylistTrackIdsRequest) (*GetPlaylistTrackIdsResponse, error)
	RemovePlaylist(context.Context, *RemovePlaylistRequest) (*emptypb.Empty, error)
	GetPlaylistsToAdd(context.Context, *GetPlaylistsToAddRequest) (*GetPlaylistsToAddResponse, error)
	UpdatePlaylistsPublisityByUserID(context.Context, *UpdatePlaylistsPublisityByUserIDRequest) (*emptypb.Empty, error)
	LikePlaylist(context.Context, *LikePlaylistRequest) (*emptypb.Empty, error)
	GetProfilePlaylists(context.Context, *GetProfilePlaylistsRequest) (*GetProfilePlaylistsResponse, error)
	SearchPlaylists(context.Context, *SearchPlaylistsRequest) (*PlaylistList, error)
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServiceServer struct {
}

func (UnimplementedPlaylistServiceServer) CreatePlaylist(context.Context, *CreatePlaylistRequest) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) GetPlaylistByID(context.Context, *GetPlaylistByIDRequest) (*PlaylistWithIsLiked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylistByID not implemented")
}
func (UnimplementedPlaylistServiceServer) GetCombinedPlaylistsByUserID(context.Context, *GetCombinedPlaylistsByUserIDRequest) (*PlaylistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCombinedPlaylistsByUserID not implemented")
}
func (UnimplementedPlaylistServiceServer) UpdatePlaylist(context.Context, *UpdatePlaylistRequest) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) UploadPlaylistThumbnail(context.Context, *UploadPlaylistThumbnailRequest) (*UploadPlaylistThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPlaylistThumbnail not implemented")
}
func (UnimplementedPlaylistServiceServer) AddTrackToPlaylist(context.Context, *AddTrackToPlaylistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrackToPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) RemoveTrackFromPlaylist(context.Context, *RemoveTrackFromPlaylistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTrackFromPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) GetPlaylistTrackIds(context.Context, *GetPlaylistTrackIdsRequest) (*GetPlaylistTrackIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylistTrackIds not implemented")
}
func (UnimplementedPlaylistServiceServer) RemovePlaylist(context.Context, *RemovePlaylistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) GetPlaylistsToAdd(context.Context, *GetPlaylistsToAddRequest) (*GetPlaylistsToAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylistsToAdd not implemented")
}
func (UnimplementedPlaylistServiceServer) UpdatePlaylistsPublisityByUserID(context.Context, *UpdatePlaylistsPublisityByUserIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlaylistsPublisityByUserID not implemented")
}
func (UnimplementedPlaylistServiceServer) LikePlaylist(context.Context, *LikePlaylistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) GetProfilePlaylists(context.Context, *GetProfilePlaylistsRequest) (*GetProfilePlaylistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfilePlaylists not implemented")
}
func (UnimplementedPlaylistServiceServer) SearchPlaylists(context.Context, *SearchPlaylistsRequest) (*PlaylistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlaylists not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/CreatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetPlaylistByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetPlaylistByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/GetPlaylistByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetPlaylistByID(ctx, req.(*GetPlaylistByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetCombinedPlaylistsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCombinedPlaylistsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetCombinedPlaylistsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/GetCombinedPlaylistsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetCombinedPlaylistsByUserID(ctx, req.(*GetCombinedPlaylistsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_UpdatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).UpdatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/UpdatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).UpdatePlaylist(ctx, req.(*UpdatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_UploadPlaylistThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPlaylistThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).UploadPlaylistThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/UploadPlaylistThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).UploadPlaylistThumbnail(ctx, req.(*UploadPlaylistThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_AddTrackToPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrackToPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).AddTrackToPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/AddTrackToPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).AddTrackToPlaylist(ctx, req.(*AddTrackToPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_RemoveTrackFromPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTrackFromPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).RemoveTrackFromPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/RemoveTrackFromPlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).RemoveTrackFromPlaylist(ctx, req.(*RemoveTrackFromPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetPlaylistTrackIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistTrackIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetPlaylistTrackIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/GetPlaylistTrackIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetPlaylistTrackIds(ctx, req.(*GetPlaylistTrackIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_RemovePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).RemovePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/RemovePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).RemovePlaylist(ctx, req.(*RemovePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetPlaylistsToAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistsToAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetPlaylistsToAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/GetPlaylistsToAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetPlaylistsToAdd(ctx, req.(*GetPlaylistsToAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_UpdatePlaylistsPublisityByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlaylistsPublisityByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).UpdatePlaylistsPublisityByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/UpdatePlaylistsPublisityByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).UpdatePlaylistsPublisityByUserID(ctx, req.(*UpdatePlaylistsPublisityByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_LikePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).LikePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/LikePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).LikePlaylist(ctx, req.(*LikePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetProfilePlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilePlaylistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetProfilePlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/GetProfilePlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetProfilePlaylists(ctx, req.(*GetProfilePlaylistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_SearchPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPlaylistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).SearchPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playlist.PlaylistService/SearchPlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).SearchPlaylists(ctx, req.(*SearchPlaylistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playlist.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaylist",
			Handler:    _PlaylistService_CreatePlaylist_Handler,
		},
		{
			MethodName: "GetPlaylistByID",
			Handler:    _PlaylistService_GetPlaylistByID_Handler,
		},
		{
			MethodName: "GetCombinedPlaylistsByUserID",
			Handler:    _PlaylistService_GetCombinedPlaylistsByUserID_Handler,
		},
		{
			MethodName: "UpdatePlaylist",
			Handler:    _PlaylistService_UpdatePlaylist_Handler,
		},
		{
			MethodName: "UploadPlaylistThumbnail",
			Handler:    _PlaylistService_UploadPlaylistThumbnail_Handler,
		},
		{
			MethodName: "AddTrackToPlaylist",
			Handler:    _PlaylistService_AddTrackToPlaylist_Handler,
		},
		{
			MethodName: "RemoveTrackFromPlaylist",
			Handler:    _PlaylistService_RemoveTrackFromPlaylist_Handler,
		},
		{
			MethodName: "GetPlaylistTrackIds",
			Handler:    _PlaylistService_GetPlaylistTrackIds_Handler,
		},
		{
			MethodName: "RemovePlaylist",
			Handler:    _PlaylistService_RemovePlaylist_Handler,
		},
		{
			MethodName: "GetPlaylistsToAdd",
			Handler:    _PlaylistService_GetPlaylistsToAdd_Handler,
		},
		{
			MethodName: "UpdatePlaylistsPublisityByUserID",
			Handler:    _PlaylistService_UpdatePlaylistsPublisityByUserID_Handler,
		},
		{
			MethodName: "LikePlaylist",
			Handler:    _PlaylistService_LikePlaylist_Handler,
		},
		{
			MethodName: "GetProfilePlaylists",
			Handler:    _PlaylistService_GetProfilePlaylists_Handler,
		},
		{
			MethodName: "SearchPlaylists",
			Handler:    _PlaylistService_SearchPlaylists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist/playlist.proto",
}
