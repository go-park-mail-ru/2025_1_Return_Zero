// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.1
// source: playlist/playlist.proto

package playlist

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlaylistID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlaylistID) Reset() {
	*x = PlaylistID{}
	mi := &file_playlist_playlist_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaylistID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistID) ProtoMessage() {}

func (x *PlaylistID) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistID.ProtoReflect.Descriptor instead.
func (*PlaylistID) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{0}
}

func (x *PlaylistID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Playlist struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId        int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thumbnail     string                 `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Playlist) Reset() {
	*x = Playlist{}
	mi := &file_playlist_playlist_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Playlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist) ProtoMessage() {}

func (x *Playlist) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist.ProtoReflect.Descriptor instead.
func (*Playlist) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{1}
}

func (x *Playlist) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Playlist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Playlist) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Playlist) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

type PlaylistWithIsIncludedTrack struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Playlist        *Playlist              `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
	IsIncludedTrack bool                   `protobuf:"varint,2,opt,name=is_included_track,json=isIncludedTrack,proto3" json:"is_included_track,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlaylistWithIsIncludedTrack) Reset() {
	*x = PlaylistWithIsIncludedTrack{}
	mi := &file_playlist_playlist_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaylistWithIsIncludedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistWithIsIncludedTrack) ProtoMessage() {}

func (x *PlaylistWithIsIncludedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistWithIsIncludedTrack.ProtoReflect.Descriptor instead.
func (*PlaylistWithIsIncludedTrack) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{2}
}

func (x *PlaylistWithIsIncludedTrack) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

func (x *PlaylistWithIsIncludedTrack) GetIsIncludedTrack() bool {
	if x != nil {
		return x.IsIncludedTrack
	}
	return false
}

type PlaylistList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Playlists     []*Playlist            `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlaylistList) Reset() {
	*x = PlaylistList{}
	mi := &file_playlist_playlist_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaylistList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistList) ProtoMessage() {}

func (x *PlaylistList) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistList.ProtoReflect.Descriptor instead.
func (*PlaylistList) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{3}
}

func (x *PlaylistList) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type CreatePlaylistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail     string                 `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	IsPublic      bool                   `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePlaylistRequest) Reset() {
	*x = CreatePlaylistRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlaylistRequest) ProtoMessage() {}

func (x *CreatePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlaylistRequest.ProtoReflect.Descriptor instead.
func (*CreatePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreatePlaylistRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePlaylistRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *CreatePlaylistRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type GetPlaylistByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlaylistByIDRequest) Reset() {
	*x = GetPlaylistByIDRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistByIDRequest) ProtoMessage() {}

func (x *GetPlaylistByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistByIDRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistByIDRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{5}
}

func (x *GetPlaylistByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPlaylistByIDRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UpdatePlaylistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail     string                 `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePlaylistRequest) Reset() {
	*x = UpdatePlaylistRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlaylistRequest) ProtoMessage() {}

func (x *UpdatePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlaylistRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePlaylistRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdatePlaylistRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdatePlaylistRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

type UploadPlaylistThumbnailRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail     []byte                 `protobuf:"bytes,2,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadPlaylistThumbnailRequest) Reset() {
	*x = UploadPlaylistThumbnailRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadPlaylistThumbnailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPlaylistThumbnailRequest) ProtoMessage() {}

func (x *UploadPlaylistThumbnailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPlaylistThumbnailRequest.ProtoReflect.Descriptor instead.
func (*UploadPlaylistThumbnailRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{7}
}

func (x *UploadPlaylistThumbnailRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UploadPlaylistThumbnailRequest) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type UploadPlaylistThumbnailResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Thumbnail     string                 `protobuf:"bytes,1,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadPlaylistThumbnailResponse) Reset() {
	*x = UploadPlaylistThumbnailResponse{}
	mi := &file_playlist_playlist_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadPlaylistThumbnailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPlaylistThumbnailResponse) ProtoMessage() {}

func (x *UploadPlaylistThumbnailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPlaylistThumbnailResponse.ProtoReflect.Descriptor instead.
func (*UploadPlaylistThumbnailResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{8}
}

func (x *UploadPlaylistThumbnailResponse) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

type GetCombinedPlaylistsByUserIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCombinedPlaylistsByUserIDRequest) Reset() {
	*x = GetCombinedPlaylistsByUserIDRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCombinedPlaylistsByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCombinedPlaylistsByUserIDRequest) ProtoMessage() {}

func (x *GetCombinedPlaylistsByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCombinedPlaylistsByUserIDRequest.ProtoReflect.Descriptor instead.
func (*GetCombinedPlaylistsByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{9}
}

func (x *GetCombinedPlaylistsByUserIDRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetPlaylistsToAddRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TrackId       int64                  `protobuf:"varint,2,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlaylistsToAddRequest) Reset() {
	*x = GetPlaylistsToAddRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistsToAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistsToAddRequest) ProtoMessage() {}

func (x *GetPlaylistsToAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistsToAddRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistsToAddRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{10}
}

func (x *GetPlaylistsToAddRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPlaylistsToAddRequest) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type GetPlaylistsToAddResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Playlists     []*PlaylistWithIsIncludedTrack `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlaylistsToAddResponse) Reset() {
	*x = GetPlaylistsToAddResponse{}
	mi := &file_playlist_playlist_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistsToAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistsToAddResponse) ProtoMessage() {}

func (x *GetPlaylistsToAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistsToAddResponse.ProtoReflect.Descriptor instead.
func (*GetPlaylistsToAddResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{11}
}

func (x *GetPlaylistsToAddResponse) GetPlaylists() []*PlaylistWithIsIncludedTrack {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type AddTrackToPlaylistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId    int64                  `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	TrackId       int64                  `protobuf:"varint,3,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTrackToPlaylistRequest) Reset() {
	*x = AddTrackToPlaylistRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTrackToPlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrackToPlaylistRequest) ProtoMessage() {}

func (x *AddTrackToPlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrackToPlaylistRequest.ProtoReflect.Descriptor instead.
func (*AddTrackToPlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{12}
}

func (x *AddTrackToPlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddTrackToPlaylistRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *AddTrackToPlaylistRequest) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type RemoveTrackFromPlaylistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId    int64                  `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	TrackId       int64                  `protobuf:"varint,3,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTrackFromPlaylistRequest) Reset() {
	*x = RemoveTrackFromPlaylistRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTrackFromPlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTrackFromPlaylistRequest) ProtoMessage() {}

func (x *RemoveTrackFromPlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTrackFromPlaylistRequest.ProtoReflect.Descriptor instead.
func (*RemoveTrackFromPlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveTrackFromPlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RemoveTrackFromPlaylistRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *RemoveTrackFromPlaylistRequest) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type GetPlaylistTrackIdsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId    int64                  `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlaylistTrackIdsRequest) Reset() {
	*x = GetPlaylistTrackIdsRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistTrackIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistTrackIdsRequest) ProtoMessage() {}

func (x *GetPlaylistTrackIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistTrackIdsRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistTrackIdsRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{14}
}

func (x *GetPlaylistTrackIdsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPlaylistTrackIdsRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

type GetPlaylistTrackIdsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackIds      []int64                `protobuf:"varint,1,rep,packed,name=track_ids,json=trackIds,proto3" json:"track_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlaylistTrackIdsResponse) Reset() {
	*x = GetPlaylistTrackIdsResponse{}
	mi := &file_playlist_playlist_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlaylistTrackIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistTrackIdsResponse) ProtoMessage() {}

func (x *GetPlaylistTrackIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistTrackIdsResponse.ProtoReflect.Descriptor instead.
func (*GetPlaylistTrackIdsResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{15}
}

func (x *GetPlaylistTrackIdsResponse) GetTrackIds() []int64 {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

type RemovePlaylistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId    int64                  `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePlaylistRequest) Reset() {
	*x = RemovePlaylistRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePlaylistRequest) ProtoMessage() {}

func (x *RemovePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePlaylistRequest.ProtoReflect.Descriptor instead.
func (*RemovePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{16}
}

func (x *RemovePlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RemovePlaylistRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

type LikePlaylistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId    int64                  `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	IsLike        bool                   `protobuf:"varint,3,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LikePlaylistRequest) Reset() {
	*x = LikePlaylistRequest{}
	mi := &file_playlist_playlist_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LikePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikePlaylistRequest) ProtoMessage() {}

func (x *LikePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikePlaylistRequest.ProtoReflect.Descriptor instead.
func (*LikePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{17}
}

func (x *LikePlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LikePlaylistRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *LikePlaylistRequest) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

var File_playlist_playlist_proto protoreflect.FileDescriptor

const file_playlist_playlist_proto_rawDesc = "" +
	"\n" +
	"\x17playlist/playlist.proto\x12\bplaylist\x1a\x1bgoogle/protobuf/empty.proto\"\x1c\n" +
	"\n" +
	"PlaylistID\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"g\n" +
	"\bPlaylist\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\x03R\x06userId\x12\x1c\n" +
	"\tthumbnail\x18\x04 \x01(\tR\tthumbnail\"y\n" +
	"\x1bPlaylistWithIsIncludedTrack\x12.\n" +
	"\bplaylist\x18\x01 \x01(\v2\x12.playlist.PlaylistR\bplaylist\x12*\n" +
	"\x11is_included_track\x18\x02 \x01(\bR\x0fisIncludedTrack\"@\n" +
	"\fPlaylistList\x120\n" +
	"\tplaylists\x18\x01 \x03(\v2\x12.playlist.PlaylistR\tplaylists\"\x81\x01\n" +
	"\x15CreatePlaylistRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1c\n" +
	"\tthumbnail\x18\x03 \x01(\tR\tthumbnail\x12\x1b\n" +
	"\tis_public\x18\x04 \x01(\bR\bisPublic\"A\n" +
	"\x16GetPlaylistByIDRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\"t\n" +
	"\x15UpdatePlaylistRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x1c\n" +
	"\tthumbnail\x18\x04 \x01(\tR\tthumbnail\"T\n" +
	"\x1eUploadPlaylistThumbnailRequest\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x1c\n" +
	"\tthumbnail\x18\x02 \x01(\fR\tthumbnail\"?\n" +
	"\x1fUploadPlaylistThumbnailResponse\x12\x1c\n" +
	"\tthumbnail\x18\x01 \x01(\tR\tthumbnail\">\n" +
	"#GetCombinedPlaylistsByUserIDRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\"N\n" +
	"\x18GetPlaylistsToAddRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x19\n" +
	"\btrack_id\x18\x02 \x01(\x03R\atrackId\"`\n" +
	"\x19GetPlaylistsToAddResponse\x12C\n" +
	"\tplaylists\x18\x01 \x03(\v2%.playlist.PlaylistWithIsIncludedTrackR\tplaylists\"p\n" +
	"\x19AddTrackToPlaylistRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vplaylist_id\x18\x02 \x01(\x03R\n" +
	"playlistId\x12\x19\n" +
	"\btrack_id\x18\x03 \x01(\x03R\atrackId\"u\n" +
	"\x1eRemoveTrackFromPlaylistRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vplaylist_id\x18\x02 \x01(\x03R\n" +
	"playlistId\x12\x19\n" +
	"\btrack_id\x18\x03 \x01(\x03R\atrackId\"V\n" +
	"\x1aGetPlaylistTrackIdsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vplaylist_id\x18\x02 \x01(\x03R\n" +
	"playlistId\":\n" +
	"\x1bGetPlaylistTrackIdsResponse\x12\x1b\n" +
	"\ttrack_ids\x18\x01 \x03(\x03R\btrackIds\"Q\n" +
	"\x15RemovePlaylistRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vplaylist_id\x18\x02 \x01(\x03R\n" +
	"playlistId\"h\n" +
	"\x13LikePlaylistRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vplaylist_id\x18\x02 \x01(\x03R\n" +
	"playlistId\x12\x17\n" +
	"\ais_like\x18\x03 \x01(\bR\x06isLike2\xfc\x06\n" +
	"\x0fPlaylistService\x12E\n" +
	"\x0eCreatePlaylist\x12\x1f.playlist.CreatePlaylistRequest\x1a\x12.playlist.Playlist\x12G\n" +
	"\x0fGetPlaylistByID\x12 .playlist.GetPlaylistByIDRequest\x1a\x12.playlist.Playlist\x12e\n" +
	"\x1cGetCombinedPlaylistsByUserID\x12-.playlist.GetCombinedPlaylistsByUserIDRequest\x1a\x16.playlist.PlaylistList\x12E\n" +
	"\x0eUpdatePlaylist\x12\x1f.playlist.UpdatePlaylistRequest\x1a\x12.playlist.Playlist\x12n\n" +
	"\x17UploadPlaylistThumbnail\x12(.playlist.UploadPlaylistThumbnailRequest\x1a).playlist.UploadPlaylistThumbnailResponse\x12Q\n" +
	"\x12AddTrackToPlaylist\x12#.playlist.AddTrackToPlaylistRequest\x1a\x16.google.protobuf.Empty\x12[\n" +
	"\x17RemoveTrackFromPlaylist\x12(.playlist.RemoveTrackFromPlaylistRequest\x1a\x16.google.protobuf.Empty\x12b\n" +
	"\x13GetPlaylistTrackIds\x12$.playlist.GetPlaylistTrackIdsRequest\x1a%.playlist.GetPlaylistTrackIdsResponse\x12I\n" +
	"\x0eRemovePlaylist\x12\x1f.playlist.RemovePlaylistRequest\x1a\x16.google.protobuf.Empty\x12\\\n" +
	"\x11GetPlaylistsToAdd\x12\".playlist.GetPlaylistsToAddRequest\x1a#.playlist.GetPlaylistsToAddResponseB\fZ\n" +
	"./playlistb\x06proto3"

var (
	file_playlist_playlist_proto_rawDescOnce sync.Once
	file_playlist_playlist_proto_rawDescData []byte
)

func file_playlist_playlist_proto_rawDescGZIP() []byte {
	file_playlist_playlist_proto_rawDescOnce.Do(func() {
		file_playlist_playlist_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_playlist_playlist_proto_rawDesc), len(file_playlist_playlist_proto_rawDesc)))
	})
	return file_playlist_playlist_proto_rawDescData
}

var file_playlist_playlist_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_playlist_playlist_proto_goTypes = []any{
	(*PlaylistID)(nil),                          // 0: playlist.PlaylistID
	(*Playlist)(nil),                            // 1: playlist.Playlist
	(*PlaylistWithIsIncludedTrack)(nil),         // 2: playlist.PlaylistWithIsIncludedTrack
	(*PlaylistList)(nil),                        // 3: playlist.PlaylistList
	(*CreatePlaylistRequest)(nil),               // 4: playlist.CreatePlaylistRequest
	(*GetPlaylistByIDRequest)(nil),              // 5: playlist.GetPlaylistByIDRequest
	(*UpdatePlaylistRequest)(nil),               // 6: playlist.UpdatePlaylistRequest
	(*UploadPlaylistThumbnailRequest)(nil),      // 7: playlist.UploadPlaylistThumbnailRequest
	(*UploadPlaylistThumbnailResponse)(nil),     // 8: playlist.UploadPlaylistThumbnailResponse
	(*GetCombinedPlaylistsByUserIDRequest)(nil), // 9: playlist.GetCombinedPlaylistsByUserIDRequest
	(*GetPlaylistsToAddRequest)(nil),            // 10: playlist.GetPlaylistsToAddRequest
	(*GetPlaylistsToAddResponse)(nil),           // 11: playlist.GetPlaylistsToAddResponse
	(*AddTrackToPlaylistRequest)(nil),           // 12: playlist.AddTrackToPlaylistRequest
	(*RemoveTrackFromPlaylistRequest)(nil),      // 13: playlist.RemoveTrackFromPlaylistRequest
	(*GetPlaylistTrackIdsRequest)(nil),          // 14: playlist.GetPlaylistTrackIdsRequest
	(*GetPlaylistTrackIdsResponse)(nil),         // 15: playlist.GetPlaylistTrackIdsResponse
	(*RemovePlaylistRequest)(nil),               // 16: playlist.RemovePlaylistRequest
	(*LikePlaylistRequest)(nil),                 // 17: playlist.LikePlaylistRequest
	(*emptypb.Empty)(nil),                       // 18: google.protobuf.Empty
}
var file_playlist_playlist_proto_depIdxs = []int32{
	1,  // 0: playlist.PlaylistWithIsIncludedTrack.playlist:type_name -> playlist.Playlist
	1,  // 1: playlist.PlaylistList.playlists:type_name -> playlist.Playlist
	2,  // 2: playlist.GetPlaylistsToAddResponse.playlists:type_name -> playlist.PlaylistWithIsIncludedTrack
	4,  // 3: playlist.PlaylistService.CreatePlaylist:input_type -> playlist.CreatePlaylistRequest
	5,  // 4: playlist.PlaylistService.GetPlaylistByID:input_type -> playlist.GetPlaylistByIDRequest
	9,  // 5: playlist.PlaylistService.GetCombinedPlaylistsByUserID:input_type -> playlist.GetCombinedPlaylistsByUserIDRequest
	6,  // 6: playlist.PlaylistService.UpdatePlaylist:input_type -> playlist.UpdatePlaylistRequest
	7,  // 7: playlist.PlaylistService.UploadPlaylistThumbnail:input_type -> playlist.UploadPlaylistThumbnailRequest
	12, // 8: playlist.PlaylistService.AddTrackToPlaylist:input_type -> playlist.AddTrackToPlaylistRequest
	13, // 9: playlist.PlaylistService.RemoveTrackFromPlaylist:input_type -> playlist.RemoveTrackFromPlaylistRequest
	14, // 10: playlist.PlaylistService.GetPlaylistTrackIds:input_type -> playlist.GetPlaylistTrackIdsRequest
	16, // 11: playlist.PlaylistService.RemovePlaylist:input_type -> playlist.RemovePlaylistRequest
	10, // 12: playlist.PlaylistService.GetPlaylistsToAdd:input_type -> playlist.GetPlaylistsToAddRequest
	1,  // 13: playlist.PlaylistService.CreatePlaylist:output_type -> playlist.Playlist
	1,  // 14: playlist.PlaylistService.GetPlaylistByID:output_type -> playlist.Playlist
	3,  // 15: playlist.PlaylistService.GetCombinedPlaylistsByUserID:output_type -> playlist.PlaylistList
	1,  // 16: playlist.PlaylistService.UpdatePlaylist:output_type -> playlist.Playlist
	8,  // 17: playlist.PlaylistService.UploadPlaylistThumbnail:output_type -> playlist.UploadPlaylistThumbnailResponse
	18, // 18: playlist.PlaylistService.AddTrackToPlaylist:output_type -> google.protobuf.Empty
	18, // 19: playlist.PlaylistService.RemoveTrackFromPlaylist:output_type -> google.protobuf.Empty
	15, // 20: playlist.PlaylistService.GetPlaylistTrackIds:output_type -> playlist.GetPlaylistTrackIdsResponse
	18, // 21: playlist.PlaylistService.RemovePlaylist:output_type -> google.protobuf.Empty
	11, // 22: playlist.PlaylistService.GetPlaylistsToAdd:output_type -> playlist.GetPlaylistsToAddResponse
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_playlist_playlist_proto_init() }
func file_playlist_playlist_proto_init() {
	if File_playlist_playlist_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_playlist_playlist_proto_rawDesc), len(file_playlist_playlist_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_playlist_playlist_proto_goTypes,
		DependencyIndexes: file_playlist_playlist_proto_depIdxs,
		MessageInfos:      file_playlist_playlist_proto_msgTypes,
	}.Build()
	File_playlist_playlist_proto = out.File
	file_playlist_playlist_proto_goTypes = nil
	file_playlist_playlist_proto_depIdxs = nil
}
