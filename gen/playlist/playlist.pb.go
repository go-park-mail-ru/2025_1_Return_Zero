// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.29.3
// source: playlist/playlist.proto

package playlist

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlaylistID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PlaylistID) Reset() {
	*x = PlaylistID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistID) ProtoMessage() {}

func (x *PlaylistID) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistID.ProtoReflect.Descriptor instead.
func (*PlaylistID) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{0}
}

func (x *PlaylistID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SearchPlaylistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	UserId int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SearchPlaylistsRequest) Reset() {
	*x = SearchPlaylistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlaylistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlaylistsRequest) ProtoMessage() {}

func (x *SearchPlaylistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlaylistsRequest.ProtoReflect.Descriptor instead.
func (*SearchPlaylistsRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{1}
}

func (x *SearchPlaylistsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchPlaylistsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SearchPlaylistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*Playlist `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *SearchPlaylistsResponse) Reset() {
	*x = SearchPlaylistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPlaylistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlaylistsResponse) ProtoMessage() {}

func (x *SearchPlaylistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlaylistsResponse.ProtoReflect.Descriptor instead.
func (*SearchPlaylistsResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{2}
}

func (x *SearchPlaylistsResponse) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type Playlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	UserId    int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Thumbnail string `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *Playlist) Reset() {
	*x = Playlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Playlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playlist) ProtoMessage() {}

func (x *Playlist) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playlist.ProtoReflect.Descriptor instead.
func (*Playlist) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{3}
}

func (x *Playlist) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Playlist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Playlist) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Playlist) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

type PlaylistWithIsLiked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist *Playlist `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
	IsLiked  bool      `protobuf:"varint,2,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
}

func (x *PlaylistWithIsLiked) Reset() {
	*x = PlaylistWithIsLiked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistWithIsLiked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistWithIsLiked) ProtoMessage() {}

func (x *PlaylistWithIsLiked) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistWithIsLiked.ProtoReflect.Descriptor instead.
func (*PlaylistWithIsLiked) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{4}
}

func (x *PlaylistWithIsLiked) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

func (x *PlaylistWithIsLiked) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

type PlaylistWithIsIncludedTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlist        *Playlist `protobuf:"bytes,1,opt,name=playlist,proto3" json:"playlist,omitempty"`
	IsIncludedTrack bool      `protobuf:"varint,2,opt,name=is_included_track,json=isIncludedTrack,proto3" json:"is_included_track,omitempty"`
}

func (x *PlaylistWithIsIncludedTrack) Reset() {
	*x = PlaylistWithIsIncludedTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistWithIsIncludedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistWithIsIncludedTrack) ProtoMessage() {}

func (x *PlaylistWithIsIncludedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistWithIsIncludedTrack.ProtoReflect.Descriptor instead.
func (*PlaylistWithIsIncludedTrack) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{5}
}

func (x *PlaylistWithIsIncludedTrack) GetPlaylist() *Playlist {
	if x != nil {
		return x.Playlist
	}
	return nil
}

func (x *PlaylistWithIsIncludedTrack) GetIsIncludedTrack() bool {
	if x != nil {
		return x.IsIncludedTrack
	}
	return false
}

type PlaylistList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*Playlist `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *PlaylistList) Reset() {
	*x = PlaylistList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistList) ProtoMessage() {}

func (x *PlaylistList) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistList.ProtoReflect.Descriptor instead.
func (*PlaylistList) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{6}
}

func (x *PlaylistList) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type CreatePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail string `protobuf:"bytes,3,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	IsPublic  bool   `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *CreatePlaylistRequest) Reset() {
	*x = CreatePlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlaylistRequest) ProtoMessage() {}

func (x *CreatePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlaylistRequest.ProtoReflect.Descriptor instead.
func (*CreatePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreatePlaylistRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreatePlaylistRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *CreatePlaylistRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type GetPlaylistByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetPlaylistByIDRequest) Reset() {
	*x = GetPlaylistByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistByIDRequest) ProtoMessage() {}

func (x *GetPlaylistByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistByIDRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistByIDRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{8}
}

func (x *GetPlaylistByIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPlaylistByIDRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UpdatePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail string `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *UpdatePlaylistRequest) Reset() {
	*x = UpdatePlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlaylistRequest) ProtoMessage() {}

func (x *UpdatePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlaylistRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{9}
}

func (x *UpdatePlaylistRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdatePlaylistRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdatePlaylistRequest) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

type UploadPlaylistThumbnailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail []byte `protobuf:"bytes,2,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *UploadPlaylistThumbnailRequest) Reset() {
	*x = UploadPlaylistThumbnailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPlaylistThumbnailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPlaylistThumbnailRequest) ProtoMessage() {}

func (x *UploadPlaylistThumbnailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPlaylistThumbnailRequest.ProtoReflect.Descriptor instead.
func (*UploadPlaylistThumbnailRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{10}
}

func (x *UploadPlaylistThumbnailRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UploadPlaylistThumbnailRequest) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type UploadPlaylistThumbnailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumbnail string `protobuf:"bytes,1,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *UploadPlaylistThumbnailResponse) Reset() {
	*x = UploadPlaylistThumbnailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPlaylistThumbnailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPlaylistThumbnailResponse) ProtoMessage() {}

func (x *UploadPlaylistThumbnailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPlaylistThumbnailResponse.ProtoReflect.Descriptor instead.
func (*UploadPlaylistThumbnailResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{11}
}

func (x *UploadPlaylistThumbnailResponse) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

type GetCombinedPlaylistsByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetCombinedPlaylistsByUserIDRequest) Reset() {
	*x = GetCombinedPlaylistsByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCombinedPlaylistsByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCombinedPlaylistsByUserIDRequest) ProtoMessage() {}

func (x *GetCombinedPlaylistsByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCombinedPlaylistsByUserIDRequest.ProtoReflect.Descriptor instead.
func (*GetCombinedPlaylistsByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{12}
}

func (x *GetCombinedPlaylistsByUserIDRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetPlaylistsToAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TrackId int64 `protobuf:"varint,2,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (x *GetPlaylistsToAddRequest) Reset() {
	*x = GetPlaylistsToAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistsToAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistsToAddRequest) ProtoMessage() {}

func (x *GetPlaylistsToAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistsToAddRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistsToAddRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{13}
}

func (x *GetPlaylistsToAddRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPlaylistsToAddRequest) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type GetPlaylistsToAddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*PlaylistWithIsIncludedTrack `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *GetPlaylistsToAddResponse) Reset() {
	*x = GetPlaylistsToAddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistsToAddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistsToAddResponse) ProtoMessage() {}

func (x *GetPlaylistsToAddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistsToAddResponse.ProtoReflect.Descriptor instead.
func (*GetPlaylistsToAddResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{14}
}

func (x *GetPlaylistsToAddResponse) GetPlaylists() []*PlaylistWithIsIncludedTrack {
	if x != nil {
		return x.Playlists
	}
	return nil
}

type AddTrackToPlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId int64 `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	TrackId    int64 `protobuf:"varint,3,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (x *AddTrackToPlaylistRequest) Reset() {
	*x = AddTrackToPlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrackToPlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrackToPlaylistRequest) ProtoMessage() {}

func (x *AddTrackToPlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrackToPlaylistRequest.ProtoReflect.Descriptor instead.
func (*AddTrackToPlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{15}
}

func (x *AddTrackToPlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddTrackToPlaylistRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *AddTrackToPlaylistRequest) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type RemoveTrackFromPlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId int64 `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	TrackId    int64 `protobuf:"varint,3,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
}

func (x *RemoveTrackFromPlaylistRequest) Reset() {
	*x = RemoveTrackFromPlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTrackFromPlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTrackFromPlaylistRequest) ProtoMessage() {}

func (x *RemoveTrackFromPlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTrackFromPlaylistRequest.ProtoReflect.Descriptor instead.
func (*RemoveTrackFromPlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveTrackFromPlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RemoveTrackFromPlaylistRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *RemoveTrackFromPlaylistRequest) GetTrackId() int64 {
	if x != nil {
		return x.TrackId
	}
	return 0
}

type GetPlaylistTrackIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId int64 `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (x *GetPlaylistTrackIdsRequest) Reset() {
	*x = GetPlaylistTrackIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistTrackIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistTrackIdsRequest) ProtoMessage() {}

func (x *GetPlaylistTrackIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistTrackIdsRequest.ProtoReflect.Descriptor instead.
func (*GetPlaylistTrackIdsRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{17}
}

func (x *GetPlaylistTrackIdsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPlaylistTrackIdsRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

type GetPlaylistTrackIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackIds []int64 `protobuf:"varint,1,rep,packed,name=track_ids,json=trackIds,proto3" json:"track_ids,omitempty"`
}

func (x *GetPlaylistTrackIdsResponse) Reset() {
	*x = GetPlaylistTrackIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlaylistTrackIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlaylistTrackIdsResponse) ProtoMessage() {}

func (x *GetPlaylistTrackIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlaylistTrackIdsResponse.ProtoReflect.Descriptor instead.
func (*GetPlaylistTrackIdsResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{18}
}

func (x *GetPlaylistTrackIdsResponse) GetTrackIds() []int64 {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

type RemovePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId int64 `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
}

func (x *RemovePlaylistRequest) Reset() {
	*x = RemovePlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePlaylistRequest) ProtoMessage() {}

func (x *RemovePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePlaylistRequest.ProtoReflect.Descriptor instead.
func (*RemovePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{19}
}

func (x *RemovePlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RemovePlaylistRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

type LikePlaylistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlaylistId int64 `protobuf:"varint,2,opt,name=playlist_id,json=playlistId,proto3" json:"playlist_id,omitempty"`
	IsLike     bool  `protobuf:"varint,3,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
}

func (x *LikePlaylistRequest) Reset() {
	*x = LikePlaylistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikePlaylistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikePlaylistRequest) ProtoMessage() {}

func (x *LikePlaylistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikePlaylistRequest.ProtoReflect.Descriptor instead.
func (*LikePlaylistRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{20}
}

func (x *LikePlaylistRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LikePlaylistRequest) GetPlaylistId() int64 {
	if x != nil {
		return x.PlaylistId
	}
	return 0
}

func (x *LikePlaylistRequest) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

type UpdatePlaylistsPublisityByUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsPublic bool  `protobuf:"varint,2,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *UpdatePlaylistsPublisityByUserIDRequest) Reset() {
	*x = UpdatePlaylistsPublisityByUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlaylistsPublisityByUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlaylistsPublisityByUserIDRequest) ProtoMessage() {}

func (x *UpdatePlaylistsPublisityByUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlaylistsPublisityByUserIDRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlaylistsPublisityByUserIDRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{21}
}

func (x *UpdatePlaylistsPublisityByUserIDRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdatePlaylistsPublisityByUserIDRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type GetProfilePlaylistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetProfilePlaylistsRequest) Reset() {
	*x = GetProfilePlaylistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfilePlaylistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfilePlaylistsRequest) ProtoMessage() {}

func (x *GetProfilePlaylistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfilePlaylistsRequest.ProtoReflect.Descriptor instead.
func (*GetProfilePlaylistsRequest) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{22}
}

func (x *GetProfilePlaylistsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetProfilePlaylistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playlists []*Playlist `protobuf:"bytes,1,rep,name=playlists,proto3" json:"playlists,omitempty"`
}

func (x *GetProfilePlaylistsResponse) Reset() {
	*x = GetProfilePlaylistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_playlist_playlist_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfilePlaylistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfilePlaylistsResponse) ProtoMessage() {}

func (x *GetProfilePlaylistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_playlist_playlist_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfilePlaylistsResponse.ProtoReflect.Descriptor instead.
func (*GetProfilePlaylistsResponse) Descriptor() ([]byte, []int) {
	return file_playlist_playlist_proto_rawDescGZIP(), []int{23}
}

func (x *GetProfilePlaylistsResponse) GetPlaylists() []*Playlist {
	if x != nil {
		return x.Playlists
	}
	return nil
}

var File_playlist_playlist_proto protoreflect.FileDescriptor

var file_playlist_playlist_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x1c, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47,
	0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22, 0x60, 0x0a,
	0x13, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x73, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x22,
	0x79, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x2e,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x40, 0x0a, 0x0c, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x22, 0x41, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22, 0x54, 0x0a, 0x1e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22,
	0x3f, 0x0a, 0x1f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x22, 0x3e, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x4e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x22, 0x60, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x70, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x22,
	0x51, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x68, 0x0a, 0x13, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x22, 0x5f, 0x0a, 0x27,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x35, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x32, 0xee, 0x09, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x73, 0x4c,
	0x69, 0x6b, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x6e, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c,
	0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x22, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x54, 0x6f,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45,
	0x0a, 0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_playlist_playlist_proto_rawDescOnce sync.Once
	file_playlist_playlist_proto_rawDescData = file_playlist_playlist_proto_rawDesc
)

func file_playlist_playlist_proto_rawDescGZIP() []byte {
	file_playlist_playlist_proto_rawDescOnce.Do(func() {
		file_playlist_playlist_proto_rawDescData = protoimpl.X.CompressGZIP(file_playlist_playlist_proto_rawDescData)
	})
	return file_playlist_playlist_proto_rawDescData
}

var file_playlist_playlist_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_playlist_playlist_proto_goTypes = []interface{}{
	(*PlaylistID)(nil),                              // 0: playlist.PlaylistID
	(*SearchPlaylistsRequest)(nil),                  // 1: playlist.SearchPlaylistsRequest
	(*SearchPlaylistsResponse)(nil),                 // 2: playlist.SearchPlaylistsResponse
	(*Playlist)(nil),                                // 3: playlist.Playlist
	(*PlaylistWithIsLiked)(nil),                     // 4: playlist.PlaylistWithIsLiked
	(*PlaylistWithIsIncludedTrack)(nil),             // 5: playlist.PlaylistWithIsIncludedTrack
	(*PlaylistList)(nil),                            // 6: playlist.PlaylistList
	(*CreatePlaylistRequest)(nil),                   // 7: playlist.CreatePlaylistRequest
	(*GetPlaylistByIDRequest)(nil),                  // 8: playlist.GetPlaylistByIDRequest
	(*UpdatePlaylistRequest)(nil),                   // 9: playlist.UpdatePlaylistRequest
	(*UploadPlaylistThumbnailRequest)(nil),          // 10: playlist.UploadPlaylistThumbnailRequest
	(*UploadPlaylistThumbnailResponse)(nil),         // 11: playlist.UploadPlaylistThumbnailResponse
	(*GetCombinedPlaylistsByUserIDRequest)(nil),     // 12: playlist.GetCombinedPlaylistsByUserIDRequest
	(*GetPlaylistsToAddRequest)(nil),                // 13: playlist.GetPlaylistsToAddRequest
	(*GetPlaylistsToAddResponse)(nil),               // 14: playlist.GetPlaylistsToAddResponse
	(*AddTrackToPlaylistRequest)(nil),               // 15: playlist.AddTrackToPlaylistRequest
	(*RemoveTrackFromPlaylistRequest)(nil),          // 16: playlist.RemoveTrackFromPlaylistRequest
	(*GetPlaylistTrackIdsRequest)(nil),              // 17: playlist.GetPlaylistTrackIdsRequest
	(*GetPlaylistTrackIdsResponse)(nil),             // 18: playlist.GetPlaylistTrackIdsResponse
	(*RemovePlaylistRequest)(nil),                   // 19: playlist.RemovePlaylistRequest
	(*LikePlaylistRequest)(nil),                     // 20: playlist.LikePlaylistRequest
	(*UpdatePlaylistsPublisityByUserIDRequest)(nil), // 21: playlist.UpdatePlaylistsPublisityByUserIDRequest
	(*GetProfilePlaylistsRequest)(nil),              // 22: playlist.GetProfilePlaylistsRequest
	(*GetProfilePlaylistsResponse)(nil),             // 23: playlist.GetProfilePlaylistsResponse
	(*emptypb.Empty)(nil),                           // 24: google.protobuf.Empty
}
var file_playlist_playlist_proto_depIdxs = []int32{
	3,  // 0: playlist.SearchPlaylistsResponse.playlists:type_name -> playlist.Playlist
	3,  // 1: playlist.PlaylistWithIsLiked.playlist:type_name -> playlist.Playlist
	3,  // 2: playlist.PlaylistWithIsIncludedTrack.playlist:type_name -> playlist.Playlist
	3,  // 3: playlist.PlaylistList.playlists:type_name -> playlist.Playlist
	5,  // 4: playlist.GetPlaylistsToAddResponse.playlists:type_name -> playlist.PlaylistWithIsIncludedTrack
	3,  // 5: playlist.GetProfilePlaylistsResponse.playlists:type_name -> playlist.Playlist
	7,  // 6: playlist.PlaylistService.CreatePlaylist:input_type -> playlist.CreatePlaylistRequest
	8,  // 7: playlist.PlaylistService.GetPlaylistByID:input_type -> playlist.GetPlaylistByIDRequest
	12, // 8: playlist.PlaylistService.GetCombinedPlaylistsByUserID:input_type -> playlist.GetCombinedPlaylistsByUserIDRequest
	9,  // 9: playlist.PlaylistService.UpdatePlaylist:input_type -> playlist.UpdatePlaylistRequest
	10, // 10: playlist.PlaylistService.UploadPlaylistThumbnail:input_type -> playlist.UploadPlaylistThumbnailRequest
	15, // 11: playlist.PlaylistService.AddTrackToPlaylist:input_type -> playlist.AddTrackToPlaylistRequest
	16, // 12: playlist.PlaylistService.RemoveTrackFromPlaylist:input_type -> playlist.RemoveTrackFromPlaylistRequest
	17, // 13: playlist.PlaylistService.GetPlaylistTrackIds:input_type -> playlist.GetPlaylistTrackIdsRequest
	19, // 14: playlist.PlaylistService.RemovePlaylist:input_type -> playlist.RemovePlaylistRequest
	13, // 15: playlist.PlaylistService.GetPlaylistsToAdd:input_type -> playlist.GetPlaylistsToAddRequest
	21, // 16: playlist.PlaylistService.UpdatePlaylistsPublisityByUserID:input_type -> playlist.UpdatePlaylistsPublisityByUserIDRequest
	20, // 17: playlist.PlaylistService.LikePlaylist:input_type -> playlist.LikePlaylistRequest
	22, // 18: playlist.PlaylistService.GetProfilePlaylists:input_type -> playlist.GetProfilePlaylistsRequest
	1,  // 19: playlist.PlaylistService.SearchPlaylists:input_type -> playlist.SearchPlaylistsRequest
	3,  // 20: playlist.PlaylistService.CreatePlaylist:output_type -> playlist.Playlist
	4,  // 21: playlist.PlaylistService.GetPlaylistByID:output_type -> playlist.PlaylistWithIsLiked
	6,  // 22: playlist.PlaylistService.GetCombinedPlaylistsByUserID:output_type -> playlist.PlaylistList
	3,  // 23: playlist.PlaylistService.UpdatePlaylist:output_type -> playlist.Playlist
	11, // 24: playlist.PlaylistService.UploadPlaylistThumbnail:output_type -> playlist.UploadPlaylistThumbnailResponse
	24, // 25: playlist.PlaylistService.AddTrackToPlaylist:output_type -> google.protobuf.Empty
	24, // 26: playlist.PlaylistService.RemoveTrackFromPlaylist:output_type -> google.protobuf.Empty
	18, // 27: playlist.PlaylistService.GetPlaylistTrackIds:output_type -> playlist.GetPlaylistTrackIdsResponse
	24, // 28: playlist.PlaylistService.RemovePlaylist:output_type -> google.protobuf.Empty
	14, // 29: playlist.PlaylistService.GetPlaylistsToAdd:output_type -> playlist.GetPlaylistsToAddResponse
	24, // 30: playlist.PlaylistService.UpdatePlaylistsPublisityByUserID:output_type -> google.protobuf.Empty
	24, // 31: playlist.PlaylistService.LikePlaylist:output_type -> google.protobuf.Empty
	23, // 32: playlist.PlaylistService.GetProfilePlaylists:output_type -> playlist.GetProfilePlaylistsResponse
	6,  // 33: playlist.PlaylistService.SearchPlaylists:output_type -> playlist.PlaylistList
	20, // [20:34] is the sub-list for method output_type
	6,  // [6:20] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_playlist_playlist_proto_init() }
func file_playlist_playlist_proto_init() {
	if File_playlist_playlist_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_playlist_playlist_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPlaylistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPlaylistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Playlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistWithIsLiked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistWithIsIncludedTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPlaylistThumbnailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPlaylistThumbnailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCombinedPlaylistsByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistsToAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistsToAddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrackToPlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTrackFromPlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistTrackIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlaylistTrackIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikePlaylistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlaylistsPublisityByUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfilePlaylistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_playlist_playlist_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfilePlaylistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_playlist_playlist_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_playlist_playlist_proto_goTypes,
		DependencyIndexes: file_playlist_playlist_proto_depIdxs,
		MessageInfos:      file_playlist_playlist_proto_msgTypes,
	}.Build()
	File_playlist_playlist_proto = out.File
	file_playlist_playlist_proto_rawDesc = nil
	file_playlist_playlist_proto_goTypes = nil
	file_playlist_playlist_proto_depIdxs = nil
}
