// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package artist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtistServiceClient is the client API for ArtistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtistServiceClient interface {
	GetAllArtists(ctx context.Context, in *FiltersWithUserID, opts ...grpc.CallOption) (*ArtistList, error)
	GetArtistByID(ctx context.Context, in *ArtistIDWithUserID, opts ...grpc.CallOption) (*ArtistDetailed, error)
	GetArtistTitleByID(ctx context.Context, in *ArtistID, opts ...grpc.CallOption) (*ArtistTitle, error)
	GetArtistsByTrackID(ctx context.Context, in *TrackID, opts ...grpc.CallOption) (*ArtistWithRoleList, error)
	GetArtistsByTrackIDs(ctx context.Context, in *TrackIDList, opts ...grpc.CallOption) (*ArtistWithRoleMap, error)
	GetArtistsByAlbumID(ctx context.Context, in *AlbumID, opts ...grpc.CallOption) (*ArtistWithTitleList, error)
	GetArtistsByAlbumIDs(ctx context.Context, in *AlbumIDList, opts ...grpc.CallOption) (*ArtistWithTitleMap, error)
	GetAlbumIDsByArtistID(ctx context.Context, in *ArtistID, opts ...grpc.CallOption) (*AlbumIDList, error)
	GetTrackIDsByArtistID(ctx context.Context, in *ArtistID, opts ...grpc.CallOption) (*TrackIDList, error)
	CreateStreamsByArtistIDs(ctx context.Context, in *ArtistStreamCreateDataList, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetArtistsListenedByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ArtistListened, error)
	LikeArtist(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFavoriteArtists(ctx context.Context, in *FiltersWithUserID, opts ...grpc.CallOption) (*ArtistList, error)
	SearchArtists(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ArtistList, error)
}

type artistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtistServiceClient(cc grpc.ClientConnInterface) ArtistServiceClient {
	return &artistServiceClient{cc}
}

func (c *artistServiceClient) GetAllArtists(ctx context.Context, in *FiltersWithUserID, opts ...grpc.CallOption) (*ArtistList, error) {
	out := new(ArtistList)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetAllArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetArtistByID(ctx context.Context, in *ArtistIDWithUserID, opts ...grpc.CallOption) (*ArtistDetailed, error) {
	out := new(ArtistDetailed)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetArtistByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetArtistTitleByID(ctx context.Context, in *ArtistID, opts ...grpc.CallOption) (*ArtistTitle, error) {
	out := new(ArtistTitle)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetArtistTitleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetArtistsByTrackID(ctx context.Context, in *TrackID, opts ...grpc.CallOption) (*ArtistWithRoleList, error) {
	out := new(ArtistWithRoleList)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetArtistsByTrackID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetArtistsByTrackIDs(ctx context.Context, in *TrackIDList, opts ...grpc.CallOption) (*ArtistWithRoleMap, error) {
	out := new(ArtistWithRoleMap)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetArtistsByTrackIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetArtistsByAlbumID(ctx context.Context, in *AlbumID, opts ...grpc.CallOption) (*ArtistWithTitleList, error) {
	out := new(ArtistWithTitleList)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetArtistsByAlbumID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetArtistsByAlbumIDs(ctx context.Context, in *AlbumIDList, opts ...grpc.CallOption) (*ArtistWithTitleMap, error) {
	out := new(ArtistWithTitleMap)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetArtistsByAlbumIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetAlbumIDsByArtistID(ctx context.Context, in *ArtistID, opts ...grpc.CallOption) (*AlbumIDList, error) {
	out := new(AlbumIDList)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetAlbumIDsByArtistID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetTrackIDsByArtistID(ctx context.Context, in *ArtistID, opts ...grpc.CallOption) (*TrackIDList, error) {
	out := new(TrackIDList)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetTrackIDsByArtistID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) CreateStreamsByArtistIDs(ctx context.Context, in *ArtistStreamCreateDataList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/CreateStreamsByArtistIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetArtistsListenedByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ArtistListened, error) {
	out := new(ArtistListened)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetArtistsListenedByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) LikeArtist(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/LikeArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) GetFavoriteArtists(ctx context.Context, in *FiltersWithUserID, opts ...grpc.CallOption) (*ArtistList, error) {
	out := new(ArtistList)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/GetFavoriteArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artistServiceClient) SearchArtists(ctx context.Context, in *Query, opts ...grpc.CallOption) (*ArtistList, error) {
	out := new(ArtistList)
	err := c.cc.Invoke(ctx, "/artist.ArtistService/SearchArtists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtistServiceServer is the server API for ArtistService service.
// All implementations must embed UnimplementedArtistServiceServer
// for forward compatibility
type ArtistServiceServer interface {
	GetAllArtists(context.Context, *FiltersWithUserID) (*ArtistList, error)
	GetArtistByID(context.Context, *ArtistIDWithUserID) (*ArtistDetailed, error)
	GetArtistTitleByID(context.Context, *ArtistID) (*ArtistTitle, error)
	GetArtistsByTrackID(context.Context, *TrackID) (*ArtistWithRoleList, error)
	GetArtistsByTrackIDs(context.Context, *TrackIDList) (*ArtistWithRoleMap, error)
	GetArtistsByAlbumID(context.Context, *AlbumID) (*ArtistWithTitleList, error)
	GetArtistsByAlbumIDs(context.Context, *AlbumIDList) (*ArtistWithTitleMap, error)
	GetAlbumIDsByArtistID(context.Context, *ArtistID) (*AlbumIDList, error)
	GetTrackIDsByArtistID(context.Context, *ArtistID) (*TrackIDList, error)
	CreateStreamsByArtistIDs(context.Context, *ArtistStreamCreateDataList) (*emptypb.Empty, error)
	GetArtistsListenedByUserID(context.Context, *UserID) (*ArtistListened, error)
	LikeArtist(context.Context, *LikeRequest) (*emptypb.Empty, error)
	GetFavoriteArtists(context.Context, *FiltersWithUserID) (*ArtistList, error)
	SearchArtists(context.Context, *Query) (*ArtistList, error)
	mustEmbedUnimplementedArtistServiceServer()
}

// UnimplementedArtistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtistServiceServer struct {
}

func (UnimplementedArtistServiceServer) GetAllArtists(context.Context, *FiltersWithUserID) (*ArtistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArtists not implemented")
}
func (UnimplementedArtistServiceServer) GetArtistByID(context.Context, *ArtistIDWithUserID) (*ArtistDetailed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistByID not implemented")
}
func (UnimplementedArtistServiceServer) GetArtistTitleByID(context.Context, *ArtistID) (*ArtistTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistTitleByID not implemented")
}
func (UnimplementedArtistServiceServer) GetArtistsByTrackID(context.Context, *TrackID) (*ArtistWithRoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsByTrackID not implemented")
}
func (UnimplementedArtistServiceServer) GetArtistsByTrackIDs(context.Context, *TrackIDList) (*ArtistWithRoleMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsByTrackIDs not implemented")
}
func (UnimplementedArtistServiceServer) GetArtistsByAlbumID(context.Context, *AlbumID) (*ArtistWithTitleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsByAlbumID not implemented")
}
func (UnimplementedArtistServiceServer) GetArtistsByAlbumIDs(context.Context, *AlbumIDList) (*ArtistWithTitleMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsByAlbumIDs not implemented")
}
func (UnimplementedArtistServiceServer) GetAlbumIDsByArtistID(context.Context, *ArtistID) (*AlbumIDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumIDsByArtistID not implemented")
}
func (UnimplementedArtistServiceServer) GetTrackIDsByArtistID(context.Context, *ArtistID) (*TrackIDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrackIDsByArtistID not implemented")
}
func (UnimplementedArtistServiceServer) CreateStreamsByArtistIDs(context.Context, *ArtistStreamCreateDataList) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStreamsByArtistIDs not implemented")
}
func (UnimplementedArtistServiceServer) GetArtistsListenedByUserID(context.Context, *UserID) (*ArtistListened, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsListenedByUserID not implemented")
}
func (UnimplementedArtistServiceServer) LikeArtist(context.Context, *LikeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeArtist not implemented")
}
func (UnimplementedArtistServiceServer) GetFavoriteArtists(context.Context, *FiltersWithUserID) (*ArtistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavoriteArtists not implemented")
}
func (UnimplementedArtistServiceServer) SearchArtists(context.Context, *Query) (*ArtistList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArtists not implemented")
}
func (UnimplementedArtistServiceServer) mustEmbedUnimplementedArtistServiceServer() {}

// UnsafeArtistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtistServiceServer will
// result in compilation errors.
type UnsafeArtistServiceServer interface {
	mustEmbedUnimplementedArtistServiceServer()
}

func RegisterArtistServiceServer(s grpc.ServiceRegistrar, srv ArtistServiceServer) {
	s.RegisterService(&ArtistService_ServiceDesc, srv)
}

func _ArtistService_GetAllArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiltersWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetAllArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetAllArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetAllArtists(ctx, req.(*FiltersWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetArtistByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistIDWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetArtistByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetArtistByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetArtistByID(ctx, req.(*ArtistIDWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetArtistTitleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetArtistTitleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetArtistTitleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetArtistTitleByID(ctx, req.(*ArtistID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetArtistsByTrackID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetArtistsByTrackID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetArtistsByTrackID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetArtistsByTrackID(ctx, req.(*TrackID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetArtistsByTrackIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetArtistsByTrackIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetArtistsByTrackIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetArtistsByTrackIDs(ctx, req.(*TrackIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetArtistsByAlbumID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetArtistsByAlbumID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetArtistsByAlbumID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetArtistsByAlbumID(ctx, req.(*AlbumID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetArtistsByAlbumIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumIDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetArtistsByAlbumIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetArtistsByAlbumIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetArtistsByAlbumIDs(ctx, req.(*AlbumIDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetAlbumIDsByArtistID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetAlbumIDsByArtistID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetAlbumIDsByArtistID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetAlbumIDsByArtistID(ctx, req.(*ArtistID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetTrackIDsByArtistID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetTrackIDsByArtistID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetTrackIDsByArtistID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetTrackIDsByArtistID(ctx, req.(*ArtistID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_CreateStreamsByArtistIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistStreamCreateDataList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).CreateStreamsByArtistIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/CreateStreamsByArtistIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).CreateStreamsByArtistIDs(ctx, req.(*ArtistStreamCreateDataList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetArtistsListenedByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetArtistsListenedByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetArtistsListenedByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetArtistsListenedByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_LikeArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).LikeArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/LikeArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).LikeArtist(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_GetFavoriteArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiltersWithUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).GetFavoriteArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/GetFavoriteArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).GetFavoriteArtists(ctx, req.(*FiltersWithUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtistService_SearchArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtistServiceServer).SearchArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artist.ArtistService/SearchArtists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtistServiceServer).SearchArtists(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtistService_ServiceDesc is the grpc.ServiceDesc for ArtistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artist.ArtistService",
	HandlerType: (*ArtistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllArtists",
			Handler:    _ArtistService_GetAllArtists_Handler,
		},
		{
			MethodName: "GetArtistByID",
			Handler:    _ArtistService_GetArtistByID_Handler,
		},
		{
			MethodName: "GetArtistTitleByID",
			Handler:    _ArtistService_GetArtistTitleByID_Handler,
		},
		{
			MethodName: "GetArtistsByTrackID",
			Handler:    _ArtistService_GetArtistsByTrackID_Handler,
		},
		{
			MethodName: "GetArtistsByTrackIDs",
			Handler:    _ArtistService_GetArtistsByTrackIDs_Handler,
		},
		{
			MethodName: "GetArtistsByAlbumID",
			Handler:    _ArtistService_GetArtistsByAlbumID_Handler,
		},
		{
			MethodName: "GetArtistsByAlbumIDs",
			Handler:    _ArtistService_GetArtistsByAlbumIDs_Handler,
		},
		{
			MethodName: "GetAlbumIDsByArtistID",
			Handler:    _ArtistService_GetAlbumIDsByArtistID_Handler,
		},
		{
			MethodName: "GetTrackIDsByArtistID",
			Handler:    _ArtistService_GetTrackIDsByArtistID_Handler,
		},
		{
			MethodName: "CreateStreamsByArtistIDs",
			Handler:    _ArtistService_CreateStreamsByArtistIDs_Handler,
		},
		{
			MethodName: "GetArtistsListenedByUserID",
			Handler:    _ArtistService_GetArtistsListenedByUserID_Handler,
		},
		{
			MethodName: "LikeArtist",
			Handler:    _ArtistService_LikeArtist_Handler,
		},
		{
			MethodName: "GetFavoriteArtists",
			Handler:    _ArtistService_GetFavoriteArtists_Handler,
		},
		{
			MethodName: "SearchArtists",
			Handler:    _ArtistService_SearchArtists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artist/artist.proto",
}
