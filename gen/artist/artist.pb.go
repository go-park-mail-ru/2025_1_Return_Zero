// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.29.3
// source: artist/artist.proto

package artist

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArtistsIDWithAlbumID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistIds *ArtistIDList `protobuf:"bytes,1,opt,name=artist_ids,json=artistIds,proto3" json:"artist_ids,omitempty"`
	AlbumId   *AlbumID      `protobuf:"bytes,2,opt,name=album_id,json=albumId,proto3" json:"album_id,omitempty"`
	TrackIds  *TrackIDList  `protobuf:"bytes,3,opt,name=track_ids,json=trackIds,proto3" json:"track_ids,omitempty"`
}

func (x *ArtistsIDWithAlbumID) Reset() {
	*x = ArtistsIDWithAlbumID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistsIDWithAlbumID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistsIDWithAlbumID) ProtoMessage() {}

func (x *ArtistsIDWithAlbumID) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistsIDWithAlbumID.ProtoReflect.Descriptor instead.
func (*ArtistsIDWithAlbumID) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{0}
}

func (x *ArtistsIDWithAlbumID) GetArtistIds() *ArtistIDList {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *ArtistsIDWithAlbumID) GetAlbumId() *AlbumID {
	if x != nil {
		return x.AlbumId
	}
	return nil
}

func (x *ArtistsIDWithAlbumID) GetTrackIds() *TrackIDList {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

type ArtistDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistId int64 `protobuf:"varint,1,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
	LabelId  int64 `protobuf:"varint,2,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
}

func (x *ArtistDelete) Reset() {
	*x = ArtistDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistDelete) ProtoMessage() {}

func (x *ArtistDelete) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistDelete.ProtoReflect.Descriptor instead.
func (*ArtistDelete) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{1}
}

func (x *ArtistDelete) GetArtistId() int64 {
	if x != nil {
		return x.ArtistId
	}
	return 0
}

func (x *ArtistDelete) GetLabelId() int64 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

type FiltersWithLabelID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *Filters `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	LabelId int64    `protobuf:"varint,2,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
}

func (x *FiltersWithLabelID) Reset() {
	*x = FiltersWithLabelID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersWithLabelID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersWithLabelID) ProtoMessage() {}

func (x *FiltersWithLabelID) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersWithLabelID.ProtoReflect.Descriptor instead.
func (*FiltersWithLabelID) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{2}
}

func (x *FiltersWithLabelID) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FiltersWithLabelID) GetLabelId() int64 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

type ArtistEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistId int64  `protobuf:"varint,1,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
	Image    []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	LabelId  int64  `protobuf:"varint,3,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
	NewTitle string `protobuf:"bytes,4,opt,name=new_title,json=newTitle,proto3" json:"new_title,omitempty"`
}

func (x *ArtistEdit) Reset() {
	*x = ArtistEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistEdit) ProtoMessage() {}

func (x *ArtistEdit) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistEdit.ProtoReflect.Descriptor instead.
func (*ArtistEdit) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{3}
}

func (x *ArtistEdit) GetArtistId() int64 {
	if x != nil {
		return x.ArtistId
	}
	return 0
}

func (x *ArtistEdit) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ArtistEdit) GetLabelId() int64 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

func (x *ArtistEdit) GetNewTitle() string {
	if x != nil {
		return x.NewTitle
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string  `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	UserId *UserID `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{4}
}

func (x *Query) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Query) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type ArtistListened struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistsListened int64 `protobuf:"varint,1,opt,name=artists_listened,json=artistsListened,proto3" json:"artists_listened,omitempty"`
}

func (x *ArtistListened) Reset() {
	*x = ArtistListened{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistListened) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistListened) ProtoMessage() {}

func (x *ArtistListened) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistListened.ProtoReflect.Descriptor instead.
func (*ArtistListened) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{5}
}

func (x *ArtistListened) GetArtistsListened() int64 {
	if x != nil {
		return x.ArtistsListened
	}
	return 0
}

type UserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserID) Reset() {
	*x = UserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{6}
}

func (x *UserID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ArtistID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ArtistID) Reset() {
	*x = ArtistID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistID) ProtoMessage() {}

func (x *ArtistID) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistID.ProtoReflect.Descriptor instead.
func (*ArtistID) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{7}
}

func (x *ArtistID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ArtistIDWithUserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistId *ArtistID `protobuf:"bytes,1,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
	UserId   *UserID   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ArtistIDWithUserID) Reset() {
	*x = ArtistIDWithUserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistIDWithUserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistIDWithUserID) ProtoMessage() {}

func (x *ArtistIDWithUserID) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistIDWithUserID.ProtoReflect.Descriptor instead.
func (*ArtistIDWithUserID) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{8}
}

func (x *ArtistIDWithUserID) GetArtistId() *ArtistID {
	if x != nil {
		return x.ArtistId
	}
	return nil
}

func (x *ArtistIDWithUserID) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type ArtistIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*ArtistID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ArtistIDList) Reset() {
	*x = ArtistIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistIDList) ProtoMessage() {}

func (x *ArtistIDList) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistIDList.ProtoReflect.Descriptor instead.
func (*ArtistIDList) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{9}
}

func (x *ArtistIDList) GetIds() []*ArtistID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type TrackID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TrackID) Reset() {
	*x = TrackID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackID) ProtoMessage() {}

func (x *TrackID) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackID.ProtoReflect.Descriptor instead.
func (*TrackID) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{10}
}

func (x *TrackID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type AlbumID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AlbumID) Reset() {
	*x = AlbumID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumID) ProtoMessage() {}

func (x *AlbumID) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumID.ProtoReflect.Descriptor instead.
func (*AlbumID) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{11}
}

func (x *AlbumID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TrackIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*TrackID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *TrackIDList) Reset() {
	*x = TrackIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackIDList) ProtoMessage() {}

func (x *TrackIDList) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackIDList.ProtoReflect.Descriptor instead.
func (*TrackIDList) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{12}
}

func (x *TrackIDList) GetIds() []*TrackID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type AlbumIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []*AlbumID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *AlbumIDList) Reset() {
	*x = AlbumIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlbumIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlbumIDList) ProtoMessage() {}

func (x *AlbumIDList) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlbumIDList.ProtoReflect.Descriptor instead.
func (*AlbumIDList) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{13}
}

func (x *AlbumIDList) GetIds() []*AlbumID {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ArtistLoad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Image   []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	LabelId int64  `protobuf:"varint,3,opt,name=label_id,json=labelId,proto3" json:"label_id,omitempty"`
}

func (x *ArtistLoad) Reset() {
	*x = ArtistLoad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistLoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistLoad) ProtoMessage() {}

func (x *ArtistLoad) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistLoad.ProtoReflect.Descriptor instead.
func (*ArtistLoad) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{14}
}

func (x *ArtistLoad) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArtistLoad) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ArtistLoad) GetLabelId() int64 {
	if x != nil {
		return x.LabelId
	}
	return 0
}

type Artist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Thumbnail   string `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	IsFavorite  bool   `protobuf:"varint,5,opt,name=is_favorite,json=isFavorite,proto3" json:"is_favorite,omitempty"`
}

func (x *Artist) Reset() {
	*x = Artist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artist) ProtoMessage() {}

func (x *Artist) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artist.ProtoReflect.Descriptor instead.
func (*Artist) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{15}
}

func (x *Artist) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Artist) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Artist) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Artist) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *Artist) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type ArtistDetailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artist         *Artist `protobuf:"bytes,1,opt,name=artist,proto3" json:"artist,omitempty"`
	ListenersCount int64   `protobuf:"varint,2,opt,name=listeners_count,json=listenersCount,proto3" json:"listeners_count,omitempty"`
	FavoritesCount int64   `protobuf:"varint,3,opt,name=favorites_count,json=favoritesCount,proto3" json:"favorites_count,omitempty"`
}

func (x *ArtistDetailed) Reset() {
	*x = ArtistDetailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistDetailed) ProtoMessage() {}

func (x *ArtistDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistDetailed.ProtoReflect.Descriptor instead.
func (*ArtistDetailed) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{16}
}

func (x *ArtistDetailed) GetArtist() *Artist {
	if x != nil {
		return x.Artist
	}
	return nil
}

func (x *ArtistDetailed) GetListenersCount() int64 {
	if x != nil {
		return x.ListenersCount
	}
	return 0
}

func (x *ArtistDetailed) GetFavoritesCount() int64 {
	if x != nil {
		return x.FavoritesCount
	}
	return 0
}

type ArtistTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ArtistTitle) Reset() {
	*x = ArtistTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistTitle) ProtoMessage() {}

func (x *ArtistTitle) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistTitle.ProtoReflect.Descriptor instead.
func (*ArtistTitle) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{17}
}

func (x *ArtistTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ArtistList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*Artist `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *ArtistList) Reset() {
	*x = ArtistList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistList) ProtoMessage() {}

func (x *ArtistList) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistList.ProtoReflect.Descriptor instead.
func (*ArtistList) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{18}
}

func (x *ArtistList) GetArtists() []*Artist {
	if x != nil {
		return x.Artists
	}
	return nil
}

type ArtistWithTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *ArtistWithTitle) Reset() {
	*x = ArtistWithTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistWithTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistWithTitle) ProtoMessage() {}

func (x *ArtistWithTitle) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistWithTitle.ProtoReflect.Descriptor instead.
func (*ArtistWithTitle) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{19}
}

func (x *ArtistWithTitle) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArtistWithTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ArtistWithTitleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*ArtistWithTitle `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *ArtistWithTitleList) Reset() {
	*x = ArtistWithTitleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistWithTitleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistWithTitleList) ProtoMessage() {}

func (x *ArtistWithTitleList) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistWithTitleList.ProtoReflect.Descriptor instead.
func (*ArtistWithTitleList) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{20}
}

func (x *ArtistWithTitleList) GetArtists() []*ArtistWithTitle {
	if x != nil {
		return x.Artists
	}
	return nil
}

type ArtistWithTitleMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists map[int64]*ArtistWithTitleList `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ArtistWithTitleMap) Reset() {
	*x = ArtistWithTitleMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistWithTitleMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistWithTitleMap) ProtoMessage() {}

func (x *ArtistWithTitleMap) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistWithTitleMap.ProtoReflect.Descriptor instead.
func (*ArtistWithTitleMap) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{21}
}

func (x *ArtistWithTitleMap) GetArtists() map[int64]*ArtistWithTitleList {
	if x != nil {
		return x.Artists
	}
	return nil
}

type ArtistWithRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Role  string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *ArtistWithRole) Reset() {
	*x = ArtistWithRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistWithRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistWithRole) ProtoMessage() {}

func (x *ArtistWithRole) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistWithRole.ProtoReflect.Descriptor instead.
func (*ArtistWithRole) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{22}
}

func (x *ArtistWithRole) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ArtistWithRole) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ArtistWithRole) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ArtistWithRoleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists []*ArtistWithRole `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty"`
}

func (x *ArtistWithRoleList) Reset() {
	*x = ArtistWithRoleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistWithRoleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistWithRoleList) ProtoMessage() {}

func (x *ArtistWithRoleList) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistWithRoleList.ProtoReflect.Descriptor instead.
func (*ArtistWithRoleList) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{23}
}

func (x *ArtistWithRoleList) GetArtists() []*ArtistWithRole {
	if x != nil {
		return x.Artists
	}
	return nil
}

type ArtistWithRoleMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artists map[int64]*ArtistWithRoleList `protobuf:"bytes,1,rep,name=artists,proto3" json:"artists,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ArtistWithRoleMap) Reset() {
	*x = ArtistWithRoleMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistWithRoleMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistWithRoleMap) ProtoMessage() {}

func (x *ArtistWithRoleMap) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistWithRoleMap.ProtoReflect.Descriptor instead.
func (*ArtistWithRoleMap) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{24}
}

func (x *ArtistWithRoleMap) GetArtists() map[int64]*ArtistWithRoleList {
	if x != nil {
		return x.Artists
	}
	return nil
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{25}
}

func (x *Pagination) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Pagination) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Filters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *Filters) Reset() {
	*x = Filters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{26}
}

func (x *Filters) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type FiltersWithUserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *Filters `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	UserId  *UserID  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FiltersWithUserID) Reset() {
	*x = FiltersWithUserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersWithUserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersWithUserID) ProtoMessage() {}

func (x *FiltersWithUserID) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersWithUserID.ProtoReflect.Descriptor instead.
func (*FiltersWithUserID) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{27}
}

func (x *FiltersWithUserID) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *FiltersWithUserID) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type ArtistStreamCreateDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistIds *ArtistIDList `protobuf:"bytes,1,opt,name=artist_ids,json=artistIds,proto3" json:"artist_ids,omitempty"`
	UserId    *UserID       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ArtistStreamCreateDataList) Reset() {
	*x = ArtistStreamCreateDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtistStreamCreateDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtistStreamCreateDataList) ProtoMessage() {}

func (x *ArtistStreamCreateDataList) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtistStreamCreateDataList.ProtoReflect.Descriptor instead.
func (*ArtistStreamCreateDataList) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{28}
}

func (x *ArtistStreamCreateDataList) GetArtistIds() *ArtistIDList {
	if x != nil {
		return x.ArtistIds
	}
	return nil
}

func (x *ArtistStreamCreateDataList) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

type LikeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtistId *ArtistID `protobuf:"bytes,1,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
	UserId   *UserID   `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsLike   bool      `protobuf:"varint,3,opt,name=is_like,json=isLike,proto3" json:"is_like,omitempty"`
}

func (x *LikeRequest) Reset() {
	*x = LikeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artist_artist_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeRequest) ProtoMessage() {}

func (x *LikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artist_artist_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeRequest.ProtoReflect.Descriptor instead.
func (*LikeRequest) Descriptor() ([]byte, []int) {
	return file_artist_artist_proto_rawDescGZIP(), []int{29}
}

func (x *LikeRequest) GetArtistId() *ArtistID {
	if x != nil {
		return x.ArtistId
	}
	return nil
}

func (x *LikeRequest) GetUserId() *UserID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *LikeRequest) GetIsLike() bool {
	if x != nil {
		return x.IsLike
	}
	return false
}

var File_artist_artist_proto protoreflect.FileDescriptor

var file_artist_artist_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x52, 0x07, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x46, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x5a,
	0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x0a, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x46, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x0e, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x22, 0x18, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1a, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6c,
	0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0c,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x19, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x07, 0x41,
	0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x0b, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x6c,
	0x62, 0x75, 0x6d, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x0a, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x22,
	0x8f, 0x01, 0x0a, 0x06, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x23,
	0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x36, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x0f, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x48, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0xb0,
	0x01, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x57, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4a, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x46, 0x0a,
	0x12, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x07, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x56, 0x0a,
	0x0c, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x3d, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x67, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1a, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4c, 0x69, 0x6b, 0x65, 0x32, 0xee, 0x09, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x10, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44,
	0x12, 0x0f, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x44, 0x1a, 0x1a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x52, 0x6f,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x12, 0x0f, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x1a, 0x1b, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49,
	0x44, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x62, 0x75,
	0x6d, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49,
	0x44, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x13,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49,
	0x44, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x13,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x49, 0x44, 0x73, 0x12,
	0x22, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x4c, 0x69, 0x6b, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12,
	0x13, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x12, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x0d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x12, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x1a, 0x0e, 0x2e, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x45, 0x64, 0x69,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x1a, 0x0e, 0x2e, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x1a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x1c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x62, 0x75, 0x6d, 0x49, 0x44, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x61, 0x72, 0x74, 0x69,
	0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_artist_artist_proto_rawDescOnce sync.Once
	file_artist_artist_proto_rawDescData = file_artist_artist_proto_rawDesc
)

func file_artist_artist_proto_rawDescGZIP() []byte {
	file_artist_artist_proto_rawDescOnce.Do(func() {
		file_artist_artist_proto_rawDescData = protoimpl.X.CompressGZIP(file_artist_artist_proto_rawDescData)
	})
	return file_artist_artist_proto_rawDescData
}

var file_artist_artist_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_artist_artist_proto_goTypes = []interface{}{
	(*ArtistsIDWithAlbumID)(nil),       // 0: artist.ArtistsIDWithAlbumID
	(*ArtistDelete)(nil),               // 1: artist.ArtistDelete
	(*FiltersWithLabelID)(nil),         // 2: artist.FiltersWithLabelID
	(*ArtistEdit)(nil),                 // 3: artist.ArtistEdit
	(*Query)(nil),                      // 4: artist.Query
	(*ArtistListened)(nil),             // 5: artist.ArtistListened
	(*UserID)(nil),                     // 6: artist.UserID
	(*ArtistID)(nil),                   // 7: artist.ArtistID
	(*ArtistIDWithUserID)(nil),         // 8: artist.ArtistIDWithUserID
	(*ArtistIDList)(nil),               // 9: artist.ArtistIDList
	(*TrackID)(nil),                    // 10: artist.TrackID
	(*AlbumID)(nil),                    // 11: artist.AlbumID
	(*TrackIDList)(nil),                // 12: artist.TrackIDList
	(*AlbumIDList)(nil),                // 13: artist.AlbumIDList
	(*ArtistLoad)(nil),                 // 14: artist.ArtistLoad
	(*Artist)(nil),                     // 15: artist.Artist
	(*ArtistDetailed)(nil),             // 16: artist.ArtistDetailed
	(*ArtistTitle)(nil),                // 17: artist.ArtistTitle
	(*ArtistList)(nil),                 // 18: artist.ArtistList
	(*ArtistWithTitle)(nil),            // 19: artist.ArtistWithTitle
	(*ArtistWithTitleList)(nil),        // 20: artist.ArtistWithTitleList
	(*ArtistWithTitleMap)(nil),         // 21: artist.ArtistWithTitleMap
	(*ArtistWithRole)(nil),             // 22: artist.ArtistWithRole
	(*ArtistWithRoleList)(nil),         // 23: artist.ArtistWithRoleList
	(*ArtistWithRoleMap)(nil),          // 24: artist.ArtistWithRoleMap
	(*Pagination)(nil),                 // 25: artist.Pagination
	(*Filters)(nil),                    // 26: artist.Filters
	(*FiltersWithUserID)(nil),          // 27: artist.FiltersWithUserID
	(*ArtistStreamCreateDataList)(nil), // 28: artist.ArtistStreamCreateDataList
	(*LikeRequest)(nil),                // 29: artist.LikeRequest
	nil,                                // 30: artist.ArtistWithTitleMap.ArtistsEntry
	nil,                                // 31: artist.ArtistWithRoleMap.ArtistsEntry
	(*emptypb.Empty)(nil),              // 32: google.protobuf.Empty
}
var file_artist_artist_proto_depIdxs = []int32{
	9,  // 0: artist.ArtistsIDWithAlbumID.artist_ids:type_name -> artist.ArtistIDList
	11, // 1: artist.ArtistsIDWithAlbumID.album_id:type_name -> artist.AlbumID
	12, // 2: artist.ArtistsIDWithAlbumID.track_ids:type_name -> artist.TrackIDList
	26, // 3: artist.FiltersWithLabelID.filters:type_name -> artist.Filters
	6,  // 4: artist.Query.user_id:type_name -> artist.UserID
	7,  // 5: artist.ArtistIDWithUserID.artist_id:type_name -> artist.ArtistID
	6,  // 6: artist.ArtistIDWithUserID.user_id:type_name -> artist.UserID
	7,  // 7: artist.ArtistIDList.ids:type_name -> artist.ArtistID
	10, // 8: artist.TrackIDList.ids:type_name -> artist.TrackID
	11, // 9: artist.AlbumIDList.ids:type_name -> artist.AlbumID
	15, // 10: artist.ArtistDetailed.artist:type_name -> artist.Artist
	15, // 11: artist.ArtistList.artists:type_name -> artist.Artist
	19, // 12: artist.ArtistWithTitleList.artists:type_name -> artist.ArtistWithTitle
	30, // 13: artist.ArtistWithTitleMap.artists:type_name -> artist.ArtistWithTitleMap.ArtistsEntry
	22, // 14: artist.ArtistWithRoleList.artists:type_name -> artist.ArtistWithRole
	31, // 15: artist.ArtistWithRoleMap.artists:type_name -> artist.ArtistWithRoleMap.ArtistsEntry
	25, // 16: artist.Filters.pagination:type_name -> artist.Pagination
	26, // 17: artist.FiltersWithUserID.filters:type_name -> artist.Filters
	6,  // 18: artist.FiltersWithUserID.user_id:type_name -> artist.UserID
	9,  // 19: artist.ArtistStreamCreateDataList.artist_ids:type_name -> artist.ArtistIDList
	6,  // 20: artist.ArtistStreamCreateDataList.user_id:type_name -> artist.UserID
	7,  // 21: artist.LikeRequest.artist_id:type_name -> artist.ArtistID
	6,  // 22: artist.LikeRequest.user_id:type_name -> artist.UserID
	20, // 23: artist.ArtistWithTitleMap.ArtistsEntry.value:type_name -> artist.ArtistWithTitleList
	23, // 24: artist.ArtistWithRoleMap.ArtistsEntry.value:type_name -> artist.ArtistWithRoleList
	27, // 25: artist.ArtistService.GetAllArtists:input_type -> artist.FiltersWithUserID
	8,  // 26: artist.ArtistService.GetArtistByID:input_type -> artist.ArtistIDWithUserID
	7,  // 27: artist.ArtistService.GetArtistTitleByID:input_type -> artist.ArtistID
	10, // 28: artist.ArtistService.GetArtistsByTrackID:input_type -> artist.TrackID
	12, // 29: artist.ArtistService.GetArtistsByTrackIDs:input_type -> artist.TrackIDList
	11, // 30: artist.ArtistService.GetArtistsByAlbumID:input_type -> artist.AlbumID
	13, // 31: artist.ArtistService.GetArtistsByAlbumIDs:input_type -> artist.AlbumIDList
	7,  // 32: artist.ArtistService.GetAlbumIDsByArtistID:input_type -> artist.ArtistID
	7,  // 33: artist.ArtistService.GetTrackIDsByArtistID:input_type -> artist.ArtistID
	28, // 34: artist.ArtistService.CreateStreamsByArtistIDs:input_type -> artist.ArtistStreamCreateDataList
	6,  // 35: artist.ArtistService.GetArtistsListenedByUserID:input_type -> artist.UserID
	29, // 36: artist.ArtistService.LikeArtist:input_type -> artist.LikeRequest
	27, // 37: artist.ArtistService.GetFavoriteArtists:input_type -> artist.FiltersWithUserID
	4,  // 38: artist.ArtistService.SearchArtists:input_type -> artist.Query
	14, // 39: artist.ArtistService.CreateArtist:input_type -> artist.ArtistLoad
	3,  // 40: artist.ArtistService.EditArtist:input_type -> artist.ArtistEdit
	2,  // 41: artist.ArtistService.GetArtistsLabelID:input_type -> artist.FiltersWithLabelID
	1,  // 42: artist.ArtistService.DeleteArtist:input_type -> artist.ArtistDelete
	0,  // 43: artist.ArtistService.ConnectArtists:input_type -> artist.ArtistsIDWithAlbumID
	18, // 44: artist.ArtistService.GetAllArtists:output_type -> artist.ArtistList
	16, // 45: artist.ArtistService.GetArtistByID:output_type -> artist.ArtistDetailed
	17, // 46: artist.ArtistService.GetArtistTitleByID:output_type -> artist.ArtistTitle
	23, // 47: artist.ArtistService.GetArtistsByTrackID:output_type -> artist.ArtistWithRoleList
	24, // 48: artist.ArtistService.GetArtistsByTrackIDs:output_type -> artist.ArtistWithRoleMap
	20, // 49: artist.ArtistService.GetArtistsByAlbumID:output_type -> artist.ArtistWithTitleList
	21, // 50: artist.ArtistService.GetArtistsByAlbumIDs:output_type -> artist.ArtistWithTitleMap
	13, // 51: artist.ArtistService.GetAlbumIDsByArtistID:output_type -> artist.AlbumIDList
	12, // 52: artist.ArtistService.GetTrackIDsByArtistID:output_type -> artist.TrackIDList
	32, // 53: artist.ArtistService.CreateStreamsByArtistIDs:output_type -> google.protobuf.Empty
	5,  // 54: artist.ArtistService.GetArtistsListenedByUserID:output_type -> artist.ArtistListened
	32, // 55: artist.ArtistService.LikeArtist:output_type -> google.protobuf.Empty
	18, // 56: artist.ArtistService.GetFavoriteArtists:output_type -> artist.ArtistList
	18, // 57: artist.ArtistService.SearchArtists:output_type -> artist.ArtistList
	15, // 58: artist.ArtistService.CreateArtist:output_type -> artist.Artist
	15, // 59: artist.ArtistService.EditArtist:output_type -> artist.Artist
	18, // 60: artist.ArtistService.GetArtistsLabelID:output_type -> artist.ArtistList
	32, // 61: artist.ArtistService.DeleteArtist:output_type -> google.protobuf.Empty
	32, // 62: artist.ArtistService.ConnectArtists:output_type -> google.protobuf.Empty
	44, // [44:63] is the sub-list for method output_type
	25, // [25:44] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_artist_artist_proto_init() }
func file_artist_artist_proto_init() {
	if File_artist_artist_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_artist_artist_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistsIDWithAlbumID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersWithLabelID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistListened); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistIDWithUserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlbumIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistLoad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistDetailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistWithTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistWithTitleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistWithTitleMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistWithRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistWithRoleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistWithRoleMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersWithUserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtistStreamCreateDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artist_artist_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artist_artist_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_artist_artist_proto_goTypes,
		DependencyIndexes: file_artist_artist_proto_depIdxs,
		MessageInfos:      file_artist_artist_proto_msgTypes,
	}.Build()
	File_artist_artist_proto = out.File
	file_artist_artist_proto_rawDesc = nil
	file_artist_artist_proto_goTypes = nil
	file_artist_artist_proto_depIdxs = nil
}
