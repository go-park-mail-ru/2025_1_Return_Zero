// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/albums": {
            "get": {
                "description": "Get a list of albums with optional pagination filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "albums"
                ],
                "summary": "Get albums",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 10, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of albums",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/delivery.Album"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid filters",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIBadRequestErrorResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "$ref": "#/definitions/delivery.ErrorResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIInternalServerErrorResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "$ref": "#/definitions/delivery.ErrorResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/artists": {
            "get": {
                "description": "Get a list of artists with optional pagination filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "artists"
                ],
                "summary": "Get artists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 10, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of artists",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/delivery.Artist"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid filters",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIBadRequestErrorResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "$ref": "#/definitions/delivery.ErrorResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIInternalServerErrorResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "$ref": "#/definitions/delivery.ErrorResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/tracks": {
            "get": {
                "description": "Get a list of tracks with optional pagination filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tracks"
                ],
                "summary": "Get tracks",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 10, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tracks",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/delivery.Track"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid filters",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIBadRequestErrorResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "$ref": "#/definitions/delivery.ErrorResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/delivery.APIInternalServerErrorResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "body": {
                                            "$ref": "#/definitions/delivery.ErrorResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "delivery.APIBadRequestErrorResponse": {
            "description": "API bad request error response structure",
            "type": "object",
            "properties": {
                "body": {
                    "$ref": "#/definitions/delivery.ErrorResponse"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "delivery.APIInternalServerErrorResponse": {
            "description": "API internal server error response structure",
            "type": "object",
            "properties": {
                "body": {
                    "$ref": "#/definitions/delivery.ErrorResponse"
                },
                "status": {
                    "type": "integer",
                    "example": 500
                }
            }
        },
        "delivery.APIResponse": {
            "description": "API response wrapper",
            "type": "object",
            "properties": {
                "body": {},
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "delivery.Album": {
            "description": "A music album entity",
            "type": "object",
            "properties": {
                "artist": {
                    "$ref": "#/definitions/delivery.AlbumArtist"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "thumbnail_url": {
                    "type": "string",
                    "example": "https://example.com/album.jpg"
                },
                "title": {
                    "type": "string",
                    "example": "Anticyclone"
                }
            }
        },
        "delivery.AlbumArtist": {
            "description": "An artist of an album entity",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Lagtrain"
                }
            }
        },
        "delivery.Artist": {
            "description": "A music artist entity",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "thumbnail_url": {
                    "type": "string",
                    "example": "https://example.com/artist.jpg"
                },
                "title": {
                    "type": "string",
                    "example": "Inabakumori"
                }
            }
        },
        "delivery.ErrorResponse": {
            "description": "Error response structure",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Something went wrong"
                }
            }
        },
        "delivery.Track": {
            "description": "A music track entity",
            "type": "object",
            "properties": {
                "album": {
                    "$ref": "#/definitions/delivery.TrackAlbum"
                },
                "artist": {
                    "$ref": "#/definitions/delivery.TrackArtist"
                },
                "duration": {
                    "type": "integer",
                    "example": 216
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "thumbnail_url": {
                    "type": "string",
                    "example": "https://example.com/image.jpg"
                },
                "title": {
                    "type": "string",
                    "example": "Lagtrain"
                }
            }
        },
        "delivery.TrackAlbum": {
            "description": "An album of a track entity",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Lagtrain"
                }
            }
        },
        "delivery.TrackArtist": {
            "description": "An artist of a track entity",
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "title": {
                    "type": "string",
                    "example": "Lagtrain"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "returnzero.ru",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Return Zero API",
	Description:      "This is the API server for Return Zero music app.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
