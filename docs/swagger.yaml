basePath: /api/v1
definitions:
  delivery.APIBadRequestErrorResponse:
    description: API bad request error response structure
    properties:
      error:
        example: Something went wrong
        type: string
      status:
        example: 400
        type: integer
    type: object
  delivery.APIForbiddenErrorResponse:
    description: API forbidden error response structure
    properties:
      error:
        example: Forbidden
        type: string
      status:
        example: 403
        type: integer
    type: object
  delivery.APIInternalServerErrorResponse:
    description: API internal server error response structure
    properties:
      error:
        example: Something went wrong
        type: string
      status:
        example: 500
        type: integer
    type: object
  delivery.APINotFoundErrorResponse:
    description: API not found error response structure
    properties:
      error:
        example: Not found
        type: string
      status:
        example: 404
        type: integer
    type: object
  delivery.APIResponse:
    description: API response wrapper
    properties:
      body: {}
      status:
        example: 200
        type: integer
    type: object
  delivery.APIUnauthorizedErrorResponse:
    description: API unauthorized error response structure
    properties:
      error:
        example: Unauthorized
        type: string
      status:
        example: 401
        type: integer
    type: object
  delivery.Album:
    description: A music album entity
    properties:
      artists:
        items:
          $ref: '#/definitions/delivery.AlbumArtist'
        type: array
      id:
        example: 1
        type: integer
      release_date:
        example: "2021-01-01"
        type: string
      thumbnail_url:
        example: https://example.com/album.jpg
        type: string
      title:
        example: Anticyclone
        type: string
      type:
        allOf:
        - $ref: '#/definitions/delivery.AlbumType'
        example: album
    type: object
  delivery.AlbumArtist:
    description: An artist associated with an album
    properties:
      id:
        example: 1
        type: integer
      title:
        example: Inabakumori
        type: string
    type: object
  delivery.AlbumType:
    enum:
    - album
    - ep
    - compilation
    - single
    type: string
    x-enum-varnames:
    - AlbumTypeAlbum
    - AlbumTypeEP
    - AlbumTypeCompilation
    - AlbumTypeSingle
  delivery.Artist:
    description: A music artist entity
    properties:
      description:
        example: Inabakumori is a Japanese artist
        type: string
      id:
        example: 1
        type: integer
      thumbnail_url:
        example: https://example.com/artist.jpg
        type: string
      title:
        example: Inabakumori
        type: string
    type: object
  delivery.ArtistDetailed:
    description: A detailed music artist entity
    properties:
      description:
        example: Inabakumori is a Japanese artist
        type: string
      favorites_count:
        example: 1000
        type: integer
      id:
        example: 1
        type: integer
      listeners_count:
        example: 1000
        type: integer
      thumbnail_url:
        example: https://example.com/artist.jpg
        type: string
      title:
        example: Inabakumori
        type: string
    type: object
  delivery.ChangeUserData:
    description: Data for user profile update. Requires current credentials and allows
      new username (3-20 alphanum), new email (5-30 valid format), and new password
      (4-25 characters)
    properties:
      email:
        type: string
      new_email:
        type: string
      new_password:
        type: string
      new_username:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  delivery.LoginData:
    description: User login data. Either username or email must be provided along
      with required password (4-25 characters)
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  delivery.Message:
    description: Message for responses without data
    properties:
      msg:
        example: object have been successfully created/updated
        type: string
    type: object
  delivery.PrivacySettings:
    properties:
      is_public_artists_listened:
        type: boolean
      is_public_favorite_artists:
        type: boolean
      is_public_favorite_tracks:
        type: boolean
      is_public_minutes_listened:
        type: boolean
      is_public_playlists:
        type: boolean
      is_public_tracks_listened:
        type: boolean
      username:
        type: string
    type: object
  delivery.RegisterData:
    description: User registration data requiring username (3-20 characters), password
      (4-25 characters), and valid email (5-30 characters)
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  delivery.StreamID:
    description: An id of a track stream
    properties:
      id:
        example: 1
        type: integer
    type: object
  delivery.Track:
    description: A music track entity
    properties:
      album:
        type: string
      album_id:
        example: 1
        type: integer
      artists:
        items:
          $ref: '#/definitions/delivery.TrackArtist'
        type: array
      duration:
        example: 216
        type: integer
      id:
        example: 1
        type: integer
      thumbnail_url:
        example: https://example.com/image.jpg
        type: string
      title:
        example: Lagtrain
        type: string
    type: object
  delivery.TrackArtist:
    description: An artist associated with a track
    properties:
      id:
        example: 1
        type: integer
      role:
        example: Main artist
        type: string
      title:
        example: Lagtrain
        type: string
    type: object
  delivery.TrackDetailed:
    properties:
      album:
        type: string
      album_id:
        example: 1
        type: integer
      artists:
        items:
          $ref: '#/definitions/delivery.TrackArtist'
        type: array
      duration:
        example: 216
        type: integer
      file_url:
        example: https://example.com/track.mp3
        type: string
      id:
        example: 1
        type: integer
      thumbnail_url:
        example: https://example.com/image.jpg
        type: string
      title:
        example: Lagtrain
        type: string
    type: object
  delivery.UserAndSettings:
    properties:
      avatar_url:
        type: string
      is_public_artists_listened:
        type: boolean
      is_public_favorite_artists:
        type: boolean
      is_public_favorite_tracks:
        type: boolean
      is_public_minutes_listened:
        type: boolean
      is_public_playlists:
        type: boolean
      is_public_tracks_listened:
        type: boolean
      username:
        type: string
    type: object
  delivery.UserDelete:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  delivery.UserToFront:
    description: User data
    properties:
      avatar_url:
        type: string
      email:
        type: string
      username:
        type: string
    type: object
host: returnzero.ru
info:
  contact: {}
  description: This is the API server for Return Zero music app.
  title: Return Zero API
  version: "1.0"
paths:
  /albums:
    get:
      consumes:
      - application/json
      description: Get a list of albums with optional pagination filters
      parameters:
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Limit (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of albums
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/delivery.Album'
                  type: array
              type: object
        "400":
          description: Bad request - invalid filters
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Get albums
      tags:
      - albums
  /artists:
    get:
      consumes:
      - application/json
      description: Get a list of artists with optional pagination filters
      parameters:
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Limit (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of artists
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/delivery.Artist'
                  type: array
              type: object
        "400":
          description: Bad request - invalid filters
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Get artists
      tags:
      - artists
  /artists/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific artist by their ID
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Artist details
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.ArtistDetailed'
              type: object
        "400":
          description: Bad request - invalid ID
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Get artist by ID
      tags:
      - artists
  /artists/{id}/albums:
    get:
      consumes:
      - application/json
      description: Get a list of albums for a specific artist
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of albums
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/delivery.Album'
                  type: array
              type: object
        "400":
          description: Bad request - invalid artist ID
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Get albums by artist ID
      tags:
      - albums
  /artists/{id}/tracks:
    get:
      consumes:
      - application/json
      description: Get a list of tracks by a specific artist with optional pagination
        filters
      parameters:
      - description: Artist ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tracks by artist
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/delivery.Track'
                  type: array
              type: object
        "400":
          description: Bad request - invalid ID or filters
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/delivery.APINotFoundErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Get tracks by artist ID
      tags:
      - tracks
  /auth/check:
    get:
      consumes:
      - application/json
      description: Verifies user's session and returns user information if authenticated
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.UserToFront'
              type: object
        "400":
          description: Bad request - session not found or invalid
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Check user authentication
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with provided login credentials and returns
        a session
      parameters:
      - description: User login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/delivery.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully authenticated
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.UserToFront'
              type: object
        "400":
          description: Bad request - invalid login data
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Authenticate user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Terminates user session and invalidates session cookie
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.Message'
              type: object
        "400":
          description: Bad request - session not found
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Log out user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account with provided registration data
      parameters:
      - description: User registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/delivery.RegisterData'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully registered
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.UserToFront'
              type: object
        "400":
          description: Bad request - invalid registration data
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /streams/{id}:
    put:
      description: updates listening duration at the end of stream
      parameters:
      - description: Stream ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Message that stream was updated
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/delivery.Message'
                  type: array
              type: object
        "400":
          description: Bad request - invalid ID or filters
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/delivery.APIUnauthorizedErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/delivery.APIForbiddenErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/delivery.APINotFoundErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Update stream duration by id
      tags:
      - tracks
  /tracks:
    get:
      consumes:
      - application/json
      description: Get a list of tracks with optional pagination filters
      parameters:
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      - description: 'Limit (default: 10, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tracks
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/delivery.Track'
                  type: array
              type: object
        "400":
          description: Bad request - invalid filters
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/delivery.APINotFoundErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Get tracks
      tags:
      - tracks
  /tracks/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific track by its ID with detailed information
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Track details
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.TrackDetailed'
              type: object
        "400":
          description: Bad request - invalid ID
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/delivery.APINotFoundErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Get track by ID
      tags:
      - tracks
  /tracks/{id}/stream:
    post:
      description: Creates stream for track by id, essentially it means saving track
        to listening history
      parameters:
      - description: Track ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ID of created stream
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  items:
                    $ref: '#/definitions/delivery.StreamID'
                  type: array
              type: object
        "400":
          description: Bad request - invalid ID or filters
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.APIInternalServerErrorResponse'
      summary: Create stream for track by id
      tags:
      - tracks
  /user/{username}:
    delete:
      consumes:
      - application/json
      description: Deletes the authenticated user's account. Requires valid session
        cookie and matching user credentials.
      parameters:
      - description: Session ID cookie (session_id=...)
        in: header
        name: Authorization
        required: true
        type: string
      - description: User credentials for deletion verification
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/delivery.UserDelete'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully deleted
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.Message'
              type: object
        "400":
          description: 'Possible errors: invalid request body, validation failed,
            credentials mismatch, session cookie missing'
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
        "500":
          description: Internal server error during user deletion
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Delete user account
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Retrieves user's profile information and privacy settings
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User data and privacy settings
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.UserAndSettings'
              type: object
        "400":
          description: Bad request - username not found in URL or user not found
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Get user profile data and privacy settings
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updates user's profile information such as username, email, or
        password
      parameters:
      - description: User data to be updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/delivery.ChangeUserData'
      produces:
      - application/json
      responses:
        "200":
          description: User data successfully updated
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.UserToFront'
              type: object
        "400":
          description: Bad request - invalid user data or validation failure
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Change user profile data
      tags:
      - user
  /user/{username}/avatar:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a new avatar image for a specific user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Avatar image file (max 5MB, image formats only)
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Avatar successfully uploaded
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.Message'
              type: object
        "400":
          description: Bad request - invalid file or username
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Upload user avatar
      tags:
      - user
  /user/{username}/privacy:
    put:
      consumes:
      - application/json
      description: Updates user's privacy settings
      parameters:
      - description: User privacy settings to be updated
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/delivery.PrivacySettings'
      produces:
      - application/json
      responses:
        "200":
          description: Privacy settings successfully changed
          schema:
            allOf:
            - $ref: '#/definitions/delivery.APIResponse'
            - properties:
                body:
                  $ref: '#/definitions/delivery.Message'
              type: object
        "400":
          description: Bad request - invalid settings data, validation failure, or
            unauthorized user
          schema:
            $ref: '#/definitions/delivery.APIBadRequestErrorResponse'
      summary: Change user privacy settings
      tags:
      - user
swagger: "2.0"
